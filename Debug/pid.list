
pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080074a0  080074a0  000174a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a4  080078a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078ac  080078ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080078b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001dc  08007a90  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08007a90  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6f0  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e15  00000000  00000000  0002d8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0002f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00030640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ea7  00000000  00000000  000314d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010547  00000000  00000000  0004a377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec67  00000000  00000000  0005a8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005294  00000000  00000000  000e9578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007488 	.word	0x08007488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007488 	.word	0x08007488

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_ldivmod>:
 8001030:	b97b      	cbnz	r3, 8001052 <__aeabi_ldivmod+0x22>
 8001032:	b972      	cbnz	r2, 8001052 <__aeabi_ldivmod+0x22>
 8001034:	2900      	cmp	r1, #0
 8001036:	bfbe      	ittt	lt
 8001038:	2000      	movlt	r0, #0
 800103a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800103e:	e006      	blt.n	800104e <__aeabi_ldivmod+0x1e>
 8001040:	bf08      	it	eq
 8001042:	2800      	cmpeq	r0, #0
 8001044:	bf1c      	itt	ne
 8001046:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800104a:	f04f 30ff 	movne.w	r0, #4294967295
 800104e:	f000 b9a9 	b.w	80013a4 <__aeabi_idiv0>
 8001052:	f1ad 0c08 	sub.w	ip, sp, #8
 8001056:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105a:	2900      	cmp	r1, #0
 800105c:	db09      	blt.n	8001072 <__aeabi_ldivmod+0x42>
 800105e:	2b00      	cmp	r3, #0
 8001060:	db1a      	blt.n	8001098 <__aeabi_ldivmod+0x68>
 8001062:	f000 f835 	bl	80010d0 <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr
 8001072:	4240      	negs	r0, r0
 8001074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	db1b      	blt.n	80010b4 <__aeabi_ldivmod+0x84>
 800107c:	f000 f828 	bl	80010d0 <__udivmoddi4>
 8001080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001088:	b004      	add	sp, #16
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr
 8001098:	4252      	negs	r2, r2
 800109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109e:	f000 f817 	bl	80010d0 <__udivmoddi4>
 80010a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010aa:	b004      	add	sp, #16
 80010ac:	4240      	negs	r0, r0
 80010ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b2:	4770      	bx	lr
 80010b4:	4252      	negs	r2, r2
 80010b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ba:	f000 f809 	bl	80010d0 <__udivmoddi4>
 80010be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c6:	b004      	add	sp, #16
 80010c8:	4252      	negs	r2, r2
 80010ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <BMP280_Read8+0x38>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	230a      	movs	r3, #10
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2301      	movs	r3, #1
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	f107 030f 	add.w	r3, r7, #15
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	21ec      	movs	r1, #236	; 0xec
 80013d0:	f001 fda6 	bl	8002f20 <HAL_I2C_Mem_Read>
  return tmp;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200001f8 	.word	0x200001f8

080013e4 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <BMP280_Read16+0x40>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	230a      	movs	r3, #10
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	2302      	movs	r3, #2
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2301      	movs	r3, #1
 8001406:	21ec      	movs	r1, #236	; 0xec
 8001408:	f001 fd8a 	bl	8002f20 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 800140c:	7b3b      	ldrb	r3, [r7, #12]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b21a      	sxth	r2, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	b21b      	sxth	r3, r3
 8001416:	4313      	orrs	r3, r2
 8001418:	b21b      	sxth	r3, r3
 800141a:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200001f8 	.word	0x200001f8

08001428 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ffd5 	bl	80013e4 <BMP280_Read16>
 800143a:	4603      	mov	r3, r0
 800143c:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21a      	sxth	r2, r3
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	b29b      	uxth	r3, r3
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af04      	add	r7, sp, #16
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	4613      	mov	r3, r2
 800146a:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <BMP280_Write8+0x34>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b29a      	uxth	r2, r3
 8001474:	230a      	movs	r3, #10
 8001476:	9302      	str	r3, [sp, #8]
 8001478:	2301      	movs	r3, #1
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	1dbb      	adds	r3, r7, #6
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	21ec      	movs	r1, #236	; 0xec
 8001484:	f001 fc52 	bl	8002d2c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001f8 	.word	0x200001f8

08001494 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af04      	add	r7, sp, #16
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <BMP280_Read24+0x40>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	230a      	movs	r3, #10
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2303      	movs	r3, #3
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	21ec      	movs	r1, #236	; 0xec
 80014b8:	f001 fd32 	bl	8002f20 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80014bc:	7b3b      	ldrb	r3, [r7, #12]
 80014be:	041a      	lsls	r2, r3, #16
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	4313      	orrs	r3, r2
 80014c6:	7bba      	ldrb	r2, [r7, #14]
 80014c8:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001f8 	.word	0x200001f8

080014d8 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70bb      	strb	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 80014f2:	4a48      	ldr	r2, [pc, #288]	; (8001614 <BMP280_Init+0x13c>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d901      	bls.n	8001502 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 80014fe:	2303      	movs	r3, #3
 8001500:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001502:	4a45      	ldr	r2, [pc, #276]	; (8001618 <BMP280_Init+0x140>)
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001508:	787b      	ldrb	r3, [r7, #1]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 800150e:	2300      	movs	r3, #0
 8001510:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	2b05      	cmp	r3, #5
 8001516:	d901      	bls.n	800151c <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001518:	2305      	movs	r3, #5
 800151a:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 800151c:	4a3f      	ldr	r2, [pc, #252]	; (800161c <BMP280_Init+0x144>)
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 8001522:	78bb      	ldrb	r3, [r7, #2]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d901      	bls.n	800152c <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001528:	2305      	movs	r3, #5
 800152a:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 800152c:	4a3c      	ldr	r2, [pc, #240]	; (8001620 <BMP280_Init+0x148>)
 800152e:	78bb      	ldrb	r3, [r7, #2]
 8001530:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 8001532:	bf00      	nop
 8001534:	20d0      	movs	r0, #208	; 0xd0
 8001536:	f7ff ff37 	bl	80013a8 <BMP280_Read8>
 800153a:	4603      	mov	r3, r0
 800153c:	2b58      	cmp	r3, #88	; 0x58
 800153e:	d1f9      	bne.n	8001534 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001540:	2088      	movs	r0, #136	; 0x88
 8001542:	f7ff ff71 	bl	8001428 <BMP280_Read16LE>
 8001546:	4603      	mov	r3, r0
 8001548:	461a      	mov	r2, r3
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <BMP280_Init+0x14c>)
 800154c:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800154e:	208a      	movs	r0, #138	; 0x8a
 8001550:	f7ff ff6a 	bl	8001428 <BMP280_Read16LE>
 8001554:	4603      	mov	r3, r0
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <BMP280_Init+0x150>)
 800155a:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800155c:	208c      	movs	r0, #140	; 0x8c
 800155e:	f7ff ff63 	bl	8001428 <BMP280_Read16LE>
 8001562:	4603      	mov	r3, r0
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <BMP280_Init+0x154>)
 8001568:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800156a:	208e      	movs	r0, #142	; 0x8e
 800156c:	f7ff ff5c 	bl	8001428 <BMP280_Read16LE>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <BMP280_Init+0x158>)
 8001576:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 8001578:	2090      	movs	r0, #144	; 0x90
 800157a:	f7ff ff55 	bl	8001428 <BMP280_Read16LE>
 800157e:	4603      	mov	r3, r0
 8001580:	b21a      	sxth	r2, r3
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <BMP280_Init+0x15c>)
 8001584:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001586:	2092      	movs	r0, #146	; 0x92
 8001588:	f7ff ff4e 	bl	8001428 <BMP280_Read16LE>
 800158c:	4603      	mov	r3, r0
 800158e:	b21a      	sxth	r2, r3
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <BMP280_Init+0x160>)
 8001592:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001594:	2094      	movs	r0, #148	; 0x94
 8001596:	f7ff ff47 	bl	8001428 <BMP280_Read16LE>
 800159a:	4603      	mov	r3, r0
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <BMP280_Init+0x164>)
 80015a0:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80015a2:	2096      	movs	r0, #150	; 0x96
 80015a4:	f7ff ff40 	bl	8001428 <BMP280_Read16LE>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <BMP280_Init+0x168>)
 80015ae:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80015b0:	2098      	movs	r0, #152	; 0x98
 80015b2:	f7ff ff39 	bl	8001428 <BMP280_Read16LE>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <BMP280_Init+0x16c>)
 80015bc:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80015be:	209a      	movs	r0, #154	; 0x9a
 80015c0:	f7ff ff32 	bl	8001428 <BMP280_Read16LE>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <BMP280_Init+0x170>)
 80015ca:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80015cc:	209c      	movs	r0, #156	; 0x9c
 80015ce:	f7ff ff2b 	bl	8001428 <BMP280_Read16LE>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b21a      	sxth	r2, r3
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <BMP280_Init+0x174>)
 80015d8:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 80015da:	209e      	movs	r0, #158	; 0x9e
 80015dc:	f7ff ff24 	bl	8001428 <BMP280_Read16LE>
 80015e0:	4603      	mov	r3, r0
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <BMP280_Init+0x178>)
 80015e6:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	015b      	lsls	r3, r3, #5
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	78bb      	ldrb	r3, [r7, #2]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4619      	mov	r1, r3
 8001604:	20f4      	movs	r0, #244	; 0xf4
 8001606:	f7ff ff29 	bl	800145c <BMP280_Write8>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200001f8 	.word	0x200001f8
 8001618:	200001fe 	.word	0x200001fe
 800161c:	200001fc 	.word	0x200001fc
 8001620:	200001fd 	.word	0x200001fd
 8001624:	20000214 	.word	0x20000214
 8001628:	20000200 	.word	0x20000200
 800162c:	20000202 	.word	0x20000202
 8001630:	20000216 	.word	0x20000216
 8001634:	20000204 	.word	0x20000204
 8001638:	20000206 	.word	0x20000206
 800163c:	20000208 	.word	0x20000208
 8001640:	2000020a 	.word	0x2000020a
 8001644:	2000020c 	.word	0x2000020c
 8001648:	2000020e 	.word	0x2000020e
 800164c:	20000210 	.word	0x20000210
 8001650:	20000212 	.word	0x20000212

08001654 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <BMP280_ReadTemperature+0xf0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d16b      	bne.n	800173a <BMP280_ReadTemperature+0xe6>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001662:	20f4      	movs	r0, #244	; 0xf4
 8001664:	f7ff fea0 	bl	80013a8 <BMP280_Read8>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	f023 0303 	bic.w	r3, r3, #3
 8001672:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	4619      	mov	r1, r3
 8001680:	20f4      	movs	r0, #244	; 0xf4
 8001682:	f7ff feeb 	bl	800145c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 8001686:	20f4      	movs	r0, #244	; 0xf4
 8001688:	f7ff fe8e 	bl	80013a8 <BMP280_Read8>
 800168c:	4603      	mov	r3, r0
 800168e:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001690:	7dbb      	ldrb	r3, [r7, #22]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 8001698:	7dbb      	ldrb	r3, [r7, #22]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d14d      	bne.n	800173a <BMP280_ReadTemperature+0xe6>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 800169e:	20f4      	movs	r0, #244	; 0xf4
 80016a0:	f7ff fe82 	bl	80013a8 <BMP280_Read8>
 80016a4:	4603      	mov	r3, r0
 80016a6:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80016a8:	7dbb      	ldrb	r3, [r7, #22]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80016b0:	7dbb      	ldrb	r3, [r7, #22]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d000      	beq.n	80016b8 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80016b6:	e7f2      	b.n	800169e <BMP280_ReadTemperature+0x4a>
				  break;
 80016b8:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80016ba:	20fa      	movs	r0, #250	; 0xfa
 80016bc:	f7ff feea 	bl	8001494 <BMP280_Read24>
 80016c0:	4603      	mov	r3, r0
 80016c2:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	111b      	asrs	r3, r3, #4
 80016c8:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	10da      	asrs	r2, r3, #3
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <BMP280_ReadTemperature+0xf4>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80016d6:	4a1d      	ldr	r2, [pc, #116]	; (800174c <BMP280_ReadTemperature+0xf8>)
 80016d8:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	12db      	asrs	r3, r3, #11
 80016e2:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	111b      	asrs	r3, r3, #4
 80016e8:	4a17      	ldr	r2, [pc, #92]	; (8001748 <BMP280_ReadTemperature+0xf4>)
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	1112      	asrs	r2, r2, #4
 80016f2:	4915      	ldr	r1, [pc, #84]	; (8001748 <BMP280_ReadTemperature+0xf4>)
 80016f4:	8809      	ldrh	r1, [r1, #0]
 80016f6:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80016f8:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80016fc:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80016fe:	4a14      	ldr	r2, [pc, #80]	; (8001750 <BMP280_ReadTemperature+0xfc>)
 8001700:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001704:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001708:	139b      	asrs	r3, r3, #14
 800170a:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <BMP280_ReadTemperature+0x100>)
 8001714:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <BMP280_ReadTemperature+0x100>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3380      	adds	r3, #128	; 0x80
 8001722:	121b      	asrs	r3, r3, #8
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fa69 	bl	8000bfc <__aeabi_i2f>
 800172a:	4603      	mov	r3, r0
 800172c:	607b      	str	r3, [r7, #4]
		  return T/100;
 800172e:	490a      	ldr	r1, [pc, #40]	; (8001758 <BMP280_ReadTemperature+0x104>)
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fb6b 	bl	8000e0c <__aeabi_fdiv>
 8001736:	4603      	mov	r3, r0
 8001738:	e000      	b.n	800173c <BMP280_ReadTemperature+0xe8>
	  }
  }

  return -99;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <BMP280_ReadTemperature+0x108>)
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200001fe 	.word	0x200001fe
 8001748:	20000214 	.word	0x20000214
 800174c:	20000200 	.word	0x20000200
 8001750:	20000202 	.word	0x20000202
 8001754:	20000218 	.word	0x20000218
 8001758:	42c80000 	.word	0x42c80000
 800175c:	c2c60000 	.word	0xc2c60000

08001760 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b0cc      	sub	sp, #304	; 0x130
 8001766:	af00      	add	r7, sp, #0
 8001768:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 800176c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001770:	f7ff ff70 	bl	8001654 <BMP280_ReadTemperature>
 8001774:	4602      	mov	r2, r0
 8001776:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800177a:	601a      	str	r2, [r3, #0]

	  if(*temperature == -99)
 800177c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	49b3      	ldr	r1, [pc, #716]	; (8001a50 <BMP280_ReadTemperatureAndPressure+0x2f0>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fc21 	bl	8000fcc <__aeabi_fcmpeq>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <BMP280_ReadTemperatureAndPressure+0x34>
		  return -1;
 8001790:	23ff      	movs	r3, #255	; 0xff
 8001792:	e2bc      	b.n	8001d0e <BMP280_ReadTemperatureAndPressure+0x5ae>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 8001794:	20f7      	movs	r0, #247	; 0xf7
 8001796:	f7ff fe7d 	bl	8001494 <BMP280_Read24>
 800179a:	4603      	mov	r3, r0
 800179c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80017a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017a4:	111b      	asrs	r3, r3, #4
 80017a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80017aa:	4baa      	ldr	r3, [pc, #680]	; (8001a54 <BMP280_ReadTemperatureAndPressure+0x2f4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	17da      	asrs	r2, r3, #31
 80017b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017b4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80017b8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80017bc:	4611      	mov	r1, r2
 80017be:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
 80017c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80017c4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80017d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017da:	fb03 f102 	mul.w	r1, r3, r2
 80017de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80017e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	18ca      	adds	r2, r1, r3
 80017ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017f0:	fba3 4503 	umull	r4, r5, r3, r3
 80017f4:	1953      	adds	r3, r2, r5
 80017f6:	461d      	mov	r5, r3
 80017f8:	4b97      	ldr	r3, [pc, #604]	; (8001a58 <BMP280_ReadTemperatureAndPressure+0x2f8>)
 80017fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fe:	b21b      	sxth	r3, r3
 8001800:	17da      	asrs	r2, r3, #31
 8001802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001806:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800180a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800180e:	4603      	mov	r3, r0
 8001810:	fb03 f205 	mul.w	r2, r3, r5
 8001814:	460b      	mov	r3, r1
 8001816:	fb04 f303 	mul.w	r3, r4, r3
 800181a:	4413      	add	r3, r2
 800181c:	4602      	mov	r2, r0
 800181e:	fba4 8902 	umull	r8, r9, r4, r2
 8001822:	444b      	add	r3, r9
 8001824:	4699      	mov	r9, r3
 8001826:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 800182a:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800182e:	4b8b      	ldr	r3, [pc, #556]	; (8001a5c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	b21b      	sxth	r3, r3
 8001836:	17da      	asrs	r2, r3, #31
 8001838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800183c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001844:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001848:	462a      	mov	r2, r5
 800184a:	fb02 f203 	mul.w	r2, r2, r3
 800184e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001852:	4621      	mov	r1, r4
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	441a      	add	r2, r3
 800185a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800185e:	4621      	mov	r1, r4
 8001860:	fba3 ab01 	umull	sl, fp, r3, r1
 8001864:	eb02 030b 	add.w	r3, r2, fp
 8001868:	469b      	mov	fp, r3
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001876:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800187a:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800187e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001882:	1814      	adds	r4, r2, r0
 8001884:	643c      	str	r4, [r7, #64]	; 0x40
 8001886:	414b      	adcs	r3, r1
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
 800188a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800188e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 8001892:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	b21b      	sxth	r3, r3
 800189a:	17da      	asrs	r2, r3, #31
 800189c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80018a0:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	f04f 0100 	mov.w	r1, #0
 80018ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018b0:	00d9      	lsls	r1, r3, #3
 80018b2:	2000      	movs	r0, #0
 80018b4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b8:	1814      	adds	r4, r2, r0
 80018ba:	63bc      	str	r4, [r7, #56]	; 0x38
 80018bc:	414b      	adcs	r3, r1
 80018be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80018c4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80018c8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80018cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018d0:	fb03 f102 	mul.w	r1, r3, r2
 80018d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80018d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	18ca      	adds	r2, r1, r3
 80018e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018e6:	fba3 3103 	umull	r3, r1, r3, r3
 80018ea:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80018ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80018f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018f6:	18d3      	adds	r3, r2, r3
 80018f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <BMP280_ReadTemperatureAndPressure+0x304>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800190a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800190e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001912:	4622      	mov	r2, r4
 8001914:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001918:	4641      	mov	r1, r8
 800191a:	fb01 f202 	mul.w	r2, r1, r2
 800191e:	464d      	mov	r5, r9
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	4603      	mov	r3, r0
 8001926:	fb03 f305 	mul.w	r3, r3, r5
 800192a:	4413      	add	r3, r2
 800192c:	4602      	mov	r2, r0
 800192e:	4641      	mov	r1, r8
 8001930:	fba2 2101 	umull	r2, r1, r2, r1
 8001934:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001938:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800193c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001940:	4413      	add	r3, r2
 8001942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001952:	4623      	mov	r3, r4
 8001954:	0a18      	lsrs	r0, r3, #8
 8001956:	462a      	mov	r2, r5
 8001958:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800195c:	462b      	mov	r3, r5
 800195e:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <BMP280_ReadTemperatureAndPressure+0x308>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	b21b      	sxth	r3, r3
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800196e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001972:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001976:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800197a:	464a      	mov	r2, r9
 800197c:	fb02 f203 	mul.w	r2, r2, r3
 8001980:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001984:	4644      	mov	r4, r8
 8001986:	fb04 f303 	mul.w	r3, r4, r3
 800198a:	441a      	add	r2, r3
 800198c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001990:	4644      	mov	r4, r8
 8001992:	fba3 3404 	umull	r3, r4, r3, r4
 8001996:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 800199a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800199e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019a2:	18d3      	adds	r3, r2, r3
 80019a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80019b4:	464c      	mov	r4, r9
 80019b6:	0323      	lsls	r3, r4, #12
 80019b8:	46c4      	mov	ip, r8
 80019ba:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 80019be:	4644      	mov	r4, r8
 80019c0:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80019c2:	1884      	adds	r4, r0, r2
 80019c4:	633c      	str	r4, [r7, #48]	; 0x30
 80019c6:	eb41 0303 	adc.w	r3, r1, r3
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
 80019cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80019d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80019d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019d8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80019dc:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80019e0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80019e4:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80019f4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80019f8:	4622      	mov	r2, r4
 80019fa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80019fe:	4641      	mov	r1, r8
 8001a00:	fb01 f202 	mul.w	r2, r1, r2
 8001a04:	464d      	mov	r5, r9
 8001a06:	4618      	mov	r0, r3
 8001a08:	4621      	mov	r1, r4
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	fb03 f305 	mul.w	r3, r3, r5
 8001a10:	4413      	add	r3, r2
 8001a12:	4602      	mov	r2, r0
 8001a14:	4641      	mov	r1, r8
 8001a16:	fba2 2101 	umull	r2, r1, r2, r1
 8001a1a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8001a1e:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8001a22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001a26:	4413      	add	r3, r2
 8001a28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001a38:	4629      	mov	r1, r5
 8001a3a:	104a      	asrs	r2, r1, #1
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	17cb      	asrs	r3, r1, #31
 8001a40:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001a44:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d111      	bne.n	8001a70 <BMP280_ReadTemperatureAndPressure+0x310>
	    return 0;  // avoid exception caused by division by zero
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e15e      	b.n	8001d0e <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001a50:	c2c60000 	.word	0xc2c60000
 8001a54:	20000218 	.word	0x20000218
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	2000020a 	.word	0x2000020a
 8001a60:	20000208 	.word	0x20000208
 8001a64:	20000206 	.word	0x20000206
 8001a68:	20000204 	.word	0x20000204
 8001a6c:	20000216 	.word	0x20000216
	  }
	  p = 1048576 - adc_P;
 8001a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a74:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001a78:	17da      	asrs	r2, r3, #31
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a7e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001a82:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 8001a86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a8a:	105b      	asrs	r3, r3, #1
 8001a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a94:	07db      	lsls	r3, r3, #31
 8001a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a9e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	1aa4      	subs	r4, r4, r2
 8001aa6:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8001aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8001aae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ab2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	1891      	adds	r1, r2, r2
 8001abc:	6239      	str	r1, [r7, #32]
 8001abe:	415b      	adcs	r3, r3
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	1851      	adds	r1, r2, r1
 8001aca:	61b9      	str	r1, [r7, #24]
 8001acc:	4629      	mov	r1, r5
 8001ace:	414b      	adcs	r3, r1
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001ade:	4649      	mov	r1, r9
 8001ae0:	018b      	lsls	r3, r1, #6
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ae8:	4641      	mov	r1, r8
 8001aea:	018a      	lsls	r2, r1, #6
 8001aec:	4641      	mov	r1, r8
 8001aee:	1889      	adds	r1, r1, r2
 8001af0:	6139      	str	r1, [r7, #16]
 8001af2:	4649      	mov	r1, r9
 8001af4:	eb43 0101 	adc.w	r1, r3, r1
 8001af8:	6179      	str	r1, [r7, #20]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b06:	4649      	mov	r1, r9
 8001b08:	008b      	lsls	r3, r1, #2
 8001b0a:	46c4      	mov	ip, r8
 8001b0c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b10:	4641      	mov	r1, r8
 8001b12:	008a      	lsls	r2, r1, #2
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	189b      	adds	r3, r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	460b      	mov	r3, r1
 8001b22:	462a      	mov	r2, r5
 8001b24:	eb42 0303 	adc.w	r3, r2, r3
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b36:	4649      	mov	r1, r9
 8001b38:	008b      	lsls	r3, r1, #2
 8001b3a:	46c4      	mov	ip, r8
 8001b3c:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b40:	4641      	mov	r1, r8
 8001b42:	008a      	lsls	r2, r1, #2
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	189b      	adds	r3, r3, r2
 8001b4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b50:	462b      	mov	r3, r5
 8001b52:	460a      	mov	r2, r1
 8001b54:	eb42 0303 	adc.w	r3, r2, r3
 8001b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b5a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001b5e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b62:	f7ff fa65 	bl	8001030 <__aeabi_ldivmod>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <BMP280_ReadTemperatureAndPressure+0x5bc>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	17da      	asrs	r2, r3, #31
 8001b78:	673b      	str	r3, [r7, #112]	; 0x70
 8001b7a:	677a      	str	r2, [r7, #116]	; 0x74
 8001b7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	0b50      	lsrs	r0, r2, #13
 8001b8a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b8e:	1359      	asrs	r1, r3, #13
 8001b90:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8001b94:	462b      	mov	r3, r5
 8001b96:	fb00 f203 	mul.w	r2, r0, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	fb03 f301 	mul.w	r3, r3, r1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	fba2 2100 	umull	r2, r1, r2, r0
 8001ba8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8001bac:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001bb0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001bba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001bbe:	f04f 0000 	mov.w	r0, #0
 8001bc2:	f04f 0100 	mov.w	r1, #0
 8001bc6:	0b50      	lsrs	r0, r2, #13
 8001bc8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bcc:	1359      	asrs	r1, r3, #13
 8001bce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001bd2:	462b      	mov	r3, r5
 8001bd4:	fb00 f203 	mul.w	r2, r0, r3
 8001bd8:	4623      	mov	r3, r4
 8001bda:	fb03 f301 	mul.w	r3, r3, r1
 8001bde:	4413      	add	r3, r2
 8001be0:	4622      	mov	r2, r4
 8001be2:	fba2 2100 	umull	r2, r1, r2, r0
 8001be6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8001bea:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001bee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c04:	4621      	mov	r1, r4
 8001c06:	0e4a      	lsrs	r2, r1, #25
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c12:	164b      	asrs	r3, r1, #25
 8001c14:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001c18:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <BMP280_ReadTemperatureAndPressure+0x5c0>)
 8001c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	17da      	asrs	r2, r3, #31
 8001c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c2a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001c2e:	462a      	mov	r2, r5
 8001c30:	fb02 f203 	mul.w	r2, r2, r3
 8001c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c38:	4621      	mov	r1, r4
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c44:	4621      	mov	r1, r4
 8001c46:	fba2 2101 	umull	r2, r1, r2, r1
 8001c4a:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8001c4e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001c52:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001c56:	4413      	add	r3, r2
 8001c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001c68:	4621      	mov	r1, r4
 8001c6a:	0cca      	lsrs	r2, r1, #19
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	4629      	mov	r1, r5
 8001c70:	460c      	mov	r4, r1
 8001c72:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001c76:	14cb      	asrs	r3, r1, #19
 8001c78:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001c7c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001c80:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c84:	1884      	adds	r4, r0, r2
 8001c86:	663c      	str	r4, [r7, #96]	; 0x60
 8001c88:	eb41 0303 	adc.w	r3, r1, r3
 8001c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8001c8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001c92:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c96:	4621      	mov	r1, r4
 8001c98:	1889      	adds	r1, r1, r2
 8001c9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	eb43 0101 	adc.w	r1, r3, r1
 8001ca2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001ca4:	f04f 0000 	mov.w	r0, #0
 8001ca8:	f04f 0100 	mov.w	r1, #0
 8001cac:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	0a18      	lsrs	r0, r3, #8
 8001cb4:	462a      	mov	r2, r5
 8001cb6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cba:	462b      	mov	r3, r5
 8001cbc:	1219      	asrs	r1, r3, #8
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <BMP280_ReadTemperatureAndPressure+0x5c4>)
 8001cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	17da      	asrs	r2, r3, #31
 8001cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8001cca:	657a      	str	r2, [r7, #84]	; 0x54
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001cd8:	464c      	mov	r4, r9
 8001cda:	0123      	lsls	r3, r4, #4
 8001cdc:	46c4      	mov	ip, r8
 8001cde:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001ce2:	4644      	mov	r4, r8
 8001ce4:	0122      	lsls	r2, r4, #4
 8001ce6:	1884      	adds	r4, r0, r2
 8001ce8:	603c      	str	r4, [r7, #0]
 8001cea:	eb41 0303 	adc.w	r3, r1, r3
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cf4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001cf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da00      	bge.n	8001d02 <BMP280_ReadTemperatureAndPressure+0x5a2>
 8001d00:	33ff      	adds	r3, #255	; 0xff
 8001d02:	121b      	asrs	r3, r3, #8
 8001d04:	461a      	mov	r2, r3
 8001d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d0a:	601a      	str	r2, [r3, #0]

	  return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000212 	.word	0x20000212
 8001d20:	20000210 	.word	0x20000210
 8001d24:	2000020e 	.word	0x2000020e

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2c:	f000 fb68 	bl	8002400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d30:	f000 f822 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d34:	f000 f908 	bl	8001f48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d38:	f000 f8dc 	bl	8001ef4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d3c:	f000 f85e 	bl	8001dfc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d40:	f000 f88a 	bl	8001e58 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001d44:	2301      	movs	r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <main+0x40>)
 8001d4c:	f7ff fbc4 	bl	80014d8 <BMP280_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <main+0x44>)
 8001d52:	f002 fb11 	bl	8004378 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BMP280_ReadTemperatureAndPressure(&current_temp_f, &pressure);
 8001d56:	4906      	ldr	r1, [pc, #24]	; (8001d70 <main+0x48>)
 8001d58:	4806      	ldr	r0, [pc, #24]	; (8001d74 <main+0x4c>)
 8001d5a:	f7ff fd01 	bl	8001760 <BMP280_ReadTemperatureAndPressure>
	  HAL_Delay(500);
 8001d5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d62:	f000 fbaf 	bl	80024c4 <HAL_Delay>
	  BMP280_ReadTemperatureAndPressure(&current_temp_f, &pressure);
 8001d66:	e7f6      	b.n	8001d56 <main+0x2e>
 8001d68:	2000021c 	.word	0x2000021c
 8001d6c:	20000270 	.word	0x20000270
 8001d70:	20000300 	.word	0x20000300
 8001d74:	200002fc 	.word	0x200002fc

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	; 0x40
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	2228      	movs	r2, #40	; 0x28
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 fe68 	bl	8004a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da2:	2310      	movs	r3, #16
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da6:	2302      	movs	r3, #2
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001daa:	2300      	movs	r3, #0
 8001dac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f001 fe73 	bl	8003aa4 <HAL_RCC_OscConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001dc4:	f000 f92e 	bl	8002024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	230f      	movs	r3, #15
 8001dca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2102      	movs	r1, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 f8e0 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001dee:	f000 f919 	bl	8002024 <Error_Handler>
  }
}
 8001df2:	bf00      	nop
 8001df4:	3740      	adds	r7, #64	; 0x40
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <MX_I2C1_Init+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_I2C1_Init+0x58>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_I2C1_Init+0x50>)
 8001e3a:	f000 fe33 	bl	8002aa4 <HAL_I2C_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e44:	f000 f8ee 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	2000021c 	.word	0x2000021c
 8001e50:	40005400 	.word	0x40005400
 8001e54:	000186a0 	.word	0x000186a0

08001e58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <MX_TIM3_Init+0x98>)
 8001e78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9600-1;
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e7c:	f242 527f 	movw	r2, #9599	; 0x257f
 8001e80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001e88:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e8a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e9c:	4813      	ldr	r0, [pc, #76]	; (8001eec <MX_TIM3_Init+0x94>)
 8001e9e:	f002 fa1b 	bl	80042d8 <HAL_TIM_Base_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ea8:	f000 f8bc 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <MX_TIM3_Init+0x94>)
 8001eba:	f002 faaf 	bl	800441c <HAL_TIM_ConfigClockSource>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ec4:	f000 f8ae 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_TIM3_Init+0x94>)
 8001ed6:	f002 fc5d 	bl	8004794 <HAL_TIMEx_MasterConfigSynchronization>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ee0:	f000 f8a0 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	40000400 	.word	0x40000400

08001ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_USART2_UART_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f002 fc90 	bl	8004850 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f875 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002b8 	.word	0x200002b8
 8001f44:	40004400 	.word	0x40004400

08001f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a26      	ldr	r2, [pc, #152]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f7a:	f043 0320 	orr.w	r3, r3, #32
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <MX_GPIO_Init+0xcc>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2130      	movs	r1, #48	; 0x30
 8001fc0:	4815      	ldr	r0, [pc, #84]	; (8002018 <MX_GPIO_Init+0xd0>)
 8001fc2:	f000 fd35 	bl	8002a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_GPIO_Init+0xd4>)
 8001fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4811      	ldr	r0, [pc, #68]	; (8002020 <MX_GPIO_Init+0xd8>)
 8001fdc:	f000 fba4 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001fe0:	2330      	movs	r3, #48	; 0x30
 8001fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2302      	movs	r3, #2
 8001fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <MX_GPIO_Init+0xd0>)
 8001ff8:	f000 fb96 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2028      	movs	r0, #40	; 0x28
 8002002:	f000 fb5a 	bl	80026ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002006:	2028      	movs	r0, #40	; 0x28
 8002008:	f000 fb73 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40010800 	.word	0x40010800
 800201c:	10110000 	.word	0x10110000
 8002020:	40011000 	.word	0x40011000

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>
	...

08002030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_MspInit+0x5c>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	4a14      	ldr	r2, [pc, #80]	; (800208c <HAL_MspInit+0x5c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6193      	str	r3, [r2, #24]
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_MspInit+0x5c>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_MspInit+0x5c>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_MspInit+0x5c>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	61d3      	str	r3, [r2, #28]
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <HAL_MspInit+0x5c>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_MspInit+0x60>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_MspInit+0x60>)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000

08002094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a15      	ldr	r2, [pc, #84]	; (8002104 <HAL_I2C_MspInit+0x70>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d123      	bne.n	80020fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d0:	2312      	movs	r3, #18
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d4:	2303      	movs	r3, #3
 80020d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4619      	mov	r1, r3
 80020de:	480b      	ldr	r0, [pc, #44]	; (800210c <HAL_I2C_MspInit+0x78>)
 80020e0:	f000 fb22 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ee:	61d3      	str	r3, [r2, #28]
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_I2C_MspInit+0x74>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020fc:	bf00      	nop
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40005400 	.word	0x40005400
 8002108:	40021000 	.word	0x40021000
 800210c:	40010c00 	.word	0x40010c00

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_TIM_Base_MspInit+0x34>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10b      	bne.n	800213a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_TIM_Base_MspInit+0x38>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_TIM_Base_MspInit+0x38>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_TIM_Base_MspInit+0x38>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40000400 	.word	0x40000400
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <HAL_UART_MspInit+0x70>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d123      	bne.n	80021b4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_UART_MspInit+0x74>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_UART_MspInit+0x74>)
 8002172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002176:	61d3      	str	r3, [r2, #28]
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_UART_MspInit+0x74>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_UART_MspInit+0x74>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <HAL_UART_MspInit+0x74>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_UART_MspInit+0x74>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800219c:	230c      	movs	r3, #12
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_UART_MspInit+0x78>)
 80021b0:	f000 faba 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3720      	adds	r7, #32
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40004400 	.word	0x40004400
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010800 	.word	0x40010800

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220e:	f000 f93d 	bl	800248c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}

08002216 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800221a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800221e:	f000 fc1f 	bl	8002a60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}

08002226 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  return 1;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800223e:	f002 fbe3 	bl	8004a08 <__errno>
 8002242:	4603      	mov	r3, r0
 8002244:	2216      	movs	r2, #22
 8002246:	601a      	str	r2, [r3, #0]
  return -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_exit>:

void _exit (int status)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffe7 	bl	8002234 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002266:	e7fe      	b.n	8002266 <_exit+0x12>

08002268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
  }

  return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e009      	b.n	80022c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf1      	blt.n	80022b4 <_write+0x12>
  }
  return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_close>:

int _close(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002300:	605a      	str	r2, [r3, #4]
  return 0;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <_isatty>:

int _isatty(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
	...

0800233c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <_sbrk+0x5c>)
 8002346:	4b15      	ldr	r3, [pc, #84]	; (800239c <_sbrk+0x60>)
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d102      	bne.n	800235e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <_sbrk+0x64>)
 800235a:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <_sbrk+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <_sbrk+0x64>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d207      	bcs.n	800237c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800236c:	f002 fb4c 	bl	8004a08 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	220c      	movs	r2, #12
 8002374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	e009      	b.n	8002390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002382:	4b07      	ldr	r3, [pc, #28]	; (80023a0 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <_sbrk+0x64>)
 800238c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20005000 	.word	0x20005000
 800239c:	00000400 	.word	0x00000400
 80023a0:	20000304 	.word	0x20000304
 80023a4:	20000320 	.word	0x20000320

080023a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b4:	480c      	ldr	r0, [pc, #48]	; (80023e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023b6:	490d      	ldr	r1, [pc, #52]	; (80023ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023bc:	e002      	b.n	80023c4 <LoopCopyDataInit>

080023be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c2:	3304      	adds	r3, #4

080023c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023c8:	d3f9      	bcc.n	80023be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d0:	e001      	b.n	80023d6 <LoopFillZerobss>

080023d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d4:	3204      	adds	r2, #4

080023d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023d8:	d3fb      	bcc.n	80023d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023da:	f7ff ffe5 	bl	80023a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023de:	f002 fb19 	bl	8004a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023e2:	f7ff fca1 	bl	8001d28 <main>
  bx lr
 80023e6:	4770      	bx	lr
  ldr r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80023f0:	080078b4 	.word	0x080078b4
  ldr r2, =_sbss
 80023f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80023f8:	2000031c 	.word	0x2000031c

080023fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_2_IRQHandler>
	...

08002400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_Init+0x28>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_Init+0x28>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f947 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f808 	bl	800242c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fe08 	bl	8002030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000

0800242c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_InitTick+0x54>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x58>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	fbb3 f3f1 	udiv	r3, r3, r1
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f95f 	bl	800270e <HAL_SYSTICK_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	d80a      	bhi.n	8002476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002460:	2200      	movs	r2, #0
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f000 f927 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800246c:	4a06      	ldr	r2, [pc, #24]	; (8002488 <HAL_InitTick+0x5c>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000000 	.word	0x20000000
 8002484:	20000008 	.word	0x20000008
 8002488:	20000004 	.word	0x20000004

0800248c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_IncTick+0x1c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_IncTick+0x20>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
 800249c:	4a03      	ldr	r2, [pc, #12]	; (80024ac <HAL_IncTick+0x20>)
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000308 	.word	0x20000308

080024b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <HAL_GetTick+0x10>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000308 	.word	0x20000308

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fff0 	bl	80024b0 <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffe0 	bl	80024b0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <__NVIC_EnableIRQ+0x34>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff90 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff2d 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff42 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff90 	bl	80025fc <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5f 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff35 	bl	8002570 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e169      	b.n	8002a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8158 	bne.w	8002a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a9a      	ldr	r2, [pc, #616]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002764:	4a98      	ldr	r2, [pc, #608]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d875      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800276a:	4a98      	ldr	r2, [pc, #608]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d058      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002770:	4a96      	ldr	r2, [pc, #600]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d86f      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002776:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d052      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 800277c:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d869      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002782:	4a94      	ldr	r2, [pc, #592]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04c      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002788:	4a92      	ldr	r2, [pc, #584]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d863      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800278e:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d046      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002794:	4a90      	ldr	r2, [pc, #576]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d85d      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d82a      	bhi.n	80027f4 <HAL_GPIO_Init+0xcc>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d859      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_GPIO_Init+0x80>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	08002823 	.word	0x08002823
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	0800280f 	.word	0x0800280f
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002857 	.word	0x08002857
 80027bc:	08002857 	.word	0x08002857
 80027c0:	08002857 	.word	0x08002857
 80027c4:	08002857 	.word	0x08002857
 80027c8:	08002857 	.word	0x08002857
 80027cc:	08002857 	.word	0x08002857
 80027d0:	08002857 	.word	0x08002857
 80027d4:	08002857 	.word	0x08002857
 80027d8:	08002857 	.word	0x08002857
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002857 	.word	0x08002857
 80027e4:	08002857 	.word	0x08002857
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002819 	.word	0x08002819
 80027f4:	4a79      	ldr	r2, [pc, #484]	; (80029dc <HAL_GPIO_Init+0x2b4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fa:	e02c      	b.n	8002856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e029      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e024      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	3308      	adds	r3, #8
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e01f      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	330c      	adds	r3, #12
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e01a      	b.n	8002858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282a:	2304      	movs	r3, #4
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e013      	b.n	8002858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	611a      	str	r2, [r3, #16]
          break;
 8002842:	e009      	b.n	8002858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002844:	2308      	movs	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	615a      	str	r2, [r3, #20]
          break;
 800284e:	e003      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x130>
          break;
 8002856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d801      	bhi.n	8002862 <HAL_GPIO_Init+0x13a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_Init+0x13e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d802      	bhi.n	8002874 <HAL_GPIO_Init+0x14c>
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x152>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3b08      	subs	r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	210f      	movs	r1, #15
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80b1 	beq.w	8002a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x1ec>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_GPIO_Init+0x2c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x1e8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3e      	ldr	r2, [pc, #248]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <HAL_GPIO_Init+0x2cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x1e0>
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002908:	2304      	movs	r3, #4
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002914:	2300      	movs	r3, #0
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002926:	492f      	ldr	r1, [pc, #188]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	492c      	ldr	r1, [pc, #176]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	43db      	mvns	r3, r3
 8002956:	4928      	ldr	r1, [pc, #160]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002958:	4013      	ands	r3, r2
 800295a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	43db      	mvns	r3, r3
 800297e:	491e      	ldr	r1, [pc, #120]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002980:	4013      	ands	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4918      	ldr	r1, [pc, #96]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4914      	ldr	r1, [pc, #80]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60cb      	str	r3, [r1, #12]
 80029c4:	e021      	b.n	8002a0a <HAL_GPIO_Init+0x2e2>
 80029c6:	bf00      	nop
 80029c8:	10320000 	.word	0x10320000
 80029cc:	10310000 	.word	0x10310000
 80029d0:	10220000 	.word	0x10220000
 80029d4:	10210000 	.word	0x10210000
 80029d8:	10120000 	.word	0x10120000
 80029dc:	10110000 	.word	0x10110000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_GPIO_Init+0x304>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4909      	ldr	r1, [pc, #36]	; (8002a2c <HAL_GPIO_Init+0x304>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f ae8e 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	372c      	adds	r7, #44	; 0x2c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a40:	787b      	ldrb	r3, [r7, #1]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a46:	887a      	ldrh	r2, [r7, #2]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a4c:	e003      	b.n	8002a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	041a      	lsls	r2, r3, #16
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f806 	bl	8002a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40010400 	.word	0x40010400

08002a90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12b      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fae2 	bl	8002094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b08:	f001 fba0 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a81      	ldr	r2, [pc, #516]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d807      	bhi.n	8002b28 <HAL_I2C_Init+0x84>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a80      	ldr	r2, [pc, #512]	; (8002d1c <HAL_I2C_Init+0x278>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e006      	b.n	8002b36 <HAL_I2C_Init+0x92>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_I2C_Init+0x27c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e7      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a78      	ldr	r2, [pc, #480]	; (8002d24 <HAL_I2C_Init+0x280>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d802      	bhi.n	8002b78 <HAL_I2C_Init+0xd4>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_I2C_Init+0xe8>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_I2C_Init+0x284>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	495c      	ldr	r1, [pc, #368]	; (8002d18 <HAL_I2C_Init+0x274>)
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d819      	bhi.n	8002be0 <HAL_I2C_Init+0x13c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e59      	subs	r1, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_I2C_Init+0x138>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e59      	subs	r1, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	e051      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e04f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_I2C_Init+0x168>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e012      	b.n	8002c32 <HAL_I2C_Init+0x18e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x196>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_I2C_Init+0x1bc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e58      	subs	r0, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6809      	ldr	r1, [r1, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6911      	ldr	r1, [r2, #16]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	000186a0 	.word	0x000186a0
 8002d1c:	001e847f 	.word	0x001e847f
 8002d20:	003d08ff 	.word	0x003d08ff
 8002d24:	431bde83 	.word	0x431bde83
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d46:	f7ff fbb3 	bl	80024b0 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	f040 80d9 	bne.w	8002f0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2319      	movs	r3, #25
 8002d60:	2201      	movs	r2, #1
 8002d62:	496d      	ldr	r1, [pc, #436]	; (8002f18 <HAL_I2C_Mem_Write+0x1ec>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fcc1 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0cc      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Mem_Write+0x56>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0c5      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d007      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	; 0x21
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a4d      	ldr	r2, [pc, #308]	; (8002f1c <HAL_I2C_Mem_Write+0x1f0>)
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dea:	88f8      	ldrh	r0, [r7, #6]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 faf8 	bl	80033f0 <I2C_RequestMemoryWrite>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d052      	beq.n	8002eac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e081      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fd42 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_I2C_Mem_Write+0x180>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1aa      	bne.n	8002e0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fd2e 	bl	800391a <I2C_WaitOnBTFFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e016      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	460b      	mov	r3, r1
 8002f34:	813b      	strh	r3, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3e:	f7ff fab7 	bl	80024b0 <HAL_GetTick>
 8002f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	f040 8244 	bne.w	80033da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2319      	movs	r3, #25
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4982      	ldr	r1, [pc, #520]	; (8003164 <HAL_I2C_Mem_Read+0x244>)
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 fbc5 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e237      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_I2C_Mem_Read+0x5a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e230      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d007      	beq.n	8002fa0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2222      	movs	r2, #34	; 0x22
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2240      	movs	r2, #64	; 0x40
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4a62      	ldr	r2, [pc, #392]	; (8003168 <HAL_I2C_Mem_Read+0x248>)
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe2:	88f8      	ldrh	r0, [r7, #6]
 8002fe4:	893a      	ldrh	r2, [r7, #8]
 8002fe6:	8979      	ldrh	r1, [r7, #10]
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fa92 	bl	800351c <I2C_RequestMemoryRead>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1ec      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d113      	bne.n	8003032 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e1c0      	b.n	80033b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	2b01      	cmp	r3, #1
 8003038:	d11e      	bne.n	8003078 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800304a:	b672      	cpsid	i
}
 800304c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003074:	b662      	cpsie	i
}
 8003076:	e035      	b.n	80030e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307c:	2b02      	cmp	r3, #2
 800307e:	d11e      	bne.n	80030be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003090:	b672      	cpsid	i
}
 8003092:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030ba:	b662      	cpsie	i
}
 80030bc:	e012      	b.n	80030e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ce:	2300      	movs	r3, #0
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030e4:	e166      	b.n	80033b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	f200 811f 	bhi.w	800332e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d123      	bne.n	8003140 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fc4d 	bl	800399c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e167      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800313e:	e139      	b.n	80033b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003144:	2b02      	cmp	r3, #2
 8003146:	d152      	bne.n	80031ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	2200      	movs	r2, #0
 8003150:	4906      	ldr	r1, [pc, #24]	; (800316c <HAL_I2C_Mem_Read+0x24c>)
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 faca 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e13c      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
 8003162:	bf00      	nop
 8003164:	00100002 	.word	0x00100002
 8003168:	ffff0000 	.word	0xffff0000
 800316c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003170:	b672      	cpsid	i
}
 8003172:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031b6:	b662      	cpsie	i
}
 80031b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ec:	e0e2      	b.n	80033b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2200      	movs	r2, #0
 80031f6:	497b      	ldr	r1, [pc, #492]	; (80033e4 <HAL_I2C_Mem_Read+0x4c4>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fa77 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0e9      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003218:	b672      	cpsid	i
}
 800321a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800324e:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_I2C_Mem_Read+0x4c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	08db      	lsrs	r3, r3, #3
 8003254:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_I2C_Mem_Read+0x4cc>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a1a      	lsrs	r2, r3, #8
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00da      	lsls	r2, r3, #3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	3b01      	subs	r3, #1
 800326c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d118      	bne.n	80032a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003296:	b662      	cpsie	i
}
 8003298:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e09a      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d1d9      	bne.n	8003268 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032f6:	b662      	cpsie	i
}
 80032f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800332c:	e042      	b.n	80033b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb32 	bl	800399c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e04c      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d118      	bne.n	80033b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f ae94 	bne.w	80030e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3728      	adds	r7, #40	; 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00010004 	.word	0x00010004
 80033e8:	20000000 	.word	0x20000000
 80033ec:	14f8b589 	.word	0x14f8b589

080033f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	2200      	movs	r2, #0
 8003422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f960 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003440:	d103      	bne.n	800344a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e05f      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800345c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	492d      	ldr	r1, [pc, #180]	; (8003518 <I2C_RequestMemoryWrite+0x128>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f998 	bl	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e04c      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	6a39      	ldr	r1, [r7, #32]
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 fa02 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d107      	bne.n	80034b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e02b      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034bc:	893b      	ldrh	r3, [r7, #8]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e021      	b.n	800350c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	0a1b      	lsrs	r3, r3, #8
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d8:	6a39      	ldr	r1, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f9dc 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d107      	bne.n	80034fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e005      	b.n	800350e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003502:	893b      	ldrh	r3, [r7, #8]
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	00010002 	.word	0x00010002

0800351c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	817b      	strh	r3, [r7, #10]
 800352e:	460b      	mov	r3, r1
 8003530:	813b      	strh	r3, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003544:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2200      	movs	r2, #0
 800355e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f8c2 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357c:	d103      	bne.n	8003586 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0aa      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800358a:	897b      	ldrh	r3, [r7, #10]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	6a3a      	ldr	r2, [r7, #32]
 800359e:	4952      	ldr	r1, [pc, #328]	; (80036e8 <I2C_RequestMemoryRead+0x1cc>)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f8fa 	bl	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e097      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	6a39      	ldr	r1, [r7, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f964 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d107      	bne.n	80035ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e076      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d105      	bne.n	8003604 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035f8:	893b      	ldrh	r3, [r7, #8]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	611a      	str	r2, [r3, #16]
 8003602:	e021      	b.n	8003648 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	b29b      	uxth	r3, r3
 800360a:	b2da      	uxtb	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f93e 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e050      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800363e:	893b      	ldrh	r3, [r7, #8]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800364a:	6a39      	ldr	r1, [r7, #32]
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f923 	bl	8003898 <I2C_WaitOnTXEFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2b04      	cmp	r3, #4
 800365e:	d107      	bne.n	8003670 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e035      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2200      	movs	r2, #0
 800368c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f82b 	bl	80036ec <I2C_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036aa:	d103      	bne.n	80036b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e013      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	6a3a      	ldr	r2, [r7, #32]
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <I2C_RequestMemoryRead+0x1cc>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f863 	bl	800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	00010002 	.word	0x00010002

080036ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	4613      	mov	r3, r2
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fc:	e025      	b.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d021      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fe fed3 	bl	80024b0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0220 	orr.w	r2, r3, #32
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e023      	b.n	8003792 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d10d      	bne.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	43da      	mvns	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4013      	ands	r3, r2
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	e00c      	b.n	800378a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d0b6      	beq.n	80036fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037a8:	e051      	b.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b8:	d123      	bne.n	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e046      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d021      	beq.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fe51 	bl	80024b0 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e020      	b.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10c      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e00b      	b.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	43da      	mvns	r2, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4013      	ands	r3, r2
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d18d      	bne.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a4:	e02d      	b.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8ce 	bl	8003a48 <I2C_IsAcknowledgeFailed>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e02d      	b.n	8003912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d021      	beq.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fe fdf7 	bl	80024b0 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e007      	b.n	8003912 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d1ca      	bne.n	80038a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003926:	e02d      	b.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f88d 	bl	8003a48 <I2C_IsAcknowledgeFailed>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e02d      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d021      	beq.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fe fdb6 	bl	80024b0 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e007      	b.n	8003994 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b04      	cmp	r3, #4
 8003990:	d1ca      	bne.n	8003928 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a8:	e042      	b.n	8003a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d119      	bne.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0210 	mvn.w	r2, #16
 80039c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e029      	b.n	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fe fd60 	bl	80024b0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e007      	b.n	8003a40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d1b5      	bne.n	80039aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d11b      	bne.n	8003a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e272      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8087 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ac4:	4b92      	ldr	r3, [pc, #584]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d00c      	beq.n	8003aea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ad0:	4b8f      	ldr	r3, [pc, #572]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d112      	bne.n	8003b02 <HAL_RCC_OscConfig+0x5e>
 8003adc:	4b8c      	ldr	r3, [pc, #560]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d10b      	bne.n	8003b02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aea:	4b89      	ldr	r3, [pc, #548]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d06c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x12c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d168      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e24c      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x76>
 8003b0c:	4b80      	ldr	r3, [pc, #512]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7f      	ldr	r2, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	e02e      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b7b      	ldr	r3, [pc, #492]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b78      	ldr	r3, [pc, #480]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a77      	ldr	r2, [pc, #476]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d10c      	bne.n	8003b60 <HAL_RCC_OscConfig+0xbc>
 8003b46:	4b72      	ldr	r3, [pc, #456]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a71      	ldr	r2, [pc, #452]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b6f      	ldr	r3, [pc, #444]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6e      	ldr	r2, [pc, #440]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e00b      	b.n	8003b78 <HAL_RCC_OscConfig+0xd4>
 8003b60:	4b6b      	ldr	r3, [pc, #428]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a6a      	ldr	r2, [pc, #424]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	4b68      	ldr	r3, [pc, #416]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fe fc96 	bl	80024b0 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b88:	f7fe fc92 	bl	80024b0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b64      	cmp	r3, #100	; 0x64
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e200      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0xe4>
 8003ba6:	e014      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fc82 	bl	80024b0 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fc7e 	bl	80024b0 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e1ec      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bc2:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x10c>
 8003bce:	e000      	b.n	8003bd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003bea:	4b49      	ldr	r3, [pc, #292]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d11c      	bne.n	8003c30 <HAL_RCC_OscConfig+0x18c>
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x176>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1c0      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4939      	ldr	r1, [pc, #228]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2e:	e03a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d020      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c38:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fc37 	bl	80024b0 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c46:	f7fe fc33 	bl	80024b0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e1a1      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4927      	ldr	r1, [pc, #156]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7a:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fc16 	bl	80024b0 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c88:	f7fe fc12 	bl	80024b0 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e180      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d03a      	beq.n	8003d28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d019      	beq.n	8003cee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cba:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fbf6 	bl	80024b0 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fbf2 	bl	80024b0 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e160      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cda:	4b0d      	ldr	r3, [pc, #52]	; (8003d10 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f000 fad8 	bl	800429c <RCC_Delay>
 8003cec:	e01c      	b.n	8003d28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_OscConfig+0x274>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fe fbdc 	bl	80024b0 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfa:	e00f      	b.n	8003d1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fe fbd8 	bl	80024b0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d908      	bls.n	8003d1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e146      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	42420000 	.word	0x42420000
 8003d18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e9      	bne.n	8003cfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a6 	beq.w	8003e82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b8b      	ldr	r3, [pc, #556]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a87      	ldr	r2, [pc, #540]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b82      	ldr	r3, [pc, #520]	; (8003f6c <HAL_RCC_OscConfig+0x4c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b7f      	ldr	r3, [pc, #508]	; (8003f6c <HAL_RCC_OscConfig+0x4c8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a7e      	ldr	r2, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x4c8>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fb99 	bl	80024b0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fe fb95 	bl	80024b0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b64      	cmp	r3, #100	; 0x64
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e103      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <HAL_RCC_OscConfig+0x4c8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d106      	bne.n	8003db6 <HAL_RCC_OscConfig+0x312>
 8003da8:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6213      	str	r3, [r2, #32]
 8003db4:	e02d      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10c      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x334>
 8003dbe:	4b6a      	ldr	r3, [pc, #424]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4a69      	ldr	r2, [pc, #420]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	6213      	str	r3, [r2, #32]
 8003dca:	4b67      	ldr	r3, [pc, #412]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	4a66      	ldr	r2, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	f023 0304 	bic.w	r3, r3, #4
 8003dd4:	6213      	str	r3, [r2, #32]
 8003dd6:	e01c      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b05      	cmp	r3, #5
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0x356>
 8003de0:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	4a60      	ldr	r2, [pc, #384]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003de6:	f043 0304 	orr.w	r3, r3, #4
 8003dea:	6213      	str	r3, [r2, #32]
 8003dec:	4b5e      	ldr	r3, [pc, #376]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a5d      	ldr	r2, [pc, #372]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0x36e>
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a5a      	ldr	r2, [pc, #360]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	6213      	str	r3, [r2, #32]
 8003e06:	4b58      	ldr	r3, [pc, #352]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	4a57      	ldr	r2, [pc, #348]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f023 0304 	bic.w	r3, r3, #4
 8003e10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d015      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fb49 	bl	80024b0 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e22:	f7fe fb45 	bl	80024b0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0b1      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ee      	beq.n	8003e22 <HAL_RCC_OscConfig+0x37e>
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e46:	f7fe fb33 	bl	80024b0 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe fb2f 	bl	80024b0 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e09b      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e64:	4b40      	ldr	r3, [pc, #256]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1ee      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e76:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8087 	beq.w	8003f9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e8c:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d061      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d146      	bne.n	8003f2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe fb03 	bl	80024b0 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe faff 	bl	80024b0 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e06d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed4:	d108      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	4921      	ldr	r1, [pc, #132]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee8:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a19      	ldr	r1, [r3, #32]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	491b      	ldr	r1, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe fad3 	bl	80024b0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe facf 	bl	80024b0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46a>
 8003f2c:	e035      	b.n	8003f9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCC_OscConfig+0x4cc>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe fabc 	bl	80024b0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fe fab8 	bl	80024b0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e026      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x498>
 8003f5a:	e01e      	b.n	8003f9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e019      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_OscConfig+0x500>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0d0      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4965      	ldr	r1, [pc, #404]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b63      	ldr	r3, [pc, #396]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0b8      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004004:	4b59      	ldr	r3, [pc, #356]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800400a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800400e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800401c:	4b53      	ldr	r3, [pc, #332]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a52      	ldr	r2, [pc, #328]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004026:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004028:	4b50      	ldr	r3, [pc, #320]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	494d      	ldr	r1, [pc, #308]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d040      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d115      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e07f      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d107      	bne.n	8004076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e073      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004076:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06b      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4936      	ldr	r1, [pc, #216]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004098:	f7fe fa0a 	bl	80024b0 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a0:	f7fe fa06 	bl	80024b0 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e053      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 020c 	and.w	r2, r3, #12
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d1eb      	bne.n	80040a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d210      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	4922      	ldr	r1, [pc, #136]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <HAL_RCC_ClockConfig+0x1c0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e032      	b.n	800415e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004104:	4b19      	ldr	r3, [pc, #100]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4916      	ldr	r1, [pc, #88]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004122:	4b12      	ldr	r3, [pc, #72]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	490e      	ldr	r1, [pc, #56]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004136:	f000 f821 	bl	800417c <HAL_RCC_GetSysClockFreq>
 800413a:	4602      	mov	r2, r0
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_ClockConfig+0x1c4>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	091b      	lsrs	r3, r3, #4
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	490a      	ldr	r1, [pc, #40]	; (8004170 <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	5ccb      	ldrb	r3, [r1, r3]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <HAL_RCC_ClockConfig+0x1cc>)
 8004150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_ClockConfig+0x1d0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f968 	bl	800242c <HAL_InitTick>

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40022000 	.word	0x40022000
 800416c:	40021000 	.word	0x40021000
 8004170:	080074b0 	.word	0x080074b0
 8004174:	20000000 	.word	0x20000000
 8004178:	20000004 	.word	0x20000004

0800417c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800417c:	b490      	push	{r4, r7}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCC_GetSysClockFreq+0xac>)
 8004184:	1d3c      	adds	r4, r7, #4
 8004186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800418c:	f240 2301 	movw	r3, #513	; 0x201
 8004190:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	2300      	movs	r3, #0
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d002      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x40>
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d003      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x46>
 80041ba:	e02b      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041bc:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041be:	623b      	str	r3, [r7, #32]
      break;
 80041c0:	e02b      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	0c9b      	lsrs	r3, r3, #18
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	443b      	add	r3, r7
 80041ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80041d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0c5b      	lsrs	r3, r3, #17
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	3328      	adds	r3, #40	; 0x28
 80041ea:	443b      	add	r3, r7
 80041ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f6:	fb03 f202 	mul.w	r2, r3, r2
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	e004      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	623b      	str	r3, [r7, #32]
      break;
 8004212:	e002      	b.n	800421a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004214:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004216:	623b      	str	r3, [r7, #32]
      break;
 8004218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421a:	6a3b      	ldr	r3, [r7, #32]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bc90      	pop	{r4, r7}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	080074a0 	.word	0x080074a0
 800422c:	40021000 	.word	0x40021000
 8004230:	007a1200 	.word	0x007a1200
 8004234:	003d0900 	.word	0x003d0900

08004238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800423c:	4b02      	ldr	r3, [pc, #8]	; (8004248 <HAL_RCC_GetHCLKFreq+0x10>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	20000000 	.word	0x20000000

0800424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004250:	f7ff fff2 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 8004254:	4602      	mov	r2, r0
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	4903      	ldr	r1, [pc, #12]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004262:	5ccb      	ldrb	r3, [r1, r3]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004268:	4618      	mov	r0, r3
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40021000 	.word	0x40021000
 8004270:	080074c0 	.word	0x080074c0

08004274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004278:	f7ff ffde 	bl	8004238 <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	0adb      	lsrs	r3, r3, #11
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	080074c0 	.word	0x080074c0

0800429c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <RCC_Delay+0x34>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <RCC_Delay+0x38>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0a5b      	lsrs	r3, r3, #9
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042b8:	bf00      	nop
  }
  while (Delay --);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1e5a      	subs	r2, r3, #1
 80042be:	60fa      	str	r2, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f9      	bne.n	80042b8 <RCC_Delay+0x1c>
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr
 80042d0:	20000000 	.word	0x20000000
 80042d4:	10624dd3 	.word	0x10624dd3

080042d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e041      	b.n	800436e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fd ff06 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f000 f944 	bl	80045a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e03a      	b.n	8004406 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <HAL_TIM_Base_Start_IT+0x98>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00e      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x58>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d009      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x58>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <HAL_TIM_Base_Start_IT+0x9c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0x58>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a13      	ldr	r2, [pc, #76]	; (8004418 <HAL_TIM_Base_Start_IT+0xa0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d111      	bne.n	80043f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d010      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	e007      	b.n	8004404 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800

0800441c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_TIM_ConfigClockSource+0x18>
 8004430:	2302      	movs	r3, #2
 8004432:	e0b3      	b.n	800459c <HAL_TIM_ConfigClockSource+0x180>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d03e      	beq.n	80044ec <HAL_TIM_ConfigClockSource+0xd0>
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	f200 8087 	bhi.w	8004584 <HAL_TIM_ConfigClockSource+0x168>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	f000 8085 	beq.w	8004588 <HAL_TIM_ConfigClockSource+0x16c>
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d87f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d01a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xa2>
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d87b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d050      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x116>
 8004490:	2b60      	cmp	r3, #96	; 0x60
 8004492:	d877      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d03c      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0xf6>
 8004498:	2b50      	cmp	r3, #80	; 0x50
 800449a:	d873      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d058      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x136>
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d86f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d064      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x156>
 80044a8:	2b30      	cmp	r3, #48	; 0x30
 80044aa:	d86b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d060      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x156>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d867      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x156>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d05a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044bc:	e062      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f000 f942 	bl	8004756 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	609a      	str	r2, [r3, #8]
      break;
 80044ea:	e04e      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f000 f92b 	bl	8004756 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450e:	609a      	str	r2, [r3, #8]
      break;
 8004510:	e03b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	461a      	mov	r2, r3
 8004520:	f000 f8a2 	bl	8004668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2150      	movs	r1, #80	; 0x50
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f8f9 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8004530:	e02b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 f8c0 	bl	80046c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2160      	movs	r1, #96	; 0x60
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f8e9 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8004550:	e01b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f882 	bl	8004668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8d9 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8004570:	e00b      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 f8d0 	bl	8004722 <TIM_ITRx_SetConfig>
        break;
 8004582:	e002      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004584:	bf00      	nop
 8004586:	e000      	b.n	800458a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a29      	ldr	r2, [pc, #164]	; (800465c <TIM_Base_SetConfig+0xb8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00b      	beq.n	80045d4 <TIM_Base_SetConfig+0x30>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c2:	d007      	beq.n	80045d4 <TIM_Base_SetConfig+0x30>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a26      	ldr	r2, [pc, #152]	; (8004660 <TIM_Base_SetConfig+0xbc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_Base_SetConfig+0x30>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0xc0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d108      	bne.n	80045e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1c      	ldr	r2, [pc, #112]	; (800465c <TIM_Base_SetConfig+0xb8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_Base_SetConfig+0x62>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f4:	d007      	beq.n	8004606 <TIM_Base_SetConfig+0x62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a19      	ldr	r2, [pc, #100]	; (8004660 <TIM_Base_SetConfig+0xbc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_Base_SetConfig+0x62>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <TIM_Base_SetConfig+0xc0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d108      	bne.n	8004618 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a07      	ldr	r2, [pc, #28]	; (800465c <TIM_Base_SetConfig+0xb8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d103      	bne.n	800464c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	615a      	str	r2, [r3, #20]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40000400 	.word	0x40000400
 8004664:	40000800 	.word	0x40000800

08004668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 030a 	bic.w	r3, r3, #10
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f023 0210 	bic.w	r2, r3, #16
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	031b      	lsls	r3, r3, #12
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	f043 0307 	orr.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004770:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	021a      	lsls	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	431a      	orrs	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	371c      	adds	r7, #28
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e046      	b.n	800483a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f8:	d009      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d10c      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	4313      	orrs	r3, r2
 800481e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800

08004850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e03f      	b.n	80048e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd fc68 	bl	800214c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	; 0x24
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f829 	bl	80048ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004926:	f023 030c 	bic.w	r3, r3, #12
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	430b      	orrs	r3, r1
 8004932:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <UART_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d103      	bne.n	800495c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7ff fc8e 	bl	8004274 <HAL_RCC_GetPCLK2Freq>
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	e002      	b.n	8004962 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7ff fc76 	bl	800424c <HAL_RCC_GetPCLK1Freq>
 8004960:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009a      	lsls	r2, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <UART_SetConfig+0x118>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	0119      	lsls	r1, r3, #4
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	fbb2 f2f3 	udiv	r2, r2, r3
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <UART_SetConfig+0x118>)
 800499a:	fba3 0302 	umull	r0, r3, r3, r2
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2064      	movs	r0, #100	; 0x64
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	3332      	adds	r3, #50	; 0x32
 80049ac:	4a15      	ldr	r2, [pc, #84]	; (8004a04 <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b8:	4419      	add	r1, r3
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009a      	lsls	r2, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <UART_SetConfig+0x118>)
 80049d2:	fba3 0302 	umull	r0, r3, r3, r2
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2064      	movs	r0, #100	; 0x64
 80049da:	fb00 f303 	mul.w	r3, r0, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	3332      	adds	r3, #50	; 0x32
 80049e4:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <UART_SetConfig+0x118>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	440a      	add	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40013800 	.word	0x40013800
 8004a04:	51eb851f 	.word	0x51eb851f

08004a08 <__errno>:
 8004a08:	4b01      	ldr	r3, [pc, #4]	; (8004a10 <__errno+0x8>)
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	2000000c 	.word	0x2000000c

08004a14 <__libc_init_array>:
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	2600      	movs	r6, #0
 8004a18:	4d0c      	ldr	r5, [pc, #48]	; (8004a4c <__libc_init_array+0x38>)
 8004a1a:	4c0d      	ldr	r4, [pc, #52]	; (8004a50 <__libc_init_array+0x3c>)
 8004a1c:	1b64      	subs	r4, r4, r5
 8004a1e:	10a4      	asrs	r4, r4, #2
 8004a20:	42a6      	cmp	r6, r4
 8004a22:	d109      	bne.n	8004a38 <__libc_init_array+0x24>
 8004a24:	f002 fd30 	bl	8007488 <_init>
 8004a28:	2600      	movs	r6, #0
 8004a2a:	4d0a      	ldr	r5, [pc, #40]	; (8004a54 <__libc_init_array+0x40>)
 8004a2c:	4c0a      	ldr	r4, [pc, #40]	; (8004a58 <__libc_init_array+0x44>)
 8004a2e:	1b64      	subs	r4, r4, r5
 8004a30:	10a4      	asrs	r4, r4, #2
 8004a32:	42a6      	cmp	r6, r4
 8004a34:	d105      	bne.n	8004a42 <__libc_init_array+0x2e>
 8004a36:	bd70      	pop	{r4, r5, r6, pc}
 8004a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3c:	4798      	blx	r3
 8004a3e:	3601      	adds	r6, #1
 8004a40:	e7ee      	b.n	8004a20 <__libc_init_array+0xc>
 8004a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a46:	4798      	blx	r3
 8004a48:	3601      	adds	r6, #1
 8004a4a:	e7f2      	b.n	8004a32 <__libc_init_array+0x1e>
 8004a4c:	080078ac 	.word	0x080078ac
 8004a50:	080078ac 	.word	0x080078ac
 8004a54:	080078ac 	.word	0x080078ac
 8004a58:	080078b0 	.word	0x080078b0

08004a5c <memset>:
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4402      	add	r2, r0
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d100      	bne.n	8004a66 <memset+0xa>
 8004a64:	4770      	bx	lr
 8004a66:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6a:	e7f9      	b.n	8004a60 <memset+0x4>

08004a6c <__cvt>:
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a72:	461f      	mov	r7, r3
 8004a74:	bfbb      	ittet	lt
 8004a76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a7a:	461f      	movlt	r7, r3
 8004a7c:	2300      	movge	r3, #0
 8004a7e:	232d      	movlt	r3, #45	; 0x2d
 8004a80:	b088      	sub	sp, #32
 8004a82:	4614      	mov	r4, r2
 8004a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a88:	7013      	strb	r3, [r2, #0]
 8004a8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a90:	f023 0820 	bic.w	r8, r3, #32
 8004a94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a98:	d005      	beq.n	8004aa6 <__cvt+0x3a>
 8004a9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a9e:	d100      	bne.n	8004aa2 <__cvt+0x36>
 8004aa0:	3501      	adds	r5, #1
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e000      	b.n	8004aa8 <__cvt+0x3c>
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	aa07      	add	r2, sp, #28
 8004aaa:	9204      	str	r2, [sp, #16]
 8004aac:	aa06      	add	r2, sp, #24
 8004aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004ab2:	e9cd 3500 	strd	r3, r5, [sp]
 8004ab6:	4622      	mov	r2, r4
 8004ab8:	463b      	mov	r3, r7
 8004aba:	f000 fcc5 	bl	8005448 <_dtoa_r>
 8004abe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	d102      	bne.n	8004acc <__cvt+0x60>
 8004ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ac8:	07db      	lsls	r3, r3, #31
 8004aca:	d522      	bpl.n	8004b12 <__cvt+0xa6>
 8004acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ad0:	eb06 0905 	add.w	r9, r6, r5
 8004ad4:	d110      	bne.n	8004af8 <__cvt+0x8c>
 8004ad6:	7833      	ldrb	r3, [r6, #0]
 8004ad8:	2b30      	cmp	r3, #48	; 0x30
 8004ada:	d10a      	bne.n	8004af2 <__cvt+0x86>
 8004adc:	2200      	movs	r2, #0
 8004ade:	2300      	movs	r3, #0
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb ff60 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae8:	b918      	cbnz	r0, 8004af2 <__cvt+0x86>
 8004aea:	f1c5 0501 	rsb	r5, r5, #1
 8004aee:	f8ca 5000 	str.w	r5, [sl]
 8004af2:	f8da 3000 	ldr.w	r3, [sl]
 8004af6:	4499      	add	r9, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	4620      	mov	r0, r4
 8004afe:	4639      	mov	r1, r7
 8004b00:	f7fb ff52 	bl	80009a8 <__aeabi_dcmpeq>
 8004b04:	b108      	cbz	r0, 8004b0a <__cvt+0x9e>
 8004b06:	f8cd 901c 	str.w	r9, [sp, #28]
 8004b0a:	2230      	movs	r2, #48	; 0x30
 8004b0c:	9b07      	ldr	r3, [sp, #28]
 8004b0e:	454b      	cmp	r3, r9
 8004b10:	d307      	bcc.n	8004b22 <__cvt+0xb6>
 8004b12:	4630      	mov	r0, r6
 8004b14:	9b07      	ldr	r3, [sp, #28]
 8004b16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004b18:	1b9b      	subs	r3, r3, r6
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	b008      	add	sp, #32
 8004b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	9107      	str	r1, [sp, #28]
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e7f0      	b.n	8004b0c <__cvt+0xa0>

08004b2a <__exponent>:
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	f803 2b02 	strb.w	r2, [r3], #2
 8004b34:	bfb6      	itet	lt
 8004b36:	222d      	movlt	r2, #45	; 0x2d
 8004b38:	222b      	movge	r2, #43	; 0x2b
 8004b3a:	4249      	neglt	r1, r1
 8004b3c:	2909      	cmp	r1, #9
 8004b3e:	7042      	strb	r2, [r0, #1]
 8004b40:	dd2b      	ble.n	8004b9a <__exponent+0x70>
 8004b42:	f10d 0407 	add.w	r4, sp, #7
 8004b46:	46a4      	mov	ip, r4
 8004b48:	270a      	movs	r7, #10
 8004b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b4e:	460a      	mov	r2, r1
 8004b50:	46a6      	mov	lr, r4
 8004b52:	fb07 1516 	mls	r5, r7, r6, r1
 8004b56:	2a63      	cmp	r2, #99	; 0x63
 8004b58:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b66:	dcf0      	bgt.n	8004b4a <__exponent+0x20>
 8004b68:	3130      	adds	r1, #48	; 0x30
 8004b6a:	f1ae 0502 	sub.w	r5, lr, #2
 8004b6e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b72:	4629      	mov	r1, r5
 8004b74:	1c44      	adds	r4, r0, #1
 8004b76:	4561      	cmp	r1, ip
 8004b78:	d30a      	bcc.n	8004b90 <__exponent+0x66>
 8004b7a:	f10d 0209 	add.w	r2, sp, #9
 8004b7e:	eba2 020e 	sub.w	r2, r2, lr
 8004b82:	4565      	cmp	r5, ip
 8004b84:	bf88      	it	hi
 8004b86:	2200      	movhi	r2, #0
 8004b88:	4413      	add	r3, r2
 8004b8a:	1a18      	subs	r0, r3, r0
 8004b8c:	b003      	add	sp, #12
 8004b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b94:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b98:	e7ed      	b.n	8004b76 <__exponent+0x4c>
 8004b9a:	2330      	movs	r3, #48	; 0x30
 8004b9c:	3130      	adds	r1, #48	; 0x30
 8004b9e:	7083      	strb	r3, [r0, #2]
 8004ba0:	70c1      	strb	r1, [r0, #3]
 8004ba2:	1d03      	adds	r3, r0, #4
 8004ba4:	e7f1      	b.n	8004b8a <__exponent+0x60>
	...

08004ba8 <_printf_float>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	b091      	sub	sp, #68	; 0x44
 8004bae:	460c      	mov	r4, r1
 8004bb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004bb4:	4616      	mov	r6, r2
 8004bb6:	461f      	mov	r7, r3
 8004bb8:	4605      	mov	r5, r0
 8004bba:	f001 fa33 	bl	8006024 <_localeconv_r>
 8004bbe:	6803      	ldr	r3, [r0, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc4:	f7fb fac4 	bl	8000150 <strlen>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	930e      	str	r3, [sp, #56]	; 0x38
 8004bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd0:	900a      	str	r0, [sp, #40]	; 0x28
 8004bd2:	3307      	adds	r3, #7
 8004bd4:	f023 0307 	bic.w	r3, r3, #7
 8004bd8:	f103 0208 	add.w	r2, r3, #8
 8004bdc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004be0:	f8d4 b000 	ldr.w	fp, [r4]
 8004be4:	f8c8 2000 	str.w	r2, [r8]
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bf0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bf4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	4640      	mov	r0, r8
 8004c00:	4b9c      	ldr	r3, [pc, #624]	; (8004e74 <_printf_float+0x2cc>)
 8004c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c04:	f7fb ff02 	bl	8000a0c <__aeabi_dcmpun>
 8004c08:	bb70      	cbnz	r0, 8004c68 <_printf_float+0xc0>
 8004c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0e:	4640      	mov	r0, r8
 8004c10:	4b98      	ldr	r3, [pc, #608]	; (8004e74 <_printf_float+0x2cc>)
 8004c12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c14:	f7fb fedc 	bl	80009d0 <__aeabi_dcmple>
 8004c18:	bb30      	cbnz	r0, 8004c68 <_printf_float+0xc0>
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	4640      	mov	r0, r8
 8004c20:	4651      	mov	r1, sl
 8004c22:	f7fb fecb 	bl	80009bc <__aeabi_dcmplt>
 8004c26:	b110      	cbz	r0, 8004c2e <_printf_float+0x86>
 8004c28:	232d      	movs	r3, #45	; 0x2d
 8004c2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c2e:	4b92      	ldr	r3, [pc, #584]	; (8004e78 <_printf_float+0x2d0>)
 8004c30:	4892      	ldr	r0, [pc, #584]	; (8004e7c <_printf_float+0x2d4>)
 8004c32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c36:	bf94      	ite	ls
 8004c38:	4698      	movls	r8, r3
 8004c3a:	4680      	movhi	r8, r0
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	f04f 0a00 	mov.w	sl, #0
 8004c42:	6123      	str	r3, [r4, #16]
 8004c44:	f02b 0304 	bic.w	r3, fp, #4
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	4633      	mov	r3, r6
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4628      	mov	r0, r5
 8004c50:	9700      	str	r7, [sp, #0]
 8004c52:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c54:	f000 f9d4 	bl	8005000 <_printf_common>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f040 8090 	bne.w	8004d7e <_printf_float+0x1d6>
 8004c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c62:	b011      	add	sp, #68	; 0x44
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c68:	4642      	mov	r2, r8
 8004c6a:	4653      	mov	r3, sl
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	4651      	mov	r1, sl
 8004c70:	f7fb fecc 	bl	8000a0c <__aeabi_dcmpun>
 8004c74:	b148      	cbz	r0, 8004c8a <_printf_float+0xe2>
 8004c76:	f1ba 0f00 	cmp.w	sl, #0
 8004c7a:	bfb8      	it	lt
 8004c7c:	232d      	movlt	r3, #45	; 0x2d
 8004c7e:	4880      	ldr	r0, [pc, #512]	; (8004e80 <_printf_float+0x2d8>)
 8004c80:	bfb8      	it	lt
 8004c82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c86:	4b7f      	ldr	r3, [pc, #508]	; (8004e84 <_printf_float+0x2dc>)
 8004c88:	e7d3      	b.n	8004c32 <_printf_float+0x8a>
 8004c8a:	6863      	ldr	r3, [r4, #4]
 8004c8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	d142      	bne.n	8004d1a <_printf_float+0x172>
 8004c94:	2306      	movs	r3, #6
 8004c96:	6063      	str	r3, [r4, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	9206      	str	r2, [sp, #24]
 8004c9c:	aa0e      	add	r2, sp, #56	; 0x38
 8004c9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004ca2:	aa0d      	add	r2, sp, #52	; 0x34
 8004ca4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ca8:	9203      	str	r2, [sp, #12]
 8004caa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004cae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	6863      	ldr	r3, [r4, #4]
 8004cb6:	4642      	mov	r2, r8
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4628      	mov	r0, r5
 8004cbc:	4653      	mov	r3, sl
 8004cbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004cc0:	f7ff fed4 	bl	8004a6c <__cvt>
 8004cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	2947      	cmp	r1, #71	; 0x47
 8004cca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ccc:	d108      	bne.n	8004ce0 <_printf_float+0x138>
 8004cce:	1cc8      	adds	r0, r1, #3
 8004cd0:	db02      	blt.n	8004cd8 <_printf_float+0x130>
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	dd40      	ble.n	8004d5a <_printf_float+0x1b2>
 8004cd8:	f1a9 0902 	sub.w	r9, r9, #2
 8004cdc:	fa5f f989 	uxtb.w	r9, r9
 8004ce0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ce4:	d81f      	bhi.n	8004d26 <_printf_float+0x17e>
 8004ce6:	464a      	mov	r2, r9
 8004ce8:	3901      	subs	r1, #1
 8004cea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cee:	910d      	str	r1, [sp, #52]	; 0x34
 8004cf0:	f7ff ff1b 	bl	8004b2a <__exponent>
 8004cf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cf6:	4682      	mov	sl, r0
 8004cf8:	1813      	adds	r3, r2, r0
 8004cfa:	2a01      	cmp	r2, #1
 8004cfc:	6123      	str	r3, [r4, #16]
 8004cfe:	dc02      	bgt.n	8004d06 <_printf_float+0x15e>
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	07d2      	lsls	r2, r2, #31
 8004d04:	d501      	bpl.n	8004d0a <_printf_float+0x162>
 8004d06:	3301      	adds	r3, #1
 8004d08:	6123      	str	r3, [r4, #16]
 8004d0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d09b      	beq.n	8004c4a <_printf_float+0xa2>
 8004d12:	232d      	movs	r3, #45	; 0x2d
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	e797      	b.n	8004c4a <_printf_float+0xa2>
 8004d1a:	2947      	cmp	r1, #71	; 0x47
 8004d1c:	d1bc      	bne.n	8004c98 <_printf_float+0xf0>
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1ba      	bne.n	8004c98 <_printf_float+0xf0>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e7b7      	b.n	8004c96 <_printf_float+0xee>
 8004d26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d2a:	d118      	bne.n	8004d5e <_printf_float+0x1b6>
 8004d2c:	2900      	cmp	r1, #0
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	dd0b      	ble.n	8004d4a <_printf_float+0x1a2>
 8004d32:	6121      	str	r1, [r4, #16]
 8004d34:	b913      	cbnz	r3, 8004d3c <_printf_float+0x194>
 8004d36:	6822      	ldr	r2, [r4, #0]
 8004d38:	07d0      	lsls	r0, r2, #31
 8004d3a:	d502      	bpl.n	8004d42 <_printf_float+0x19a>
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	440b      	add	r3, r1
 8004d40:	6123      	str	r3, [r4, #16]
 8004d42:	f04f 0a00 	mov.w	sl, #0
 8004d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d48:	e7df      	b.n	8004d0a <_printf_float+0x162>
 8004d4a:	b913      	cbnz	r3, 8004d52 <_printf_float+0x1aa>
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	07d2      	lsls	r2, r2, #31
 8004d50:	d501      	bpl.n	8004d56 <_printf_float+0x1ae>
 8004d52:	3302      	adds	r3, #2
 8004d54:	e7f4      	b.n	8004d40 <_printf_float+0x198>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e7f2      	b.n	8004d40 <_printf_float+0x198>
 8004d5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d60:	4299      	cmp	r1, r3
 8004d62:	db05      	blt.n	8004d70 <_printf_float+0x1c8>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	6121      	str	r1, [r4, #16]
 8004d68:	07d8      	lsls	r0, r3, #31
 8004d6a:	d5ea      	bpl.n	8004d42 <_printf_float+0x19a>
 8004d6c:	1c4b      	adds	r3, r1, #1
 8004d6e:	e7e7      	b.n	8004d40 <_printf_float+0x198>
 8004d70:	2900      	cmp	r1, #0
 8004d72:	bfcc      	ite	gt
 8004d74:	2201      	movgt	r2, #1
 8004d76:	f1c1 0202 	rsble	r2, r1, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	e7e0      	b.n	8004d40 <_printf_float+0x198>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	055a      	lsls	r2, r3, #21
 8004d82:	d407      	bmi.n	8004d94 <_printf_float+0x1ec>
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	4642      	mov	r2, r8
 8004d88:	4631      	mov	r1, r6
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	d12b      	bne.n	8004dea <_printf_float+0x242>
 8004d92:	e764      	b.n	8004c5e <_printf_float+0xb6>
 8004d94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d98:	f240 80dd 	bls.w	8004f56 <_printf_float+0x3ae>
 8004d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da0:	2200      	movs	r2, #0
 8004da2:	2300      	movs	r3, #0
 8004da4:	f7fb fe00 	bl	80009a8 <__aeabi_dcmpeq>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d033      	beq.n	8004e14 <_printf_float+0x26c>
 8004dac:	2301      	movs	r3, #1
 8004dae:	4631      	mov	r1, r6
 8004db0:	4628      	mov	r0, r5
 8004db2:	4a35      	ldr	r2, [pc, #212]	; (8004e88 <_printf_float+0x2e0>)
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f af51 	beq.w	8004c5e <_printf_float+0xb6>
 8004dbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	db02      	blt.n	8004dca <_printf_float+0x222>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	07d8      	lsls	r0, r3, #31
 8004dc8:	d50f      	bpl.n	8004dea <_printf_float+0x242>
 8004dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	47b8      	blx	r7
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	f43f af42 	beq.w	8004c5e <_printf_float+0xb6>
 8004dda:	f04f 0800 	mov.w	r8, #0
 8004dde:	f104 091a 	add.w	r9, r4, #26
 8004de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004de4:	3b01      	subs	r3, #1
 8004de6:	4543      	cmp	r3, r8
 8004de8:	dc09      	bgt.n	8004dfe <_printf_float+0x256>
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	079b      	lsls	r3, r3, #30
 8004dee:	f100 8102 	bmi.w	8004ff6 <_printf_float+0x44e>
 8004df2:	68e0      	ldr	r0, [r4, #12]
 8004df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004df6:	4298      	cmp	r0, r3
 8004df8:	bfb8      	it	lt
 8004dfa:	4618      	movlt	r0, r3
 8004dfc:	e731      	b.n	8004c62 <_printf_float+0xba>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	464a      	mov	r2, r9
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f af28 	beq.w	8004c5e <_printf_float+0xb6>
 8004e0e:	f108 0801 	add.w	r8, r8, #1
 8004e12:	e7e6      	b.n	8004de2 <_printf_float+0x23a>
 8004e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	dc38      	bgt.n	8004e8c <_printf_float+0x2e4>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	4a19      	ldr	r2, [pc, #100]	; (8004e88 <_printf_float+0x2e0>)
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f af1a 	beq.w	8004c5e <_printf_float+0xb6>
 8004e2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	d102      	bne.n	8004e38 <_printf_float+0x290>
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	07d9      	lsls	r1, r3, #31
 8004e36:	d5d8      	bpl.n	8004dea <_printf_float+0x242>
 8004e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4628      	mov	r0, r5
 8004e40:	47b8      	blx	r7
 8004e42:	3001      	adds	r0, #1
 8004e44:	f43f af0b 	beq.w	8004c5e <_printf_float+0xb6>
 8004e48:	f04f 0900 	mov.w	r9, #0
 8004e4c:	f104 0a1a 	add.w	sl, r4, #26
 8004e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e52:	425b      	negs	r3, r3
 8004e54:	454b      	cmp	r3, r9
 8004e56:	dc01      	bgt.n	8004e5c <_printf_float+0x2b4>
 8004e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e5a:	e794      	b.n	8004d86 <_printf_float+0x1de>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	4652      	mov	r2, sl
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	f43f aef9 	beq.w	8004c5e <_printf_float+0xb6>
 8004e6c:	f109 0901 	add.w	r9, r9, #1
 8004e70:	e7ee      	b.n	8004e50 <_printf_float+0x2a8>
 8004e72:	bf00      	nop
 8004e74:	7fefffff 	.word	0x7fefffff
 8004e78:	080074cc 	.word	0x080074cc
 8004e7c:	080074d0 	.word	0x080074d0
 8004e80:	080074d8 	.word	0x080074d8
 8004e84:	080074d4 	.word	0x080074d4
 8004e88:	080074dc 	.word	0x080074dc
 8004e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e90:	429a      	cmp	r2, r3
 8004e92:	bfa8      	it	ge
 8004e94:	461a      	movge	r2, r3
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	4691      	mov	r9, r2
 8004e9a:	dc37      	bgt.n	8004f0c <_printf_float+0x364>
 8004e9c:	f04f 0b00 	mov.w	fp, #0
 8004ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ea4:	f104 021a 	add.w	r2, r4, #26
 8004ea8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004eac:	ebaa 0309 	sub.w	r3, sl, r9
 8004eb0:	455b      	cmp	r3, fp
 8004eb2:	dc33      	bgt.n	8004f1c <_printf_float+0x374>
 8004eb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	db3b      	blt.n	8004f34 <_printf_float+0x38c>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	07da      	lsls	r2, r3, #31
 8004ec0:	d438      	bmi.n	8004f34 <_printf_float+0x38c>
 8004ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec6:	eba3 020a 	sub.w	r2, r3, sl
 8004eca:	eba3 0901 	sub.w	r9, r3, r1
 8004ece:	4591      	cmp	r9, r2
 8004ed0:	bfa8      	it	ge
 8004ed2:	4691      	movge	r9, r2
 8004ed4:	f1b9 0f00 	cmp.w	r9, #0
 8004ed8:	dc34      	bgt.n	8004f44 <_printf_float+0x39c>
 8004eda:	f04f 0800 	mov.w	r8, #0
 8004ede:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ee2:	f104 0a1a 	add.w	sl, r4, #26
 8004ee6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	eba3 0309 	sub.w	r3, r3, r9
 8004ef0:	4543      	cmp	r3, r8
 8004ef2:	f77f af7a 	ble.w	8004dea <_printf_float+0x242>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4652      	mov	r2, sl
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	f43f aeac 	beq.w	8004c5e <_printf_float+0xb6>
 8004f06:	f108 0801 	add.w	r8, r8, #1
 8004f0a:	e7ec      	b.n	8004ee6 <_printf_float+0x33e>
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4642      	mov	r2, r8
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1c0      	bne.n	8004e9c <_printf_float+0x2f4>
 8004f1a:	e6a0      	b.n	8004c5e <_printf_float+0xb6>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f24:	47b8      	blx	r7
 8004f26:	3001      	adds	r0, #1
 8004f28:	f43f ae99 	beq.w	8004c5e <_printf_float+0xb6>
 8004f2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f2e:	f10b 0b01 	add.w	fp, fp, #1
 8004f32:	e7b9      	b.n	8004ea8 <_printf_float+0x300>
 8004f34:	4631      	mov	r1, r6
 8004f36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d1bf      	bne.n	8004ec2 <_printf_float+0x31a>
 8004f42:	e68c      	b.n	8004c5e <_printf_float+0xb6>
 8004f44:	464b      	mov	r3, r9
 8004f46:	4631      	mov	r1, r6
 8004f48:	4628      	mov	r0, r5
 8004f4a:	eb08 020a 	add.w	r2, r8, sl
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	d1c2      	bne.n	8004eda <_printf_float+0x332>
 8004f54:	e683      	b.n	8004c5e <_printf_float+0xb6>
 8004f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f58:	2a01      	cmp	r2, #1
 8004f5a:	dc01      	bgt.n	8004f60 <_printf_float+0x3b8>
 8004f5c:	07db      	lsls	r3, r3, #31
 8004f5e:	d537      	bpl.n	8004fd0 <_printf_float+0x428>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4642      	mov	r2, r8
 8004f64:	4631      	mov	r1, r6
 8004f66:	4628      	mov	r0, r5
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f43f ae77 	beq.w	8004c5e <_printf_float+0xb6>
 8004f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f ae6f 	beq.w	8004c5e <_printf_float+0xb6>
 8004f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f84:	2200      	movs	r2, #0
 8004f86:	2300      	movs	r3, #0
 8004f88:	f7fb fd0e 	bl	80009a8 <__aeabi_dcmpeq>
 8004f8c:	b9d8      	cbnz	r0, 8004fc6 <_printf_float+0x41e>
 8004f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f90:	f108 0201 	add.w	r2, r8, #1
 8004f94:	3b01      	subs	r3, #1
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d10e      	bne.n	8004fbe <_printf_float+0x416>
 8004fa0:	e65d      	b.n	8004c5e <_printf_float+0xb6>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	464a      	mov	r2, r9
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	f43f ae56 	beq.w	8004c5e <_printf_float+0xb6>
 8004fb2:	f108 0801 	add.w	r8, r8, #1
 8004fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	4543      	cmp	r3, r8
 8004fbc:	dcf1      	bgt.n	8004fa2 <_printf_float+0x3fa>
 8004fbe:	4653      	mov	r3, sl
 8004fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fc4:	e6e0      	b.n	8004d88 <_printf_float+0x1e0>
 8004fc6:	f04f 0800 	mov.w	r8, #0
 8004fca:	f104 091a 	add.w	r9, r4, #26
 8004fce:	e7f2      	b.n	8004fb6 <_printf_float+0x40e>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	e7df      	b.n	8004f96 <_printf_float+0x3ee>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	464a      	mov	r2, r9
 8004fda:	4631      	mov	r1, r6
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b8      	blx	r7
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	f43f ae3c 	beq.w	8004c5e <_printf_float+0xb6>
 8004fe6:	f108 0801 	add.w	r8, r8, #1
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	4543      	cmp	r3, r8
 8004ff2:	dcf0      	bgt.n	8004fd6 <_printf_float+0x42e>
 8004ff4:	e6fd      	b.n	8004df2 <_printf_float+0x24a>
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	f104 0919 	add.w	r9, r4, #25
 8004ffe:	e7f4      	b.n	8004fea <_printf_float+0x442>

08005000 <_printf_common>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	4616      	mov	r6, r2
 8005006:	4699      	mov	r9, r3
 8005008:	688a      	ldr	r2, [r1, #8]
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4607      	mov	r7, r0
 800500e:	4293      	cmp	r3, r2
 8005010:	bfb8      	it	lt
 8005012:	4613      	movlt	r3, r2
 8005014:	6033      	str	r3, [r6, #0]
 8005016:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800501a:	460c      	mov	r4, r1
 800501c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005020:	b10a      	cbz	r2, 8005026 <_printf_common+0x26>
 8005022:	3301      	adds	r3, #1
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	0699      	lsls	r1, r3, #26
 800502a:	bf42      	ittt	mi
 800502c:	6833      	ldrmi	r3, [r6, #0]
 800502e:	3302      	addmi	r3, #2
 8005030:	6033      	strmi	r3, [r6, #0]
 8005032:	6825      	ldr	r5, [r4, #0]
 8005034:	f015 0506 	ands.w	r5, r5, #6
 8005038:	d106      	bne.n	8005048 <_printf_common+0x48>
 800503a:	f104 0a19 	add.w	sl, r4, #25
 800503e:	68e3      	ldr	r3, [r4, #12]
 8005040:	6832      	ldr	r2, [r6, #0]
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	42ab      	cmp	r3, r5
 8005046:	dc28      	bgt.n	800509a <_printf_common+0x9a>
 8005048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800504c:	1e13      	subs	r3, r2, #0
 800504e:	6822      	ldr	r2, [r4, #0]
 8005050:	bf18      	it	ne
 8005052:	2301      	movne	r3, #1
 8005054:	0692      	lsls	r2, r2, #26
 8005056:	d42d      	bmi.n	80050b4 <_printf_common+0xb4>
 8005058:	4649      	mov	r1, r9
 800505a:	4638      	mov	r0, r7
 800505c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d020      	beq.n	80050a8 <_printf_common+0xa8>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	68e5      	ldr	r5, [r4, #12]
 800506a:	f003 0306 	and.w	r3, r3, #6
 800506e:	2b04      	cmp	r3, #4
 8005070:	bf18      	it	ne
 8005072:	2500      	movne	r5, #0
 8005074:	6832      	ldr	r2, [r6, #0]
 8005076:	f04f 0600 	mov.w	r6, #0
 800507a:	68a3      	ldr	r3, [r4, #8]
 800507c:	bf08      	it	eq
 800507e:	1aad      	subeq	r5, r5, r2
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf08      	it	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	4293      	cmp	r3, r2
 800508a:	bfc4      	itt	gt
 800508c:	1a9b      	subgt	r3, r3, r2
 800508e:	18ed      	addgt	r5, r5, r3
 8005090:	341a      	adds	r4, #26
 8005092:	42b5      	cmp	r5, r6
 8005094:	d11a      	bne.n	80050cc <_printf_common+0xcc>
 8005096:	2000      	movs	r0, #0
 8005098:	e008      	b.n	80050ac <_printf_common+0xac>
 800509a:	2301      	movs	r3, #1
 800509c:	4652      	mov	r2, sl
 800509e:	4649      	mov	r1, r9
 80050a0:	4638      	mov	r0, r7
 80050a2:	47c0      	blx	r8
 80050a4:	3001      	adds	r0, #1
 80050a6:	d103      	bne.n	80050b0 <_printf_common+0xb0>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b0:	3501      	adds	r5, #1
 80050b2:	e7c4      	b.n	800503e <_printf_common+0x3e>
 80050b4:	2030      	movs	r0, #48	; 0x30
 80050b6:	18e1      	adds	r1, r4, r3
 80050b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c2:	4422      	add	r2, r4
 80050c4:	3302      	adds	r3, #2
 80050c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050ca:	e7c5      	b.n	8005058 <_printf_common+0x58>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4622      	mov	r2, r4
 80050d0:	4649      	mov	r1, r9
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c0      	blx	r8
 80050d6:	3001      	adds	r0, #1
 80050d8:	d0e6      	beq.n	80050a8 <_printf_common+0xa8>
 80050da:	3601      	adds	r6, #1
 80050dc:	e7d9      	b.n	8005092 <_printf_common+0x92>
	...

080050e0 <_printf_i>:
 80050e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e4:	7e0f      	ldrb	r7, [r1, #24]
 80050e6:	4691      	mov	r9, r2
 80050e8:	2f78      	cmp	r7, #120	; 0x78
 80050ea:	4680      	mov	r8, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	469a      	mov	sl, r3
 80050f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050f6:	d807      	bhi.n	8005108 <_printf_i+0x28>
 80050f8:	2f62      	cmp	r7, #98	; 0x62
 80050fa:	d80a      	bhi.n	8005112 <_printf_i+0x32>
 80050fc:	2f00      	cmp	r7, #0
 80050fe:	f000 80d9 	beq.w	80052b4 <_printf_i+0x1d4>
 8005102:	2f58      	cmp	r7, #88	; 0x58
 8005104:	f000 80a4 	beq.w	8005250 <_printf_i+0x170>
 8005108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800510c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005110:	e03a      	b.n	8005188 <_printf_i+0xa8>
 8005112:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005116:	2b15      	cmp	r3, #21
 8005118:	d8f6      	bhi.n	8005108 <_printf_i+0x28>
 800511a:	a101      	add	r1, pc, #4	; (adr r1, 8005120 <_printf_i+0x40>)
 800511c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005120:	08005179 	.word	0x08005179
 8005124:	0800518d 	.word	0x0800518d
 8005128:	08005109 	.word	0x08005109
 800512c:	08005109 	.word	0x08005109
 8005130:	08005109 	.word	0x08005109
 8005134:	08005109 	.word	0x08005109
 8005138:	0800518d 	.word	0x0800518d
 800513c:	08005109 	.word	0x08005109
 8005140:	08005109 	.word	0x08005109
 8005144:	08005109 	.word	0x08005109
 8005148:	08005109 	.word	0x08005109
 800514c:	0800529b 	.word	0x0800529b
 8005150:	080051bd 	.word	0x080051bd
 8005154:	0800527d 	.word	0x0800527d
 8005158:	08005109 	.word	0x08005109
 800515c:	08005109 	.word	0x08005109
 8005160:	080052bd 	.word	0x080052bd
 8005164:	08005109 	.word	0x08005109
 8005168:	080051bd 	.word	0x080051bd
 800516c:	08005109 	.word	0x08005109
 8005170:	08005109 	.word	0x08005109
 8005174:	08005285 	.word	0x08005285
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	1d1a      	adds	r2, r3, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	602a      	str	r2, [r5, #0]
 8005180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005188:	2301      	movs	r3, #1
 800518a:	e0a4      	b.n	80052d6 <_printf_i+0x1f6>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	6829      	ldr	r1, [r5, #0]
 8005190:	0606      	lsls	r6, r0, #24
 8005192:	f101 0304 	add.w	r3, r1, #4
 8005196:	d50a      	bpl.n	80051ae <_printf_i+0xce>
 8005198:	680e      	ldr	r6, [r1, #0]
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	2e00      	cmp	r6, #0
 800519e:	da03      	bge.n	80051a8 <_printf_i+0xc8>
 80051a0:	232d      	movs	r3, #45	; 0x2d
 80051a2:	4276      	negs	r6, r6
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a8:	230a      	movs	r3, #10
 80051aa:	485e      	ldr	r0, [pc, #376]	; (8005324 <_printf_i+0x244>)
 80051ac:	e019      	b.n	80051e2 <_printf_i+0x102>
 80051ae:	680e      	ldr	r6, [r1, #0]
 80051b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	bf18      	it	ne
 80051b8:	b236      	sxthne	r6, r6
 80051ba:	e7ef      	b.n	800519c <_printf_i+0xbc>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	6820      	ldr	r0, [r4, #0]
 80051c0:	1d19      	adds	r1, r3, #4
 80051c2:	6029      	str	r1, [r5, #0]
 80051c4:	0601      	lsls	r1, r0, #24
 80051c6:	d501      	bpl.n	80051cc <_printf_i+0xec>
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	e002      	b.n	80051d2 <_printf_i+0xf2>
 80051cc:	0646      	lsls	r6, r0, #25
 80051ce:	d5fb      	bpl.n	80051c8 <_printf_i+0xe8>
 80051d0:	881e      	ldrh	r6, [r3, #0]
 80051d2:	2f6f      	cmp	r7, #111	; 0x6f
 80051d4:	bf0c      	ite	eq
 80051d6:	2308      	moveq	r3, #8
 80051d8:	230a      	movne	r3, #10
 80051da:	4852      	ldr	r0, [pc, #328]	; (8005324 <_printf_i+0x244>)
 80051dc:	2100      	movs	r1, #0
 80051de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e2:	6865      	ldr	r5, [r4, #4]
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	bfa8      	it	ge
 80051e8:	6821      	ldrge	r1, [r4, #0]
 80051ea:	60a5      	str	r5, [r4, #8]
 80051ec:	bfa4      	itt	ge
 80051ee:	f021 0104 	bicge.w	r1, r1, #4
 80051f2:	6021      	strge	r1, [r4, #0]
 80051f4:	b90e      	cbnz	r6, 80051fa <_printf_i+0x11a>
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d04d      	beq.n	8005296 <_printf_i+0x1b6>
 80051fa:	4615      	mov	r5, r2
 80051fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8005200:	fb03 6711 	mls	r7, r3, r1, r6
 8005204:	5dc7      	ldrb	r7, [r0, r7]
 8005206:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800520a:	4637      	mov	r7, r6
 800520c:	42bb      	cmp	r3, r7
 800520e:	460e      	mov	r6, r1
 8005210:	d9f4      	bls.n	80051fc <_printf_i+0x11c>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d10b      	bne.n	800522e <_printf_i+0x14e>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	07de      	lsls	r6, r3, #31
 800521a:	d508      	bpl.n	800522e <_printf_i+0x14e>
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	6861      	ldr	r1, [r4, #4]
 8005220:	4299      	cmp	r1, r3
 8005222:	bfde      	ittt	le
 8005224:	2330      	movle	r3, #48	; 0x30
 8005226:	f805 3c01 	strble.w	r3, [r5, #-1]
 800522a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800522e:	1b52      	subs	r2, r2, r5
 8005230:	6122      	str	r2, [r4, #16]
 8005232:	464b      	mov	r3, r9
 8005234:	4621      	mov	r1, r4
 8005236:	4640      	mov	r0, r8
 8005238:	f8cd a000 	str.w	sl, [sp]
 800523c:	aa03      	add	r2, sp, #12
 800523e:	f7ff fedf 	bl	8005000 <_printf_common>
 8005242:	3001      	adds	r0, #1
 8005244:	d14c      	bne.n	80052e0 <_printf_i+0x200>
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	b004      	add	sp, #16
 800524c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005250:	4834      	ldr	r0, [pc, #208]	; (8005324 <_printf_i+0x244>)
 8005252:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005256:	6829      	ldr	r1, [r5, #0]
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	f851 6b04 	ldr.w	r6, [r1], #4
 800525e:	6029      	str	r1, [r5, #0]
 8005260:	061d      	lsls	r5, r3, #24
 8005262:	d514      	bpl.n	800528e <_printf_i+0x1ae>
 8005264:	07df      	lsls	r7, r3, #31
 8005266:	bf44      	itt	mi
 8005268:	f043 0320 	orrmi.w	r3, r3, #32
 800526c:	6023      	strmi	r3, [r4, #0]
 800526e:	b91e      	cbnz	r6, 8005278 <_printf_i+0x198>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	f023 0320 	bic.w	r3, r3, #32
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	2310      	movs	r3, #16
 800527a:	e7af      	b.n	80051dc <_printf_i+0xfc>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	2378      	movs	r3, #120	; 0x78
 8005286:	4828      	ldr	r0, [pc, #160]	; (8005328 <_printf_i+0x248>)
 8005288:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528c:	e7e3      	b.n	8005256 <_printf_i+0x176>
 800528e:	0659      	lsls	r1, r3, #25
 8005290:	bf48      	it	mi
 8005292:	b2b6      	uxthmi	r6, r6
 8005294:	e7e6      	b.n	8005264 <_printf_i+0x184>
 8005296:	4615      	mov	r5, r2
 8005298:	e7bb      	b.n	8005212 <_printf_i+0x132>
 800529a:	682b      	ldr	r3, [r5, #0]
 800529c:	6826      	ldr	r6, [r4, #0]
 800529e:	1d18      	adds	r0, r3, #4
 80052a0:	6961      	ldr	r1, [r4, #20]
 80052a2:	6028      	str	r0, [r5, #0]
 80052a4:	0635      	lsls	r5, r6, #24
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	d501      	bpl.n	80052ae <_printf_i+0x1ce>
 80052aa:	6019      	str	r1, [r3, #0]
 80052ac:	e002      	b.n	80052b4 <_printf_i+0x1d4>
 80052ae:	0670      	lsls	r0, r6, #25
 80052b0:	d5fb      	bpl.n	80052aa <_printf_i+0x1ca>
 80052b2:	8019      	strh	r1, [r3, #0]
 80052b4:	2300      	movs	r3, #0
 80052b6:	4615      	mov	r5, r2
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	e7ba      	b.n	8005232 <_printf_i+0x152>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	2100      	movs	r1, #0
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	602a      	str	r2, [r5, #0]
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 feb7 	bl	800603c <memchr>
 80052ce:	b108      	cbz	r0, 80052d4 <_printf_i+0x1f4>
 80052d0:	1b40      	subs	r0, r0, r5
 80052d2:	6060      	str	r0, [r4, #4]
 80052d4:	6863      	ldr	r3, [r4, #4]
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	2300      	movs	r3, #0
 80052da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052de:	e7a8      	b.n	8005232 <_printf_i+0x152>
 80052e0:	462a      	mov	r2, r5
 80052e2:	4649      	mov	r1, r9
 80052e4:	4640      	mov	r0, r8
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	47d0      	blx	sl
 80052ea:	3001      	adds	r0, #1
 80052ec:	d0ab      	beq.n	8005246 <_printf_i+0x166>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	079b      	lsls	r3, r3, #30
 80052f2:	d413      	bmi.n	800531c <_printf_i+0x23c>
 80052f4:	68e0      	ldr	r0, [r4, #12]
 80052f6:	9b03      	ldr	r3, [sp, #12]
 80052f8:	4298      	cmp	r0, r3
 80052fa:	bfb8      	it	lt
 80052fc:	4618      	movlt	r0, r3
 80052fe:	e7a4      	b.n	800524a <_printf_i+0x16a>
 8005300:	2301      	movs	r3, #1
 8005302:	4632      	mov	r2, r6
 8005304:	4649      	mov	r1, r9
 8005306:	4640      	mov	r0, r8
 8005308:	47d0      	blx	sl
 800530a:	3001      	adds	r0, #1
 800530c:	d09b      	beq.n	8005246 <_printf_i+0x166>
 800530e:	3501      	adds	r5, #1
 8005310:	68e3      	ldr	r3, [r4, #12]
 8005312:	9903      	ldr	r1, [sp, #12]
 8005314:	1a5b      	subs	r3, r3, r1
 8005316:	42ab      	cmp	r3, r5
 8005318:	dcf2      	bgt.n	8005300 <_printf_i+0x220>
 800531a:	e7eb      	b.n	80052f4 <_printf_i+0x214>
 800531c:	2500      	movs	r5, #0
 800531e:	f104 0619 	add.w	r6, r4, #25
 8005322:	e7f5      	b.n	8005310 <_printf_i+0x230>
 8005324:	080074de 	.word	0x080074de
 8005328:	080074ef 	.word	0x080074ef

0800532c <quorem>:
 800532c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	6903      	ldr	r3, [r0, #16]
 8005332:	690c      	ldr	r4, [r1, #16]
 8005334:	4607      	mov	r7, r0
 8005336:	42a3      	cmp	r3, r4
 8005338:	f2c0 8082 	blt.w	8005440 <quorem+0x114>
 800533c:	3c01      	subs	r4, #1
 800533e:	f100 0514 	add.w	r5, r0, #20
 8005342:	f101 0814 	add.w	r8, r1, #20
 8005346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005354:	3301      	adds	r3, #1
 8005356:	429a      	cmp	r2, r3
 8005358:	fbb2 f6f3 	udiv	r6, r2, r3
 800535c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005360:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005364:	d331      	bcc.n	80053ca <quorem+0x9e>
 8005366:	f04f 0e00 	mov.w	lr, #0
 800536a:	4640      	mov	r0, r8
 800536c:	46ac      	mov	ip, r5
 800536e:	46f2      	mov	sl, lr
 8005370:	f850 2b04 	ldr.w	r2, [r0], #4
 8005374:	b293      	uxth	r3, r2
 8005376:	fb06 e303 	mla	r3, r6, r3, lr
 800537a:	0c12      	lsrs	r2, r2, #16
 800537c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	fb06 e202 	mla	r2, r6, r2, lr
 8005386:	ebaa 0303 	sub.w	r3, sl, r3
 800538a:	f8dc a000 	ldr.w	sl, [ip]
 800538e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005392:	fa1f fa8a 	uxth.w	sl, sl
 8005396:	4453      	add	r3, sl
 8005398:	f8dc a000 	ldr.w	sl, [ip]
 800539c:	b292      	uxth	r2, r2
 800539e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053ac:	4581      	cmp	r9, r0
 80053ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053b2:	f84c 3b04 	str.w	r3, [ip], #4
 80053b6:	d2db      	bcs.n	8005370 <quorem+0x44>
 80053b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80053bc:	b92b      	cbnz	r3, 80053ca <quorem+0x9e>
 80053be:	9b01      	ldr	r3, [sp, #4]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	429d      	cmp	r5, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	d32f      	bcc.n	8005428 <quorem+0xfc>
 80053c8:	613c      	str	r4, [r7, #16]
 80053ca:	4638      	mov	r0, r7
 80053cc:	f001 f8d0 	bl	8006570 <__mcmp>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	db25      	blt.n	8005420 <quorem+0xf4>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f04f 0c00 	mov.w	ip, #0
 80053da:	3601      	adds	r6, #1
 80053dc:	f858 1b04 	ldr.w	r1, [r8], #4
 80053e0:	f8d0 e000 	ldr.w	lr, [r0]
 80053e4:	b28b      	uxth	r3, r1
 80053e6:	ebac 0303 	sub.w	r3, ip, r3
 80053ea:	fa1f f28e 	uxth.w	r2, lr
 80053ee:	4413      	add	r3, r2
 80053f0:	0c0a      	lsrs	r2, r1, #16
 80053f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005400:	45c1      	cmp	r9, r8
 8005402:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005406:	f840 3b04 	str.w	r3, [r0], #4
 800540a:	d2e7      	bcs.n	80053dc <quorem+0xb0>
 800540c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005414:	b922      	cbnz	r2, 8005420 <quorem+0xf4>
 8005416:	3b04      	subs	r3, #4
 8005418:	429d      	cmp	r5, r3
 800541a:	461a      	mov	r2, r3
 800541c:	d30a      	bcc.n	8005434 <quorem+0x108>
 800541e:	613c      	str	r4, [r7, #16]
 8005420:	4630      	mov	r0, r6
 8005422:	b003      	add	sp, #12
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	3b04      	subs	r3, #4
 800542c:	2a00      	cmp	r2, #0
 800542e:	d1cb      	bne.n	80053c8 <quorem+0x9c>
 8005430:	3c01      	subs	r4, #1
 8005432:	e7c6      	b.n	80053c2 <quorem+0x96>
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	3b04      	subs	r3, #4
 8005438:	2a00      	cmp	r2, #0
 800543a:	d1f0      	bne.n	800541e <quorem+0xf2>
 800543c:	3c01      	subs	r4, #1
 800543e:	e7eb      	b.n	8005418 <quorem+0xec>
 8005440:	2000      	movs	r0, #0
 8005442:	e7ee      	b.n	8005422 <quorem+0xf6>
 8005444:	0000      	movs	r0, r0
	...

08005448 <_dtoa_r>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4616      	mov	r6, r2
 800544e:	461f      	mov	r7, r3
 8005450:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005452:	b099      	sub	sp, #100	; 0x64
 8005454:	4605      	mov	r5, r0
 8005456:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800545a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800545e:	b974      	cbnz	r4, 800547e <_dtoa_r+0x36>
 8005460:	2010      	movs	r0, #16
 8005462:	f000 fde3 	bl	800602c <malloc>
 8005466:	4602      	mov	r2, r0
 8005468:	6268      	str	r0, [r5, #36]	; 0x24
 800546a:	b920      	cbnz	r0, 8005476 <_dtoa_r+0x2e>
 800546c:	21ea      	movs	r1, #234	; 0xea
 800546e:	4ba8      	ldr	r3, [pc, #672]	; (8005710 <_dtoa_r+0x2c8>)
 8005470:	48a8      	ldr	r0, [pc, #672]	; (8005714 <_dtoa_r+0x2cc>)
 8005472:	f001 fa81 	bl	8006978 <__assert_func>
 8005476:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800547a:	6004      	str	r4, [r0, #0]
 800547c:	60c4      	str	r4, [r0, #12]
 800547e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005480:	6819      	ldr	r1, [r3, #0]
 8005482:	b151      	cbz	r1, 800549a <_dtoa_r+0x52>
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	2301      	movs	r3, #1
 8005488:	4093      	lsls	r3, r2
 800548a:	604a      	str	r2, [r1, #4]
 800548c:	608b      	str	r3, [r1, #8]
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fe30 	bl	80060f4 <_Bfree>
 8005494:	2200      	movs	r2, #0
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	1e3b      	subs	r3, r7, #0
 800549c:	bfaf      	iteee	ge
 800549e:	2300      	movge	r3, #0
 80054a0:	2201      	movlt	r2, #1
 80054a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054a6:	9305      	strlt	r3, [sp, #20]
 80054a8:	bfa8      	it	ge
 80054aa:	f8c8 3000 	strge.w	r3, [r8]
 80054ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054b2:	4b99      	ldr	r3, [pc, #612]	; (8005718 <_dtoa_r+0x2d0>)
 80054b4:	bfb8      	it	lt
 80054b6:	f8c8 2000 	strlt.w	r2, [r8]
 80054ba:	ea33 0309 	bics.w	r3, r3, r9
 80054be:	d119      	bne.n	80054f4 <_dtoa_r+0xac>
 80054c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80054c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054cc:	4333      	orrs	r3, r6
 80054ce:	f000 857f 	beq.w	8005fd0 <_dtoa_r+0xb88>
 80054d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054d4:	b953      	cbnz	r3, 80054ec <_dtoa_r+0xa4>
 80054d6:	4b91      	ldr	r3, [pc, #580]	; (800571c <_dtoa_r+0x2d4>)
 80054d8:	e022      	b.n	8005520 <_dtoa_r+0xd8>
 80054da:	4b91      	ldr	r3, [pc, #580]	; (8005720 <_dtoa_r+0x2d8>)
 80054dc:	9303      	str	r3, [sp, #12]
 80054de:	3308      	adds	r3, #8
 80054e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	9803      	ldr	r0, [sp, #12]
 80054e6:	b019      	add	sp, #100	; 0x64
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ec:	4b8b      	ldr	r3, [pc, #556]	; (800571c <_dtoa_r+0x2d4>)
 80054ee:	9303      	str	r3, [sp, #12]
 80054f0:	3303      	adds	r3, #3
 80054f2:	e7f5      	b.n	80054e0 <_dtoa_r+0x98>
 80054f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80054f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80054fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005500:	2200      	movs	r2, #0
 8005502:	2300      	movs	r3, #0
 8005504:	f7fb fa50 	bl	80009a8 <__aeabi_dcmpeq>
 8005508:	4680      	mov	r8, r0
 800550a:	b158      	cbz	r0, 8005524 <_dtoa_r+0xdc>
 800550c:	2301      	movs	r3, #1
 800550e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8558 	beq.w	8005fca <_dtoa_r+0xb82>
 800551a:	4882      	ldr	r0, [pc, #520]	; (8005724 <_dtoa_r+0x2dc>)
 800551c:	6018      	str	r0, [r3, #0]
 800551e:	1e43      	subs	r3, r0, #1
 8005520:	9303      	str	r3, [sp, #12]
 8005522:	e7df      	b.n	80054e4 <_dtoa_r+0x9c>
 8005524:	ab16      	add	r3, sp, #88	; 0x58
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	ab17      	add	r3, sp, #92	; 0x5c
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4628      	mov	r0, r5
 800552e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005532:	f001 f8c5 	bl	80066c0 <__d2b>
 8005536:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800553a:	4683      	mov	fp, r0
 800553c:	2c00      	cmp	r4, #0
 800553e:	d07f      	beq.n	8005640 <_dtoa_r+0x1f8>
 8005540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005546:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800554a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800554e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005552:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005556:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800555a:	2200      	movs	r2, #0
 800555c:	4b72      	ldr	r3, [pc, #456]	; (8005728 <_dtoa_r+0x2e0>)
 800555e:	f7fa fe03 	bl	8000168 <__aeabi_dsub>
 8005562:	a365      	add	r3, pc, #404	; (adr r3, 80056f8 <_dtoa_r+0x2b0>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fa ffb6 	bl	80004d8 <__aeabi_dmul>
 800556c:	a364      	add	r3, pc, #400	; (adr r3, 8005700 <_dtoa_r+0x2b8>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fdfb 	bl	800016c <__adddf3>
 8005576:	4606      	mov	r6, r0
 8005578:	4620      	mov	r0, r4
 800557a:	460f      	mov	r7, r1
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	a361      	add	r3, pc, #388	; (adr r3, 8005708 <_dtoa_r+0x2c0>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f7fa ffa7 	bl	80004d8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4630      	mov	r0, r6
 8005590:	4639      	mov	r1, r7
 8005592:	f7fa fdeb 	bl	800016c <__adddf3>
 8005596:	4606      	mov	r6, r0
 8005598:	460f      	mov	r7, r1
 800559a:	f7fb fa4d 	bl	8000a38 <__aeabi_d2iz>
 800559e:	2200      	movs	r2, #0
 80055a0:	4682      	mov	sl, r0
 80055a2:	2300      	movs	r3, #0
 80055a4:	4630      	mov	r0, r6
 80055a6:	4639      	mov	r1, r7
 80055a8:	f7fb fa08 	bl	80009bc <__aeabi_dcmplt>
 80055ac:	b148      	cbz	r0, 80055c2 <_dtoa_r+0x17a>
 80055ae:	4650      	mov	r0, sl
 80055b0:	f7fa ff28 	bl	8000404 <__aeabi_i2d>
 80055b4:	4632      	mov	r2, r6
 80055b6:	463b      	mov	r3, r7
 80055b8:	f7fb f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80055bc:	b908      	cbnz	r0, 80055c2 <_dtoa_r+0x17a>
 80055be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055c2:	f1ba 0f16 	cmp.w	sl, #22
 80055c6:	d858      	bhi.n	800567a <_dtoa_r+0x232>
 80055c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055cc:	4b57      	ldr	r3, [pc, #348]	; (800572c <_dtoa_r+0x2e4>)
 80055ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb f9f1 	bl	80009bc <__aeabi_dcmplt>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d04f      	beq.n	800567e <_dtoa_r+0x236>
 80055de:	2300      	movs	r3, #0
 80055e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80055e8:	1b1c      	subs	r4, r3, r4
 80055ea:	1e63      	subs	r3, r4, #1
 80055ec:	9309      	str	r3, [sp, #36]	; 0x24
 80055ee:	bf49      	itett	mi
 80055f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80055f4:	2300      	movpl	r3, #0
 80055f6:	9306      	strmi	r3, [sp, #24]
 80055f8:	2300      	movmi	r3, #0
 80055fa:	bf54      	ite	pl
 80055fc:	9306      	strpl	r3, [sp, #24]
 80055fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005600:	f1ba 0f00 	cmp.w	sl, #0
 8005604:	db3d      	blt.n	8005682 <_dtoa_r+0x23a>
 8005606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005608:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800560c:	4453      	add	r3, sl
 800560e:	9309      	str	r3, [sp, #36]	; 0x24
 8005610:	2300      	movs	r3, #0
 8005612:	930a      	str	r3, [sp, #40]	; 0x28
 8005614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005616:	2b09      	cmp	r3, #9
 8005618:	f200 808c 	bhi.w	8005734 <_dtoa_r+0x2ec>
 800561c:	2b05      	cmp	r3, #5
 800561e:	bfc4      	itt	gt
 8005620:	3b04      	subgt	r3, #4
 8005622:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005624:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005626:	bfc8      	it	gt
 8005628:	2400      	movgt	r4, #0
 800562a:	f1a3 0302 	sub.w	r3, r3, #2
 800562e:	bfd8      	it	le
 8005630:	2401      	movle	r4, #1
 8005632:	2b03      	cmp	r3, #3
 8005634:	f200 808a 	bhi.w	800574c <_dtoa_r+0x304>
 8005638:	e8df f003 	tbb	[pc, r3]
 800563c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005640:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005644:	441c      	add	r4, r3
 8005646:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800564a:	2b20      	cmp	r3, #32
 800564c:	bfc3      	ittte	gt
 800564e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005652:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005656:	fa09 f303 	lslgt.w	r3, r9, r3
 800565a:	f1c3 0320 	rsble	r3, r3, #32
 800565e:	bfc6      	itte	gt
 8005660:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005664:	4318      	orrgt	r0, r3
 8005666:	fa06 f003 	lslle.w	r0, r6, r3
 800566a:	f7fa febb 	bl	80003e4 <__aeabi_ui2d>
 800566e:	2301      	movs	r3, #1
 8005670:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005674:	3c01      	subs	r4, #1
 8005676:	9313      	str	r3, [sp, #76]	; 0x4c
 8005678:	e76f      	b.n	800555a <_dtoa_r+0x112>
 800567a:	2301      	movs	r3, #1
 800567c:	e7b2      	b.n	80055e4 <_dtoa_r+0x19c>
 800567e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005680:	e7b1      	b.n	80055e6 <_dtoa_r+0x19e>
 8005682:	9b06      	ldr	r3, [sp, #24]
 8005684:	eba3 030a 	sub.w	r3, r3, sl
 8005688:	9306      	str	r3, [sp, #24]
 800568a:	f1ca 0300 	rsb	r3, sl, #0
 800568e:	930a      	str	r3, [sp, #40]	; 0x28
 8005690:	2300      	movs	r3, #0
 8005692:	930e      	str	r3, [sp, #56]	; 0x38
 8005694:	e7be      	b.n	8005614 <_dtoa_r+0x1cc>
 8005696:	2300      	movs	r3, #0
 8005698:	930b      	str	r3, [sp, #44]	; 0x2c
 800569a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800569c:	2b00      	cmp	r3, #0
 800569e:	dc58      	bgt.n	8005752 <_dtoa_r+0x30a>
 80056a0:	f04f 0901 	mov.w	r9, #1
 80056a4:	464b      	mov	r3, r9
 80056a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80056aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80056ae:	2200      	movs	r2, #0
 80056b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056b2:	6042      	str	r2, [r0, #4]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f102 0614 	add.w	r6, r2, #20
 80056ba:	429e      	cmp	r6, r3
 80056bc:	6841      	ldr	r1, [r0, #4]
 80056be:	d94e      	bls.n	800575e <_dtoa_r+0x316>
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fcd7 	bl	8006074 <_Balloc>
 80056c6:	9003      	str	r0, [sp, #12]
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d14c      	bne.n	8005766 <_dtoa_r+0x31e>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056d2:	4b17      	ldr	r3, [pc, #92]	; (8005730 <_dtoa_r+0x2e8>)
 80056d4:	e6cc      	b.n	8005470 <_dtoa_r+0x28>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e7de      	b.n	8005698 <_dtoa_r+0x250>
 80056da:	2300      	movs	r3, #0
 80056dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80056de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056e0:	eb0a 0903 	add.w	r9, sl, r3
 80056e4:	f109 0301 	add.w	r3, r9, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	9308      	str	r3, [sp, #32]
 80056ec:	bfb8      	it	lt
 80056ee:	2301      	movlt	r3, #1
 80056f0:	e7dd      	b.n	80056ae <_dtoa_r+0x266>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7f2      	b.n	80056dc <_dtoa_r+0x294>
 80056f6:	bf00      	nop
 80056f8:	636f4361 	.word	0x636f4361
 80056fc:	3fd287a7 	.word	0x3fd287a7
 8005700:	8b60c8b3 	.word	0x8b60c8b3
 8005704:	3fc68a28 	.word	0x3fc68a28
 8005708:	509f79fb 	.word	0x509f79fb
 800570c:	3fd34413 	.word	0x3fd34413
 8005710:	0800750d 	.word	0x0800750d
 8005714:	08007524 	.word	0x08007524
 8005718:	7ff00000 	.word	0x7ff00000
 800571c:	08007509 	.word	0x08007509
 8005720:	08007500 	.word	0x08007500
 8005724:	080074dd 	.word	0x080074dd
 8005728:	3ff80000 	.word	0x3ff80000
 800572c:	08007618 	.word	0x08007618
 8005730:	0800757f 	.word	0x0800757f
 8005734:	2401      	movs	r4, #1
 8005736:	2300      	movs	r3, #0
 8005738:	940b      	str	r4, [sp, #44]	; 0x2c
 800573a:	9322      	str	r3, [sp, #136]	; 0x88
 800573c:	f04f 39ff 	mov.w	r9, #4294967295
 8005740:	2200      	movs	r2, #0
 8005742:	2312      	movs	r3, #18
 8005744:	f8cd 9020 	str.w	r9, [sp, #32]
 8005748:	9223      	str	r2, [sp, #140]	; 0x8c
 800574a:	e7b0      	b.n	80056ae <_dtoa_r+0x266>
 800574c:	2301      	movs	r3, #1
 800574e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005750:	e7f4      	b.n	800573c <_dtoa_r+0x2f4>
 8005752:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005756:	464b      	mov	r3, r9
 8005758:	f8cd 9020 	str.w	r9, [sp, #32]
 800575c:	e7a7      	b.n	80056ae <_dtoa_r+0x266>
 800575e:	3101      	adds	r1, #1
 8005760:	6041      	str	r1, [r0, #4]
 8005762:	0052      	lsls	r2, r2, #1
 8005764:	e7a7      	b.n	80056b6 <_dtoa_r+0x26e>
 8005766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005768:	9a03      	ldr	r2, [sp, #12]
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	2b0e      	cmp	r3, #14
 8005770:	f200 80a8 	bhi.w	80058c4 <_dtoa_r+0x47c>
 8005774:	2c00      	cmp	r4, #0
 8005776:	f000 80a5 	beq.w	80058c4 <_dtoa_r+0x47c>
 800577a:	f1ba 0f00 	cmp.w	sl, #0
 800577e:	dd34      	ble.n	80057ea <_dtoa_r+0x3a2>
 8005780:	4a9a      	ldr	r2, [pc, #616]	; (80059ec <_dtoa_r+0x5a4>)
 8005782:	f00a 030f 	and.w	r3, sl, #15
 8005786:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800578a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800578e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005792:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005796:	ea4f 142a 	mov.w	r4, sl, asr #4
 800579a:	d016      	beq.n	80057ca <_dtoa_r+0x382>
 800579c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057a0:	4b93      	ldr	r3, [pc, #588]	; (80059f0 <_dtoa_r+0x5a8>)
 80057a2:	2703      	movs	r7, #3
 80057a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057a8:	f7fa ffc0 	bl	800072c <__aeabi_ddiv>
 80057ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b0:	f004 040f 	and.w	r4, r4, #15
 80057b4:	4e8e      	ldr	r6, [pc, #568]	; (80059f0 <_dtoa_r+0x5a8>)
 80057b6:	b954      	cbnz	r4, 80057ce <_dtoa_r+0x386>
 80057b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c0:	f7fa ffb4 	bl	800072c <__aeabi_ddiv>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	e029      	b.n	800581e <_dtoa_r+0x3d6>
 80057ca:	2702      	movs	r7, #2
 80057cc:	e7f2      	b.n	80057b4 <_dtoa_r+0x36c>
 80057ce:	07e1      	lsls	r1, r4, #31
 80057d0:	d508      	bpl.n	80057e4 <_dtoa_r+0x39c>
 80057d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e2:	3701      	adds	r7, #1
 80057e4:	1064      	asrs	r4, r4, #1
 80057e6:	3608      	adds	r6, #8
 80057e8:	e7e5      	b.n	80057b6 <_dtoa_r+0x36e>
 80057ea:	f000 80a5 	beq.w	8005938 <_dtoa_r+0x4f0>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f2:	f1ca 0400 	rsb	r4, sl, #0
 80057f6:	4b7d      	ldr	r3, [pc, #500]	; (80059ec <_dtoa_r+0x5a4>)
 80057f8:	f004 020f 	and.w	r2, r4, #15
 80057fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f7fa fe68 	bl	80004d8 <__aeabi_dmul>
 8005808:	2702      	movs	r7, #2
 800580a:	2300      	movs	r3, #0
 800580c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005810:	4e77      	ldr	r6, [pc, #476]	; (80059f0 <_dtoa_r+0x5a8>)
 8005812:	1124      	asrs	r4, r4, #4
 8005814:	2c00      	cmp	r4, #0
 8005816:	f040 8084 	bne.w	8005922 <_dtoa_r+0x4da>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1d2      	bne.n	80057c4 <_dtoa_r+0x37c>
 800581e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 808b 	beq.w	800593c <_dtoa_r+0x4f4>
 8005826:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800582a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800582e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005832:	2200      	movs	r2, #0
 8005834:	4b6f      	ldr	r3, [pc, #444]	; (80059f4 <_dtoa_r+0x5ac>)
 8005836:	f7fb f8c1 	bl	80009bc <__aeabi_dcmplt>
 800583a:	2800      	cmp	r0, #0
 800583c:	d07e      	beq.n	800593c <_dtoa_r+0x4f4>
 800583e:	9b08      	ldr	r3, [sp, #32]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d07b      	beq.n	800593c <_dtoa_r+0x4f4>
 8005844:	f1b9 0f00 	cmp.w	r9, #0
 8005848:	dd38      	ble.n	80058bc <_dtoa_r+0x474>
 800584a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584e:	2200      	movs	r2, #0
 8005850:	4b69      	ldr	r3, [pc, #420]	; (80059f8 <_dtoa_r+0x5b0>)
 8005852:	f7fa fe41 	bl	80004d8 <__aeabi_dmul>
 8005856:	464c      	mov	r4, r9
 8005858:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800585c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005860:	3701      	adds	r7, #1
 8005862:	4638      	mov	r0, r7
 8005864:	f7fa fdce 	bl	8000404 <__aeabi_i2d>
 8005868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	2200      	movs	r2, #0
 8005872:	4b62      	ldr	r3, [pc, #392]	; (80059fc <_dtoa_r+0x5b4>)
 8005874:	f7fa fc7a 	bl	800016c <__adddf3>
 8005878:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800587c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005880:	9611      	str	r6, [sp, #68]	; 0x44
 8005882:	2c00      	cmp	r4, #0
 8005884:	d15d      	bne.n	8005942 <_dtoa_r+0x4fa>
 8005886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800588a:	2200      	movs	r2, #0
 800588c:	4b5c      	ldr	r3, [pc, #368]	; (8005a00 <_dtoa_r+0x5b8>)
 800588e:	f7fa fc6b 	bl	8000168 <__aeabi_dsub>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800589a:	4633      	mov	r3, r6
 800589c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800589e:	f7fb f8ab 	bl	80009f8 <__aeabi_dcmpgt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f040 829c 	bne.w	8005de0 <_dtoa_r+0x998>
 80058a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058b2:	f7fb f883 	bl	80009bc <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	f040 8290 	bne.w	8005ddc <_dtoa_r+0x994>
 80058bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f2c0 8152 	blt.w	8005b70 <_dtoa_r+0x728>
 80058cc:	f1ba 0f0e 	cmp.w	sl, #14
 80058d0:	f300 814e 	bgt.w	8005b70 <_dtoa_r+0x728>
 80058d4:	4b45      	ldr	r3, [pc, #276]	; (80059ec <_dtoa_r+0x5a4>)
 80058d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f280 80db 	bge.w	8005aa0 <_dtoa_r+0x658>
 80058ea:	9b08      	ldr	r3, [sp, #32]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f300 80d7 	bgt.w	8005aa0 <_dtoa_r+0x658>
 80058f2:	f040 8272 	bne.w	8005dda <_dtoa_r+0x992>
 80058f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058fa:	2200      	movs	r2, #0
 80058fc:	4b40      	ldr	r3, [pc, #256]	; (8005a00 <_dtoa_r+0x5b8>)
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005906:	f7fb f86d 	bl	80009e4 <__aeabi_dcmpge>
 800590a:	9c08      	ldr	r4, [sp, #32]
 800590c:	4626      	mov	r6, r4
 800590e:	2800      	cmp	r0, #0
 8005910:	f040 8248 	bne.w	8005da4 <_dtoa_r+0x95c>
 8005914:	2331      	movs	r3, #49	; 0x31
 8005916:	9f03      	ldr	r7, [sp, #12]
 8005918:	f10a 0a01 	add.w	sl, sl, #1
 800591c:	f807 3b01 	strb.w	r3, [r7], #1
 8005920:	e244      	b.n	8005dac <_dtoa_r+0x964>
 8005922:	07e2      	lsls	r2, r4, #31
 8005924:	d505      	bpl.n	8005932 <_dtoa_r+0x4ea>
 8005926:	e9d6 2300 	ldrd	r2, r3, [r6]
 800592a:	f7fa fdd5 	bl	80004d8 <__aeabi_dmul>
 800592e:	2301      	movs	r3, #1
 8005930:	3701      	adds	r7, #1
 8005932:	1064      	asrs	r4, r4, #1
 8005934:	3608      	adds	r6, #8
 8005936:	e76d      	b.n	8005814 <_dtoa_r+0x3cc>
 8005938:	2702      	movs	r7, #2
 800593a:	e770      	b.n	800581e <_dtoa_r+0x3d6>
 800593c:	46d0      	mov	r8, sl
 800593e:	9c08      	ldr	r4, [sp, #32]
 8005940:	e78f      	b.n	8005862 <_dtoa_r+0x41a>
 8005942:	9903      	ldr	r1, [sp, #12]
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <_dtoa_r+0x5a4>)
 8005946:	4421      	add	r1, r4
 8005948:	9112      	str	r1, [sp, #72]	; 0x48
 800594a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800594c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005950:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005954:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005958:	2900      	cmp	r1, #0
 800595a:	d055      	beq.n	8005a08 <_dtoa_r+0x5c0>
 800595c:	2000      	movs	r0, #0
 800595e:	4929      	ldr	r1, [pc, #164]	; (8005a04 <_dtoa_r+0x5bc>)
 8005960:	f7fa fee4 	bl	800072c <__aeabi_ddiv>
 8005964:	463b      	mov	r3, r7
 8005966:	4632      	mov	r2, r6
 8005968:	f7fa fbfe 	bl	8000168 <__aeabi_dsub>
 800596c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005970:	9f03      	ldr	r7, [sp, #12]
 8005972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005976:	f7fb f85f 	bl	8000a38 <__aeabi_d2iz>
 800597a:	4604      	mov	r4, r0
 800597c:	f7fa fd42 	bl	8000404 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005988:	f7fa fbee 	bl	8000168 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	3430      	adds	r4, #48	; 0x30
 8005992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800599a:	f807 4b01 	strb.w	r4, [r7], #1
 800599e:	f7fb f80d 	bl	80009bc <__aeabi_dcmplt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d174      	bne.n	8005a90 <_dtoa_r+0x648>
 80059a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059aa:	2000      	movs	r0, #0
 80059ac:	4911      	ldr	r1, [pc, #68]	; (80059f4 <_dtoa_r+0x5ac>)
 80059ae:	f7fa fbdb 	bl	8000168 <__aeabi_dsub>
 80059b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b6:	f7fb f801 	bl	80009bc <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f040 80b7 	bne.w	8005b2e <_dtoa_r+0x6e6>
 80059c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059c2:	429f      	cmp	r7, r3
 80059c4:	f43f af7a 	beq.w	80058bc <_dtoa_r+0x474>
 80059c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059cc:	2200      	movs	r2, #0
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <_dtoa_r+0x5b0>)
 80059d0:	f7fa fd82 	bl	80004d8 <__aeabi_dmul>
 80059d4:	2200      	movs	r2, #0
 80059d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <_dtoa_r+0x5b0>)
 80059e0:	f7fa fd7a 	bl	80004d8 <__aeabi_dmul>
 80059e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e8:	e7c3      	b.n	8005972 <_dtoa_r+0x52a>
 80059ea:	bf00      	nop
 80059ec:	08007618 	.word	0x08007618
 80059f0:	080075f0 	.word	0x080075f0
 80059f4:	3ff00000 	.word	0x3ff00000
 80059f8:	40240000 	.word	0x40240000
 80059fc:	401c0000 	.word	0x401c0000
 8005a00:	40140000 	.word	0x40140000
 8005a04:	3fe00000 	.word	0x3fe00000
 8005a08:	4630      	mov	r0, r6
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	f7fa fd64 	bl	80004d8 <__aeabi_dmul>
 8005a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a16:	9c03      	ldr	r4, [sp, #12]
 8005a18:	9314      	str	r3, [sp, #80]	; 0x50
 8005a1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a1e:	f7fb f80b 	bl	8000a38 <__aeabi_d2iz>
 8005a22:	9015      	str	r0, [sp, #84]	; 0x54
 8005a24:	f7fa fcee 	bl	8000404 <__aeabi_i2d>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a30:	f7fa fb9a 	bl	8000168 <__aeabi_dsub>
 8005a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a36:	4606      	mov	r6, r0
 8005a38:	3330      	adds	r3, #48	; 0x30
 8005a3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a40:	460f      	mov	r7, r1
 8005a42:	429c      	cmp	r4, r3
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	d124      	bne.n	8005a94 <_dtoa_r+0x64c>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a4e:	4bb0      	ldr	r3, [pc, #704]	; (8005d10 <_dtoa_r+0x8c8>)
 8005a50:	f7fa fb8c 	bl	800016c <__adddf3>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4630      	mov	r0, r6
 8005a5a:	4639      	mov	r1, r7
 8005a5c:	f7fa ffcc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d163      	bne.n	8005b2c <_dtoa_r+0x6e4>
 8005a64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a68:	2000      	movs	r0, #0
 8005a6a:	49a9      	ldr	r1, [pc, #676]	; (8005d10 <_dtoa_r+0x8c8>)
 8005a6c:	f7fa fb7c 	bl	8000168 <__aeabi_dsub>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa ffa0 	bl	80009bc <__aeabi_dcmplt>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f43f af1d 	beq.w	80058bc <_dtoa_r+0x474>
 8005a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a84:	1e7b      	subs	r3, r7, #1
 8005a86:	9314      	str	r3, [sp, #80]	; 0x50
 8005a88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d0f8      	beq.n	8005a82 <_dtoa_r+0x63a>
 8005a90:	46c2      	mov	sl, r8
 8005a92:	e03b      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005a94:	4b9f      	ldr	r3, [pc, #636]	; (8005d14 <_dtoa_r+0x8cc>)
 8005a96:	f7fa fd1f 	bl	80004d8 <__aeabi_dmul>
 8005a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a9e:	e7bc      	b.n	8005a1a <_dtoa_r+0x5d2>
 8005aa0:	9f03      	ldr	r7, [sp, #12]
 8005aa2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005aa6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa fe3d 	bl	800072c <__aeabi_ddiv>
 8005ab2:	f7fa ffc1 	bl	8000a38 <__aeabi_d2iz>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	f7fa fca4 	bl	8000404 <__aeabi_i2d>
 8005abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac0:	f7fa fd0a 	bl	80004d8 <__aeabi_dmul>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4640      	mov	r0, r8
 8005aca:	4649      	mov	r1, r9
 8005acc:	f7fa fb4c 	bl	8000168 <__aeabi_dsub>
 8005ad0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ad4:	f807 6b01 	strb.w	r6, [r7], #1
 8005ad8:	9e03      	ldr	r6, [sp, #12]
 8005ada:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005ade:	1bbe      	subs	r6, r7, r6
 8005ae0:	45b4      	cmp	ip, r6
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	d136      	bne.n	8005b56 <_dtoa_r+0x70e>
 8005ae8:	f7fa fb40 	bl	800016c <__adddf3>
 8005aec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005af0:	4680      	mov	r8, r0
 8005af2:	4689      	mov	r9, r1
 8005af4:	f7fa ff80 	bl	80009f8 <__aeabi_dcmpgt>
 8005af8:	bb58      	cbnz	r0, 8005b52 <_dtoa_r+0x70a>
 8005afa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8005b06:	b108      	cbz	r0, 8005b0c <_dtoa_r+0x6c4>
 8005b08:	07e1      	lsls	r1, r4, #31
 8005b0a:	d422      	bmi.n	8005b52 <_dtoa_r+0x70a>
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	4659      	mov	r1, fp
 8005b10:	f000 faf0 	bl	80060f4 <_Bfree>
 8005b14:	2300      	movs	r3, #0
 8005b16:	703b      	strb	r3, [r7, #0]
 8005b18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b1a:	f10a 0001 	add.w	r0, sl, #1
 8005b1e:	6018      	str	r0, [r3, #0]
 8005b20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f43f acde 	beq.w	80054e4 <_dtoa_r+0x9c>
 8005b28:	601f      	str	r7, [r3, #0]
 8005b2a:	e4db      	b.n	80054e4 <_dtoa_r+0x9c>
 8005b2c:	4627      	mov	r7, r4
 8005b2e:	463b      	mov	r3, r7
 8005b30:	461f      	mov	r7, r3
 8005b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b36:	2a39      	cmp	r2, #57	; 0x39
 8005b38:	d107      	bne.n	8005b4a <_dtoa_r+0x702>
 8005b3a:	9a03      	ldr	r2, [sp, #12]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d1f7      	bne.n	8005b30 <_dtoa_r+0x6e8>
 8005b40:	2230      	movs	r2, #48	; 0x30
 8005b42:	9903      	ldr	r1, [sp, #12]
 8005b44:	f108 0801 	add.w	r8, r8, #1
 8005b48:	700a      	strb	r2, [r1, #0]
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	3201      	adds	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e79e      	b.n	8005a90 <_dtoa_r+0x648>
 8005b52:	46d0      	mov	r8, sl
 8005b54:	e7eb      	b.n	8005b2e <_dtoa_r+0x6e6>
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <_dtoa_r+0x8cc>)
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4680      	mov	r8, r0
 8005b64:	4689      	mov	r9, r1
 8005b66:	f7fa ff1f 	bl	80009a8 <__aeabi_dcmpeq>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	d09b      	beq.n	8005aa6 <_dtoa_r+0x65e>
 8005b6e:	e7cd      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005b70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b72:	2a00      	cmp	r2, #0
 8005b74:	f000 80d0 	beq.w	8005d18 <_dtoa_r+0x8d0>
 8005b78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b7a:	2a01      	cmp	r2, #1
 8005b7c:	f300 80ae 	bgt.w	8005cdc <_dtoa_r+0x894>
 8005b80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b82:	2a00      	cmp	r2, #0
 8005b84:	f000 80a6 	beq.w	8005cd4 <_dtoa_r+0x88c>
 8005b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b8e:	9f06      	ldr	r7, [sp, #24]
 8005b90:	9a06      	ldr	r2, [sp, #24]
 8005b92:	2101      	movs	r1, #1
 8005b94:	441a      	add	r2, r3
 8005b96:	9206      	str	r2, [sp, #24]
 8005b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	441a      	add	r2, r3
 8005b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba0:	f000 fb5e 	bl	8006260 <__i2b>
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	2f00      	cmp	r7, #0
 8005ba8:	dd0c      	ble.n	8005bc4 <_dtoa_r+0x77c>
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dd09      	ble.n	8005bc4 <_dtoa_r+0x77c>
 8005bb0:	42bb      	cmp	r3, r7
 8005bb2:	bfa8      	it	ge
 8005bb4:	463b      	movge	r3, r7
 8005bb6:	9a06      	ldr	r2, [sp, #24]
 8005bb8:	1aff      	subs	r7, r7, r3
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	9206      	str	r2, [sp, #24]
 8005bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	b1f3      	cbz	r3, 8005c06 <_dtoa_r+0x7be>
 8005bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80a8 	beq.w	8005d20 <_dtoa_r+0x8d8>
 8005bd0:	2c00      	cmp	r4, #0
 8005bd2:	dd10      	ble.n	8005bf6 <_dtoa_r+0x7ae>
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4628      	mov	r0, r5
 8005bda:	f000 fbff 	bl	80063dc <__pow5mult>
 8005bde:	465a      	mov	r2, fp
 8005be0:	4601      	mov	r1, r0
 8005be2:	4606      	mov	r6, r0
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fb51 	bl	800628c <__multiply>
 8005bea:	4680      	mov	r8, r0
 8005bec:	4659      	mov	r1, fp
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fa80 	bl	80060f4 <_Bfree>
 8005bf4:	46c3      	mov	fp, r8
 8005bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf8:	1b1a      	subs	r2, r3, r4
 8005bfa:	d004      	beq.n	8005c06 <_dtoa_r+0x7be>
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fbec 	bl	80063dc <__pow5mult>
 8005c04:	4683      	mov	fp, r0
 8005c06:	2101      	movs	r1, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 fb29 	bl	8006260 <__i2b>
 8005c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c10:	4604      	mov	r4, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f340 8086 	ble.w	8005d24 <_dtoa_r+0x8dc>
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fbdd 	bl	80063dc <__pow5mult>
 8005c22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c24:	4604      	mov	r4, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	dd7f      	ble.n	8005d2a <_dtoa_r+0x8e2>
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c34:	6918      	ldr	r0, [r3, #16]
 8005c36:	f000 fac5 	bl	80061c4 <__hi0bits>
 8005c3a:	f1c0 0020 	rsb	r0, r0, #32
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	4418      	add	r0, r3
 8005c42:	f010 001f 	ands.w	r0, r0, #31
 8005c46:	f000 8092 	beq.w	8005d6e <_dtoa_r+0x926>
 8005c4a:	f1c0 0320 	rsb	r3, r0, #32
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	f340 808a 	ble.w	8005d68 <_dtoa_r+0x920>
 8005c54:	f1c0 001c 	rsb	r0, r0, #28
 8005c58:	9b06      	ldr	r3, [sp, #24]
 8005c5a:	4407      	add	r7, r0
 8005c5c:	4403      	add	r3, r0
 8005c5e:	9306      	str	r3, [sp, #24]
 8005c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c62:	4403      	add	r3, r0
 8005c64:	9309      	str	r3, [sp, #36]	; 0x24
 8005c66:	9b06      	ldr	r3, [sp, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x830>
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 fc0d 	bl	8006490 <__lshift>
 8005c76:	4683      	mov	fp, r0
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dd05      	ble.n	8005c8a <_dtoa_r+0x842>
 8005c7e:	4621      	mov	r1, r4
 8005c80:	461a      	mov	r2, r3
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fc04 	bl	8006490 <__lshift>
 8005c88:	4604      	mov	r4, r0
 8005c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d070      	beq.n	8005d72 <_dtoa_r+0x92a>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4658      	mov	r0, fp
 8005c94:	f000 fc6c 	bl	8006570 <__mcmp>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	da6a      	bge.n	8005d72 <_dtoa_r+0x92a>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	220a      	movs	r2, #10
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f000 fa48 	bl	8006138 <__multadd>
 8005ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005caa:	4683      	mov	fp, r0
 8005cac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 8194 	beq.w	8005fde <_dtoa_r+0xb96>
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	2300      	movs	r3, #0
 8005cba:	220a      	movs	r2, #10
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 fa3b 	bl	8006138 <__multadd>
 8005cc2:	f1b9 0f00 	cmp.w	r9, #0
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	f300 8093 	bgt.w	8005df2 <_dtoa_r+0x9aa>
 8005ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	dc57      	bgt.n	8005d82 <_dtoa_r+0x93a>
 8005cd2:	e08e      	b.n	8005df2 <_dtoa_r+0x9aa>
 8005cd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cda:	e757      	b.n	8005b8c <_dtoa_r+0x744>
 8005cdc:	9b08      	ldr	r3, [sp, #32]
 8005cde:	1e5c      	subs	r4, r3, #1
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	bfb7      	itett	lt
 8005ce6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ce8:	1b1c      	subge	r4, r3, r4
 8005cea:	1ae2      	sublt	r2, r4, r3
 8005cec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005cee:	bfbe      	ittt	lt
 8005cf0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005cf2:	189b      	addlt	r3, r3, r2
 8005cf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005cf6:	9b08      	ldr	r3, [sp, #32]
 8005cf8:	bfb8      	it	lt
 8005cfa:	2400      	movlt	r4, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bfbb      	ittet	lt
 8005d00:	9b06      	ldrlt	r3, [sp, #24]
 8005d02:	9a08      	ldrlt	r2, [sp, #32]
 8005d04:	9f06      	ldrge	r7, [sp, #24]
 8005d06:	1a9f      	sublt	r7, r3, r2
 8005d08:	bfac      	ite	ge
 8005d0a:	9b08      	ldrge	r3, [sp, #32]
 8005d0c:	2300      	movlt	r3, #0
 8005d0e:	e73f      	b.n	8005b90 <_dtoa_r+0x748>
 8005d10:	3fe00000 	.word	0x3fe00000
 8005d14:	40240000 	.word	0x40240000
 8005d18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d1a:	9f06      	ldr	r7, [sp, #24]
 8005d1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d1e:	e742      	b.n	8005ba6 <_dtoa_r+0x75e>
 8005d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d22:	e76b      	b.n	8005bfc <_dtoa_r+0x7b4>
 8005d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	dc19      	bgt.n	8005d5e <_dtoa_r+0x916>
 8005d2a:	9b04      	ldr	r3, [sp, #16]
 8005d2c:	b9bb      	cbnz	r3, 8005d5e <_dtoa_r+0x916>
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d34:	b99b      	cbnz	r3, 8005d5e <_dtoa_r+0x916>
 8005d36:	9b05      	ldr	r3, [sp, #20]
 8005d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d3c:	0d1b      	lsrs	r3, r3, #20
 8005d3e:	051b      	lsls	r3, r3, #20
 8005d40:	b183      	cbz	r3, 8005d64 <_dtoa_r+0x91c>
 8005d42:	f04f 0801 	mov.w	r8, #1
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	9306      	str	r3, [sp, #24]
 8005d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4e:	3301      	adds	r3, #1
 8005d50:	9309      	str	r3, [sp, #36]	; 0x24
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f af6a 	bne.w	8005c2e <_dtoa_r+0x7e6>
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	e76f      	b.n	8005c3e <_dtoa_r+0x7f6>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	e7f6      	b.n	8005d52 <_dtoa_r+0x90a>
 8005d64:	4698      	mov	r8, r3
 8005d66:	e7f4      	b.n	8005d52 <_dtoa_r+0x90a>
 8005d68:	f43f af7d 	beq.w	8005c66 <_dtoa_r+0x81e>
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	301c      	adds	r0, #28
 8005d70:	e772      	b.n	8005c58 <_dtoa_r+0x810>
 8005d72:	9b08      	ldr	r3, [sp, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dc36      	bgt.n	8005de6 <_dtoa_r+0x99e>
 8005d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	dd33      	ble.n	8005de6 <_dtoa_r+0x99e>
 8005d7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d82:	f1b9 0f00 	cmp.w	r9, #0
 8005d86:	d10d      	bne.n	8005da4 <_dtoa_r+0x95c>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	2205      	movs	r2, #5
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 f9d2 	bl	8006138 <__multadd>
 8005d94:	4601      	mov	r1, r0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4658      	mov	r0, fp
 8005d9a:	f000 fbe9 	bl	8006570 <__mcmp>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f73f adb8 	bgt.w	8005914 <_dtoa_r+0x4cc>
 8005da4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005da6:	9f03      	ldr	r7, [sp, #12]
 8005da8:	ea6f 0a03 	mvn.w	sl, r3
 8005dac:	f04f 0800 	mov.w	r8, #0
 8005db0:	4621      	mov	r1, r4
 8005db2:	4628      	mov	r0, r5
 8005db4:	f000 f99e 	bl	80060f4 <_Bfree>
 8005db8:	2e00      	cmp	r6, #0
 8005dba:	f43f aea7 	beq.w	8005b0c <_dtoa_r+0x6c4>
 8005dbe:	f1b8 0f00 	cmp.w	r8, #0
 8005dc2:	d005      	beq.n	8005dd0 <_dtoa_r+0x988>
 8005dc4:	45b0      	cmp	r8, r6
 8005dc6:	d003      	beq.n	8005dd0 <_dtoa_r+0x988>
 8005dc8:	4641      	mov	r1, r8
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f992 	bl	80060f4 <_Bfree>
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 f98e 	bl	80060f4 <_Bfree>
 8005dd8:	e698      	b.n	8005b0c <_dtoa_r+0x6c4>
 8005dda:	2400      	movs	r4, #0
 8005ddc:	4626      	mov	r6, r4
 8005dde:	e7e1      	b.n	8005da4 <_dtoa_r+0x95c>
 8005de0:	46c2      	mov	sl, r8
 8005de2:	4626      	mov	r6, r4
 8005de4:	e596      	b.n	8005914 <_dtoa_r+0x4cc>
 8005de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80fd 	beq.w	8005fec <_dtoa_r+0xba4>
 8005df2:	2f00      	cmp	r7, #0
 8005df4:	dd05      	ble.n	8005e02 <_dtoa_r+0x9ba>
 8005df6:	4631      	mov	r1, r6
 8005df8:	463a      	mov	r2, r7
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fb48 	bl	8006490 <__lshift>
 8005e00:	4606      	mov	r6, r0
 8005e02:	f1b8 0f00 	cmp.w	r8, #0
 8005e06:	d05c      	beq.n	8005ec2 <_dtoa_r+0xa7a>
 8005e08:	4628      	mov	r0, r5
 8005e0a:	6871      	ldr	r1, [r6, #4]
 8005e0c:	f000 f932 	bl	8006074 <_Balloc>
 8005e10:	4607      	mov	r7, r0
 8005e12:	b928      	cbnz	r0, 8005e20 <_dtoa_r+0x9d8>
 8005e14:	4602      	mov	r2, r0
 8005e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e1a:	4b7f      	ldr	r3, [pc, #508]	; (8006018 <_dtoa_r+0xbd0>)
 8005e1c:	f7ff bb28 	b.w	8005470 <_dtoa_r+0x28>
 8005e20:	6932      	ldr	r2, [r6, #16]
 8005e22:	f106 010c 	add.w	r1, r6, #12
 8005e26:	3202      	adds	r2, #2
 8005e28:	0092      	lsls	r2, r2, #2
 8005e2a:	300c      	adds	r0, #12
 8005e2c:	f000 f914 	bl	8006058 <memcpy>
 8005e30:	2201      	movs	r2, #1
 8005e32:	4639      	mov	r1, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 fb2b 	bl	8006490 <__lshift>
 8005e3a:	46b0      	mov	r8, r6
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	9308      	str	r3, [sp, #32]
 8005e44:	9b03      	ldr	r3, [sp, #12]
 8005e46:	444b      	add	r3, r9
 8005e48:	930a      	str	r3, [sp, #40]	; 0x28
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	9309      	str	r3, [sp, #36]	; 0x24
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	4621      	mov	r1, r4
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4658      	mov	r0, fp
 8005e5a:	9304      	str	r3, [sp, #16]
 8005e5c:	f7ff fa66 	bl	800532c <quorem>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4641      	mov	r1, r8
 8005e64:	3330      	adds	r3, #48	; 0x30
 8005e66:	9006      	str	r0, [sp, #24]
 8005e68:	4658      	mov	r0, fp
 8005e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e6c:	f000 fb80 	bl	8006570 <__mcmp>
 8005e70:	4632      	mov	r2, r6
 8005e72:	4681      	mov	r9, r0
 8005e74:	4621      	mov	r1, r4
 8005e76:	4628      	mov	r0, r5
 8005e78:	f000 fb96 	bl	80065a8 <__mdiff>
 8005e7c:	68c2      	ldr	r2, [r0, #12]
 8005e7e:	4607      	mov	r7, r0
 8005e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e82:	bb02      	cbnz	r2, 8005ec6 <_dtoa_r+0xa7e>
 8005e84:	4601      	mov	r1, r0
 8005e86:	4658      	mov	r0, fp
 8005e88:	f000 fb72 	bl	8006570 <__mcmp>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e90:	4639      	mov	r1, r7
 8005e92:	4628      	mov	r0, r5
 8005e94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005e98:	f000 f92c 	bl	80060f4 <_Bfree>
 8005e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ea0:	9f08      	ldr	r7, [sp, #32]
 8005ea2:	ea43 0102 	orr.w	r1, r3, r2
 8005ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	d10d      	bne.n	8005eca <_dtoa_r+0xa82>
 8005eae:	2b39      	cmp	r3, #57	; 0x39
 8005eb0:	d029      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005eb2:	f1b9 0f00 	cmp.w	r9, #0
 8005eb6:	dd01      	ble.n	8005ebc <_dtoa_r+0xa74>
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	3331      	adds	r3, #49	; 0x31
 8005ebc:	9a04      	ldr	r2, [sp, #16]
 8005ebe:	7013      	strb	r3, [r2, #0]
 8005ec0:	e776      	b.n	8005db0 <_dtoa_r+0x968>
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e7b9      	b.n	8005e3a <_dtoa_r+0x9f2>
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	e7e2      	b.n	8005e90 <_dtoa_r+0xa48>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	db06      	blt.n	8005ede <_dtoa_r+0xa96>
 8005ed0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005ed2:	ea41 0909 	orr.w	r9, r1, r9
 8005ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ed8:	ea59 0101 	orrs.w	r1, r9, r1
 8005edc:	d120      	bne.n	8005f20 <_dtoa_r+0xad8>
 8005ede:	2a00      	cmp	r2, #0
 8005ee0:	ddec      	ble.n	8005ebc <_dtoa_r+0xa74>
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	f000 fad1 	bl	8006490 <__lshift>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4683      	mov	fp, r0
 8005ef2:	f000 fb3d 	bl	8006570 <__mcmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	9b08      	ldr	r3, [sp, #32]
 8005efa:	dc02      	bgt.n	8005f02 <_dtoa_r+0xaba>
 8005efc:	d1de      	bne.n	8005ebc <_dtoa_r+0xa74>
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	d5dc      	bpl.n	8005ebc <_dtoa_r+0xa74>
 8005f02:	2b39      	cmp	r3, #57	; 0x39
 8005f04:	d1d8      	bne.n	8005eb8 <_dtoa_r+0xa70>
 8005f06:	2339      	movs	r3, #57	; 0x39
 8005f08:	9a04      	ldr	r2, [sp, #16]
 8005f0a:	7013      	strb	r3, [r2, #0]
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	461f      	mov	r7, r3
 8005f10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	2a39      	cmp	r2, #57	; 0x39
 8005f18:	d050      	beq.n	8005fbc <_dtoa_r+0xb74>
 8005f1a:	3201      	adds	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e747      	b.n	8005db0 <_dtoa_r+0x968>
 8005f20:	2a00      	cmp	r2, #0
 8005f22:	dd03      	ble.n	8005f2c <_dtoa_r+0xae4>
 8005f24:	2b39      	cmp	r3, #57	; 0x39
 8005f26:	d0ee      	beq.n	8005f06 <_dtoa_r+0xabe>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	e7c7      	b.n	8005ebc <_dtoa_r+0xa74>
 8005f2c:	9a08      	ldr	r2, [sp, #32]
 8005f2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f34:	428a      	cmp	r2, r1
 8005f36:	d02a      	beq.n	8005f8e <_dtoa_r+0xb46>
 8005f38:	4659      	mov	r1, fp
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 f8fa 	bl	8006138 <__multadd>
 8005f44:	45b0      	cmp	r8, r6
 8005f46:	4683      	mov	fp, r0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	f04f 020a 	mov.w	r2, #10
 8005f50:	4641      	mov	r1, r8
 8005f52:	4628      	mov	r0, r5
 8005f54:	d107      	bne.n	8005f66 <_dtoa_r+0xb1e>
 8005f56:	f000 f8ef 	bl	8006138 <__multadd>
 8005f5a:	4680      	mov	r8, r0
 8005f5c:	4606      	mov	r6, r0
 8005f5e:	9b08      	ldr	r3, [sp, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	9308      	str	r3, [sp, #32]
 8005f64:	e775      	b.n	8005e52 <_dtoa_r+0xa0a>
 8005f66:	f000 f8e7 	bl	8006138 <__multadd>
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	220a      	movs	r2, #10
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f8e0 	bl	8006138 <__multadd>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	e7f0      	b.n	8005f5e <_dtoa_r+0xb16>
 8005f7c:	f1b9 0f00 	cmp.w	r9, #0
 8005f80:	bfcc      	ite	gt
 8005f82:	464f      	movgt	r7, r9
 8005f84:	2701      	movle	r7, #1
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	9a03      	ldr	r2, [sp, #12]
 8005f8c:	4417      	add	r7, r2
 8005f8e:	4659      	mov	r1, fp
 8005f90:	2201      	movs	r2, #1
 8005f92:	4628      	mov	r0, r5
 8005f94:	9308      	str	r3, [sp, #32]
 8005f96:	f000 fa7b 	bl	8006490 <__lshift>
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	4683      	mov	fp, r0
 8005f9e:	f000 fae7 	bl	8006570 <__mcmp>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	dcb2      	bgt.n	8005f0c <_dtoa_r+0xac4>
 8005fa6:	d102      	bne.n	8005fae <_dtoa_r+0xb66>
 8005fa8:	9b08      	ldr	r3, [sp, #32]
 8005faa:	07db      	lsls	r3, r3, #31
 8005fac:	d4ae      	bmi.n	8005f0c <_dtoa_r+0xac4>
 8005fae:	463b      	mov	r3, r7
 8005fb0:	461f      	mov	r7, r3
 8005fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fb6:	2a30      	cmp	r2, #48	; 0x30
 8005fb8:	d0fa      	beq.n	8005fb0 <_dtoa_r+0xb68>
 8005fba:	e6f9      	b.n	8005db0 <_dtoa_r+0x968>
 8005fbc:	9a03      	ldr	r2, [sp, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d1a5      	bne.n	8005f0e <_dtoa_r+0xac6>
 8005fc2:	2331      	movs	r3, #49	; 0x31
 8005fc4:	f10a 0a01 	add.w	sl, sl, #1
 8005fc8:	e779      	b.n	8005ebe <_dtoa_r+0xa76>
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <_dtoa_r+0xbd4>)
 8005fcc:	f7ff baa8 	b.w	8005520 <_dtoa_r+0xd8>
 8005fd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f aa81 	bne.w	80054da <_dtoa_r+0x92>
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <_dtoa_r+0xbd8>)
 8005fda:	f7ff baa1 	b.w	8005520 <_dtoa_r+0xd8>
 8005fde:	f1b9 0f00 	cmp.w	r9, #0
 8005fe2:	dc03      	bgt.n	8005fec <_dtoa_r+0xba4>
 8005fe4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	f73f aecb 	bgt.w	8005d82 <_dtoa_r+0x93a>
 8005fec:	9f03      	ldr	r7, [sp, #12]
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	f7ff f99b 	bl	800532c <quorem>
 8005ff6:	9a03      	ldr	r2, [sp, #12]
 8005ff8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005ffc:	f807 3b01 	strb.w	r3, [r7], #1
 8006000:	1aba      	subs	r2, r7, r2
 8006002:	4591      	cmp	r9, r2
 8006004:	ddba      	ble.n	8005f7c <_dtoa_r+0xb34>
 8006006:	4659      	mov	r1, fp
 8006008:	2300      	movs	r3, #0
 800600a:	220a      	movs	r2, #10
 800600c:	4628      	mov	r0, r5
 800600e:	f000 f893 	bl	8006138 <__multadd>
 8006012:	4683      	mov	fp, r0
 8006014:	e7eb      	b.n	8005fee <_dtoa_r+0xba6>
 8006016:	bf00      	nop
 8006018:	0800757f 	.word	0x0800757f
 800601c:	080074dc 	.word	0x080074dc
 8006020:	08007500 	.word	0x08007500

08006024 <_localeconv_r>:
 8006024:	4800      	ldr	r0, [pc, #0]	; (8006028 <_localeconv_r+0x4>)
 8006026:	4770      	bx	lr
 8006028:	20000160 	.word	0x20000160

0800602c <malloc>:
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <malloc+0xc>)
 800602e:	4601      	mov	r1, r0
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	f000 bc1d 	b.w	8006870 <_malloc_r>
 8006036:	bf00      	nop
 8006038:	2000000c 	.word	0x2000000c

0800603c <memchr>:
 800603c:	4603      	mov	r3, r0
 800603e:	b510      	push	{r4, lr}
 8006040:	b2c9      	uxtb	r1, r1
 8006042:	4402      	add	r2, r0
 8006044:	4293      	cmp	r3, r2
 8006046:	4618      	mov	r0, r3
 8006048:	d101      	bne.n	800604e <memchr+0x12>
 800604a:	2000      	movs	r0, #0
 800604c:	e003      	b.n	8006056 <memchr+0x1a>
 800604e:	7804      	ldrb	r4, [r0, #0]
 8006050:	3301      	adds	r3, #1
 8006052:	428c      	cmp	r4, r1
 8006054:	d1f6      	bne.n	8006044 <memchr+0x8>
 8006056:	bd10      	pop	{r4, pc}

08006058 <memcpy>:
 8006058:	440a      	add	r2, r1
 800605a:	4291      	cmp	r1, r2
 800605c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006060:	d100      	bne.n	8006064 <memcpy+0xc>
 8006062:	4770      	bx	lr
 8006064:	b510      	push	{r4, lr}
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	4291      	cmp	r1, r2
 800606c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006070:	d1f9      	bne.n	8006066 <memcpy+0xe>
 8006072:	bd10      	pop	{r4, pc}

08006074 <_Balloc>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006078:	4604      	mov	r4, r0
 800607a:	460d      	mov	r5, r1
 800607c:	b976      	cbnz	r6, 800609c <_Balloc+0x28>
 800607e:	2010      	movs	r0, #16
 8006080:	f7ff ffd4 	bl	800602c <malloc>
 8006084:	4602      	mov	r2, r0
 8006086:	6260      	str	r0, [r4, #36]	; 0x24
 8006088:	b920      	cbnz	r0, 8006094 <_Balloc+0x20>
 800608a:	2166      	movs	r1, #102	; 0x66
 800608c:	4b17      	ldr	r3, [pc, #92]	; (80060ec <_Balloc+0x78>)
 800608e:	4818      	ldr	r0, [pc, #96]	; (80060f0 <_Balloc+0x7c>)
 8006090:	f000 fc72 	bl	8006978 <__assert_func>
 8006094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006098:	6006      	str	r6, [r0, #0]
 800609a:	60c6      	str	r6, [r0, #12]
 800609c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800609e:	68f3      	ldr	r3, [r6, #12]
 80060a0:	b183      	cbz	r3, 80060c4 <_Balloc+0x50>
 80060a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060aa:	b9b8      	cbnz	r0, 80060dc <_Balloc+0x68>
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f605 	lsl.w	r6, r1, r5
 80060b2:	1d72      	adds	r2, r6, #5
 80060b4:	4620      	mov	r0, r4
 80060b6:	0092      	lsls	r2, r2, #2
 80060b8:	f000 fb5e 	bl	8006778 <_calloc_r>
 80060bc:	b160      	cbz	r0, 80060d8 <_Balloc+0x64>
 80060be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060c2:	e00e      	b.n	80060e2 <_Balloc+0x6e>
 80060c4:	2221      	movs	r2, #33	; 0x21
 80060c6:	2104      	movs	r1, #4
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fb55 	bl	8006778 <_calloc_r>
 80060ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d0:	60f0      	str	r0, [r6, #12]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e4      	bne.n	80060a2 <_Balloc+0x2e>
 80060d8:	2000      	movs	r0, #0
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	6802      	ldr	r2, [r0, #0]
 80060de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060e2:	2300      	movs	r3, #0
 80060e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060e8:	e7f7      	b.n	80060da <_Balloc+0x66>
 80060ea:	bf00      	nop
 80060ec:	0800750d 	.word	0x0800750d
 80060f0:	08007590 	.word	0x08007590

080060f4 <_Bfree>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060f8:	4605      	mov	r5, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Bfree+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7ff ff94 	bl	800602c <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	6268      	str	r0, [r5, #36]	; 0x24
 8006108:	b920      	cbnz	r0, 8006114 <_Bfree+0x20>
 800610a:	218a      	movs	r1, #138	; 0x8a
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <_Bfree+0x3c>)
 800610e:	4809      	ldr	r0, [pc, #36]	; (8006134 <_Bfree+0x40>)
 8006110:	f000 fc32 	bl	8006978 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	b13c      	cbz	r4, 800612e <_Bfree+0x3a>
 800611e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006120:	6862      	ldr	r2, [r4, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006128:	6021      	str	r1, [r4, #0]
 800612a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	0800750d 	.word	0x0800750d
 8006134:	08007590 	.word	0x08007590

08006138 <__multadd>:
 8006138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613c:	4607      	mov	r7, r0
 800613e:	460c      	mov	r4, r1
 8006140:	461e      	mov	r6, r3
 8006142:	2000      	movs	r0, #0
 8006144:	690d      	ldr	r5, [r1, #16]
 8006146:	f101 0c14 	add.w	ip, r1, #20
 800614a:	f8dc 3000 	ldr.w	r3, [ip]
 800614e:	3001      	adds	r0, #1
 8006150:	b299      	uxth	r1, r3
 8006152:	fb02 6101 	mla	r1, r2, r1, r6
 8006156:	0c1e      	lsrs	r6, r3, #16
 8006158:	0c0b      	lsrs	r3, r1, #16
 800615a:	fb02 3306 	mla	r3, r2, r6, r3
 800615e:	b289      	uxth	r1, r1
 8006160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006164:	4285      	cmp	r5, r0
 8006166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800616a:	f84c 1b04 	str.w	r1, [ip], #4
 800616e:	dcec      	bgt.n	800614a <__multadd+0x12>
 8006170:	b30e      	cbz	r6, 80061b6 <__multadd+0x7e>
 8006172:	68a3      	ldr	r3, [r4, #8]
 8006174:	42ab      	cmp	r3, r5
 8006176:	dc19      	bgt.n	80061ac <__multadd+0x74>
 8006178:	6861      	ldr	r1, [r4, #4]
 800617a:	4638      	mov	r0, r7
 800617c:	3101      	adds	r1, #1
 800617e:	f7ff ff79 	bl	8006074 <_Balloc>
 8006182:	4680      	mov	r8, r0
 8006184:	b928      	cbnz	r0, 8006192 <__multadd+0x5a>
 8006186:	4602      	mov	r2, r0
 8006188:	21b5      	movs	r1, #181	; 0xb5
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <__multadd+0x84>)
 800618c:	480c      	ldr	r0, [pc, #48]	; (80061c0 <__multadd+0x88>)
 800618e:	f000 fbf3 	bl	8006978 <__assert_func>
 8006192:	6922      	ldr	r2, [r4, #16]
 8006194:	f104 010c 	add.w	r1, r4, #12
 8006198:	3202      	adds	r2, #2
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	300c      	adds	r0, #12
 800619e:	f7ff ff5b 	bl	8006058 <memcpy>
 80061a2:	4621      	mov	r1, r4
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff ffa5 	bl	80060f4 <_Bfree>
 80061aa:	4644      	mov	r4, r8
 80061ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061b0:	3501      	adds	r5, #1
 80061b2:	615e      	str	r6, [r3, #20]
 80061b4:	6125      	str	r5, [r4, #16]
 80061b6:	4620      	mov	r0, r4
 80061b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061bc:	0800757f 	.word	0x0800757f
 80061c0:	08007590 	.word	0x08007590

080061c4 <__hi0bits>:
 80061c4:	0c02      	lsrs	r2, r0, #16
 80061c6:	0412      	lsls	r2, r2, #16
 80061c8:	4603      	mov	r3, r0
 80061ca:	b9ca      	cbnz	r2, 8006200 <__hi0bits+0x3c>
 80061cc:	0403      	lsls	r3, r0, #16
 80061ce:	2010      	movs	r0, #16
 80061d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061d4:	bf04      	itt	eq
 80061d6:	021b      	lsleq	r3, r3, #8
 80061d8:	3008      	addeq	r0, #8
 80061da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061de:	bf04      	itt	eq
 80061e0:	011b      	lsleq	r3, r3, #4
 80061e2:	3004      	addeq	r0, #4
 80061e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061e8:	bf04      	itt	eq
 80061ea:	009b      	lsleq	r3, r3, #2
 80061ec:	3002      	addeq	r0, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	db05      	blt.n	80061fe <__hi0bits+0x3a>
 80061f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061f6:	f100 0001 	add.w	r0, r0, #1
 80061fa:	bf08      	it	eq
 80061fc:	2020      	moveq	r0, #32
 80061fe:	4770      	bx	lr
 8006200:	2000      	movs	r0, #0
 8006202:	e7e5      	b.n	80061d0 <__hi0bits+0xc>

08006204 <__lo0bits>:
 8006204:	6803      	ldr	r3, [r0, #0]
 8006206:	4602      	mov	r2, r0
 8006208:	f013 0007 	ands.w	r0, r3, #7
 800620c:	d00b      	beq.n	8006226 <__lo0bits+0x22>
 800620e:	07d9      	lsls	r1, r3, #31
 8006210:	d421      	bmi.n	8006256 <__lo0bits+0x52>
 8006212:	0798      	lsls	r0, r3, #30
 8006214:	bf49      	itett	mi
 8006216:	085b      	lsrmi	r3, r3, #1
 8006218:	089b      	lsrpl	r3, r3, #2
 800621a:	2001      	movmi	r0, #1
 800621c:	6013      	strmi	r3, [r2, #0]
 800621e:	bf5c      	itt	pl
 8006220:	2002      	movpl	r0, #2
 8006222:	6013      	strpl	r3, [r2, #0]
 8006224:	4770      	bx	lr
 8006226:	b299      	uxth	r1, r3
 8006228:	b909      	cbnz	r1, 800622e <__lo0bits+0x2a>
 800622a:	2010      	movs	r0, #16
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	b2d9      	uxtb	r1, r3
 8006230:	b909      	cbnz	r1, 8006236 <__lo0bits+0x32>
 8006232:	3008      	adds	r0, #8
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	0719      	lsls	r1, r3, #28
 8006238:	bf04      	itt	eq
 800623a:	091b      	lsreq	r3, r3, #4
 800623c:	3004      	addeq	r0, #4
 800623e:	0799      	lsls	r1, r3, #30
 8006240:	bf04      	itt	eq
 8006242:	089b      	lsreq	r3, r3, #2
 8006244:	3002      	addeq	r0, #2
 8006246:	07d9      	lsls	r1, r3, #31
 8006248:	d403      	bmi.n	8006252 <__lo0bits+0x4e>
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f100 0001 	add.w	r0, r0, #1
 8006250:	d003      	beq.n	800625a <__lo0bits+0x56>
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	4770      	bx	lr
 8006256:	2000      	movs	r0, #0
 8006258:	4770      	bx	lr
 800625a:	2020      	movs	r0, #32
 800625c:	4770      	bx	lr
	...

08006260 <__i2b>:
 8006260:	b510      	push	{r4, lr}
 8006262:	460c      	mov	r4, r1
 8006264:	2101      	movs	r1, #1
 8006266:	f7ff ff05 	bl	8006074 <_Balloc>
 800626a:	4602      	mov	r2, r0
 800626c:	b928      	cbnz	r0, 800627a <__i2b+0x1a>
 800626e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006272:	4b04      	ldr	r3, [pc, #16]	; (8006284 <__i2b+0x24>)
 8006274:	4804      	ldr	r0, [pc, #16]	; (8006288 <__i2b+0x28>)
 8006276:	f000 fb7f 	bl	8006978 <__assert_func>
 800627a:	2301      	movs	r3, #1
 800627c:	6144      	str	r4, [r0, #20]
 800627e:	6103      	str	r3, [r0, #16]
 8006280:	bd10      	pop	{r4, pc}
 8006282:	bf00      	nop
 8006284:	0800757f 	.word	0x0800757f
 8006288:	08007590 	.word	0x08007590

0800628c <__multiply>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	4691      	mov	r9, r2
 8006292:	690a      	ldr	r2, [r1, #16]
 8006294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006298:	460c      	mov	r4, r1
 800629a:	429a      	cmp	r2, r3
 800629c:	bfbe      	ittt	lt
 800629e:	460b      	movlt	r3, r1
 80062a0:	464c      	movlt	r4, r9
 80062a2:	4699      	movlt	r9, r3
 80062a4:	6927      	ldr	r7, [r4, #16]
 80062a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	eb07 060a 	add.w	r6, r7, sl
 80062b2:	42b3      	cmp	r3, r6
 80062b4:	b085      	sub	sp, #20
 80062b6:	bfb8      	it	lt
 80062b8:	3101      	addlt	r1, #1
 80062ba:	f7ff fedb 	bl	8006074 <_Balloc>
 80062be:	b930      	cbnz	r0, 80062ce <__multiply+0x42>
 80062c0:	4602      	mov	r2, r0
 80062c2:	f240 115d 	movw	r1, #349	; 0x15d
 80062c6:	4b43      	ldr	r3, [pc, #268]	; (80063d4 <__multiply+0x148>)
 80062c8:	4843      	ldr	r0, [pc, #268]	; (80063d8 <__multiply+0x14c>)
 80062ca:	f000 fb55 	bl	8006978 <__assert_func>
 80062ce:	f100 0514 	add.w	r5, r0, #20
 80062d2:	462b      	mov	r3, r5
 80062d4:	2200      	movs	r2, #0
 80062d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062da:	4543      	cmp	r3, r8
 80062dc:	d321      	bcc.n	8006322 <__multiply+0x96>
 80062de:	f104 0314 	add.w	r3, r4, #20
 80062e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062e6:	f109 0314 	add.w	r3, r9, #20
 80062ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062ee:	9202      	str	r2, [sp, #8]
 80062f0:	1b3a      	subs	r2, r7, r4
 80062f2:	3a15      	subs	r2, #21
 80062f4:	f022 0203 	bic.w	r2, r2, #3
 80062f8:	3204      	adds	r2, #4
 80062fa:	f104 0115 	add.w	r1, r4, #21
 80062fe:	428f      	cmp	r7, r1
 8006300:	bf38      	it	cc
 8006302:	2204      	movcc	r2, #4
 8006304:	9201      	str	r2, [sp, #4]
 8006306:	9a02      	ldr	r2, [sp, #8]
 8006308:	9303      	str	r3, [sp, #12]
 800630a:	429a      	cmp	r2, r3
 800630c:	d80c      	bhi.n	8006328 <__multiply+0x9c>
 800630e:	2e00      	cmp	r6, #0
 8006310:	dd03      	ble.n	800631a <__multiply+0x8e>
 8006312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006316:	2b00      	cmp	r3, #0
 8006318:	d059      	beq.n	80063ce <__multiply+0x142>
 800631a:	6106      	str	r6, [r0, #16]
 800631c:	b005      	add	sp, #20
 800631e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006322:	f843 2b04 	str.w	r2, [r3], #4
 8006326:	e7d8      	b.n	80062da <__multiply+0x4e>
 8006328:	f8b3 a000 	ldrh.w	sl, [r3]
 800632c:	f1ba 0f00 	cmp.w	sl, #0
 8006330:	d023      	beq.n	800637a <__multiply+0xee>
 8006332:	46a9      	mov	r9, r5
 8006334:	f04f 0c00 	mov.w	ip, #0
 8006338:	f104 0e14 	add.w	lr, r4, #20
 800633c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006340:	f8d9 1000 	ldr.w	r1, [r9]
 8006344:	fa1f fb82 	uxth.w	fp, r2
 8006348:	b289      	uxth	r1, r1
 800634a:	fb0a 110b 	mla	r1, sl, fp, r1
 800634e:	4461      	add	r1, ip
 8006350:	f8d9 c000 	ldr.w	ip, [r9]
 8006354:	0c12      	lsrs	r2, r2, #16
 8006356:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800635a:	fb0a c202 	mla	r2, sl, r2, ip
 800635e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006362:	b289      	uxth	r1, r1
 8006364:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006368:	4577      	cmp	r7, lr
 800636a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800636e:	f849 1b04 	str.w	r1, [r9], #4
 8006372:	d8e3      	bhi.n	800633c <__multiply+0xb0>
 8006374:	9a01      	ldr	r2, [sp, #4]
 8006376:	f845 c002 	str.w	ip, [r5, r2]
 800637a:	9a03      	ldr	r2, [sp, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006382:	f1b9 0f00 	cmp.w	r9, #0
 8006386:	d020      	beq.n	80063ca <__multiply+0x13e>
 8006388:	46ae      	mov	lr, r5
 800638a:	f04f 0a00 	mov.w	sl, #0
 800638e:	6829      	ldr	r1, [r5, #0]
 8006390:	f104 0c14 	add.w	ip, r4, #20
 8006394:	f8bc b000 	ldrh.w	fp, [ip]
 8006398:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800639c:	b289      	uxth	r1, r1
 800639e:	fb09 220b 	mla	r2, r9, fp, r2
 80063a2:	4492      	add	sl, r2
 80063a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063a8:	f84e 1b04 	str.w	r1, [lr], #4
 80063ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063b0:	f8be 1000 	ldrh.w	r1, [lr]
 80063b4:	0c12      	lsrs	r2, r2, #16
 80063b6:	fb09 1102 	mla	r1, r9, r2, r1
 80063ba:	4567      	cmp	r7, ip
 80063bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063c4:	d8e6      	bhi.n	8006394 <__multiply+0x108>
 80063c6:	9a01      	ldr	r2, [sp, #4]
 80063c8:	50a9      	str	r1, [r5, r2]
 80063ca:	3504      	adds	r5, #4
 80063cc:	e79b      	b.n	8006306 <__multiply+0x7a>
 80063ce:	3e01      	subs	r6, #1
 80063d0:	e79d      	b.n	800630e <__multiply+0x82>
 80063d2:	bf00      	nop
 80063d4:	0800757f 	.word	0x0800757f
 80063d8:	08007590 	.word	0x08007590

080063dc <__pow5mult>:
 80063dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063e0:	4615      	mov	r5, r2
 80063e2:	f012 0203 	ands.w	r2, r2, #3
 80063e6:	4606      	mov	r6, r0
 80063e8:	460f      	mov	r7, r1
 80063ea:	d007      	beq.n	80063fc <__pow5mult+0x20>
 80063ec:	4c25      	ldr	r4, [pc, #148]	; (8006484 <__pow5mult+0xa8>)
 80063ee:	3a01      	subs	r2, #1
 80063f0:	2300      	movs	r3, #0
 80063f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063f6:	f7ff fe9f 	bl	8006138 <__multadd>
 80063fa:	4607      	mov	r7, r0
 80063fc:	10ad      	asrs	r5, r5, #2
 80063fe:	d03d      	beq.n	800647c <__pow5mult+0xa0>
 8006400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006402:	b97c      	cbnz	r4, 8006424 <__pow5mult+0x48>
 8006404:	2010      	movs	r0, #16
 8006406:	f7ff fe11 	bl	800602c <malloc>
 800640a:	4602      	mov	r2, r0
 800640c:	6270      	str	r0, [r6, #36]	; 0x24
 800640e:	b928      	cbnz	r0, 800641c <__pow5mult+0x40>
 8006410:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006414:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <__pow5mult+0xac>)
 8006416:	481d      	ldr	r0, [pc, #116]	; (800648c <__pow5mult+0xb0>)
 8006418:	f000 faae 	bl	8006978 <__assert_func>
 800641c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006420:	6004      	str	r4, [r0, #0]
 8006422:	60c4      	str	r4, [r0, #12]
 8006424:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006428:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800642c:	b94c      	cbnz	r4, 8006442 <__pow5mult+0x66>
 800642e:	f240 2171 	movw	r1, #625	; 0x271
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff ff14 	bl	8006260 <__i2b>
 8006438:	2300      	movs	r3, #0
 800643a:	4604      	mov	r4, r0
 800643c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006440:	6003      	str	r3, [r0, #0]
 8006442:	f04f 0900 	mov.w	r9, #0
 8006446:	07eb      	lsls	r3, r5, #31
 8006448:	d50a      	bpl.n	8006460 <__pow5mult+0x84>
 800644a:	4639      	mov	r1, r7
 800644c:	4622      	mov	r2, r4
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ff1c 	bl	800628c <__multiply>
 8006454:	4680      	mov	r8, r0
 8006456:	4639      	mov	r1, r7
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff fe4b 	bl	80060f4 <_Bfree>
 800645e:	4647      	mov	r7, r8
 8006460:	106d      	asrs	r5, r5, #1
 8006462:	d00b      	beq.n	800647c <__pow5mult+0xa0>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	b938      	cbnz	r0, 8006478 <__pow5mult+0x9c>
 8006468:	4622      	mov	r2, r4
 800646a:	4621      	mov	r1, r4
 800646c:	4630      	mov	r0, r6
 800646e:	f7ff ff0d 	bl	800628c <__multiply>
 8006472:	6020      	str	r0, [r4, #0]
 8006474:	f8c0 9000 	str.w	r9, [r0]
 8006478:	4604      	mov	r4, r0
 800647a:	e7e4      	b.n	8006446 <__pow5mult+0x6a>
 800647c:	4638      	mov	r0, r7
 800647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006482:	bf00      	nop
 8006484:	080076e0 	.word	0x080076e0
 8006488:	0800750d 	.word	0x0800750d
 800648c:	08007590 	.word	0x08007590

08006490 <__lshift>:
 8006490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	4607      	mov	r7, r0
 8006498:	4691      	mov	r9, r2
 800649a:	6923      	ldr	r3, [r4, #16]
 800649c:	6849      	ldr	r1, [r1, #4]
 800649e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064a8:	f108 0601 	add.w	r6, r8, #1
 80064ac:	42b3      	cmp	r3, r6
 80064ae:	db0b      	blt.n	80064c8 <__lshift+0x38>
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff fddf 	bl	8006074 <_Balloc>
 80064b6:	4605      	mov	r5, r0
 80064b8:	b948      	cbnz	r0, 80064ce <__lshift+0x3e>
 80064ba:	4602      	mov	r2, r0
 80064bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064c0:	4b29      	ldr	r3, [pc, #164]	; (8006568 <__lshift+0xd8>)
 80064c2:	482a      	ldr	r0, [pc, #168]	; (800656c <__lshift+0xdc>)
 80064c4:	f000 fa58 	bl	8006978 <__assert_func>
 80064c8:	3101      	adds	r1, #1
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	e7ee      	b.n	80064ac <__lshift+0x1c>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f100 0114 	add.w	r1, r0, #20
 80064d4:	f100 0210 	add.w	r2, r0, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	4553      	cmp	r3, sl
 80064dc:	db37      	blt.n	800654e <__lshift+0xbe>
 80064de:	6920      	ldr	r0, [r4, #16]
 80064e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064e4:	f104 0314 	add.w	r3, r4, #20
 80064e8:	f019 091f 	ands.w	r9, r9, #31
 80064ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064f4:	d02f      	beq.n	8006556 <__lshift+0xc6>
 80064f6:	468a      	mov	sl, r1
 80064f8:	f04f 0c00 	mov.w	ip, #0
 80064fc:	f1c9 0e20 	rsb	lr, r9, #32
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	fa02 f209 	lsl.w	r2, r2, r9
 8006506:	ea42 020c 	orr.w	r2, r2, ip
 800650a:	f84a 2b04 	str.w	r2, [sl], #4
 800650e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006512:	4298      	cmp	r0, r3
 8006514:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006518:	d8f2      	bhi.n	8006500 <__lshift+0x70>
 800651a:	1b03      	subs	r3, r0, r4
 800651c:	3b15      	subs	r3, #21
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	3304      	adds	r3, #4
 8006524:	f104 0215 	add.w	r2, r4, #21
 8006528:	4290      	cmp	r0, r2
 800652a:	bf38      	it	cc
 800652c:	2304      	movcc	r3, #4
 800652e:	f841 c003 	str.w	ip, [r1, r3]
 8006532:	f1bc 0f00 	cmp.w	ip, #0
 8006536:	d001      	beq.n	800653c <__lshift+0xac>
 8006538:	f108 0602 	add.w	r6, r8, #2
 800653c:	3e01      	subs	r6, #1
 800653e:	4638      	mov	r0, r7
 8006540:	4621      	mov	r1, r4
 8006542:	612e      	str	r6, [r5, #16]
 8006544:	f7ff fdd6 	bl	80060f4 <_Bfree>
 8006548:	4628      	mov	r0, r5
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006552:	3301      	adds	r3, #1
 8006554:	e7c1      	b.n	80064da <__lshift+0x4a>
 8006556:	3904      	subs	r1, #4
 8006558:	f853 2b04 	ldr.w	r2, [r3], #4
 800655c:	4298      	cmp	r0, r3
 800655e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006562:	d8f9      	bhi.n	8006558 <__lshift+0xc8>
 8006564:	e7ea      	b.n	800653c <__lshift+0xac>
 8006566:	bf00      	nop
 8006568:	0800757f 	.word	0x0800757f
 800656c:	08007590 	.word	0x08007590

08006570 <__mcmp>:
 8006570:	4603      	mov	r3, r0
 8006572:	690a      	ldr	r2, [r1, #16]
 8006574:	6900      	ldr	r0, [r0, #16]
 8006576:	b530      	push	{r4, r5, lr}
 8006578:	1a80      	subs	r0, r0, r2
 800657a:	d10d      	bne.n	8006598 <__mcmp+0x28>
 800657c:	3314      	adds	r3, #20
 800657e:	3114      	adds	r1, #20
 8006580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800658c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006590:	4295      	cmp	r5, r2
 8006592:	d002      	beq.n	800659a <__mcmp+0x2a>
 8006594:	d304      	bcc.n	80065a0 <__mcmp+0x30>
 8006596:	2001      	movs	r0, #1
 8006598:	bd30      	pop	{r4, r5, pc}
 800659a:	42a3      	cmp	r3, r4
 800659c:	d3f4      	bcc.n	8006588 <__mcmp+0x18>
 800659e:	e7fb      	b.n	8006598 <__mcmp+0x28>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	e7f8      	b.n	8006598 <__mcmp+0x28>
	...

080065a8 <__mdiff>:
 80065a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ac:	460d      	mov	r5, r1
 80065ae:	4607      	mov	r7, r0
 80065b0:	4611      	mov	r1, r2
 80065b2:	4628      	mov	r0, r5
 80065b4:	4614      	mov	r4, r2
 80065b6:	f7ff ffdb 	bl	8006570 <__mcmp>
 80065ba:	1e06      	subs	r6, r0, #0
 80065bc:	d111      	bne.n	80065e2 <__mdiff+0x3a>
 80065be:	4631      	mov	r1, r6
 80065c0:	4638      	mov	r0, r7
 80065c2:	f7ff fd57 	bl	8006074 <_Balloc>
 80065c6:	4602      	mov	r2, r0
 80065c8:	b928      	cbnz	r0, 80065d6 <__mdiff+0x2e>
 80065ca:	f240 2132 	movw	r1, #562	; 0x232
 80065ce:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <__mdiff+0x110>)
 80065d0:	483a      	ldr	r0, [pc, #232]	; (80066bc <__mdiff+0x114>)
 80065d2:	f000 f9d1 	bl	8006978 <__assert_func>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065dc:	4610      	mov	r0, r2
 80065de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	bfa4      	itt	ge
 80065e4:	4623      	movge	r3, r4
 80065e6:	462c      	movge	r4, r5
 80065e8:	4638      	mov	r0, r7
 80065ea:	6861      	ldr	r1, [r4, #4]
 80065ec:	bfa6      	itte	ge
 80065ee:	461d      	movge	r5, r3
 80065f0:	2600      	movge	r6, #0
 80065f2:	2601      	movlt	r6, #1
 80065f4:	f7ff fd3e 	bl	8006074 <_Balloc>
 80065f8:	4602      	mov	r2, r0
 80065fa:	b918      	cbnz	r0, 8006604 <__mdiff+0x5c>
 80065fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <__mdiff+0x110>)
 8006602:	e7e5      	b.n	80065d0 <__mdiff+0x28>
 8006604:	f102 0814 	add.w	r8, r2, #20
 8006608:	46c2      	mov	sl, r8
 800660a:	f04f 0c00 	mov.w	ip, #0
 800660e:	6927      	ldr	r7, [r4, #16]
 8006610:	60c6      	str	r6, [r0, #12]
 8006612:	692e      	ldr	r6, [r5, #16]
 8006614:	f104 0014 	add.w	r0, r4, #20
 8006618:	f105 0914 	add.w	r9, r5, #20
 800661c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006624:	3410      	adds	r4, #16
 8006626:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800662a:	f859 3b04 	ldr.w	r3, [r9], #4
 800662e:	fa1f f18b 	uxth.w	r1, fp
 8006632:	448c      	add	ip, r1
 8006634:	b299      	uxth	r1, r3
 8006636:	0c1b      	lsrs	r3, r3, #16
 8006638:	ebac 0101 	sub.w	r1, ip, r1
 800663c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006640:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006644:	b289      	uxth	r1, r1
 8006646:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800664a:	454e      	cmp	r6, r9
 800664c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006650:	f84a 3b04 	str.w	r3, [sl], #4
 8006654:	d8e7      	bhi.n	8006626 <__mdiff+0x7e>
 8006656:	1b73      	subs	r3, r6, r5
 8006658:	3b15      	subs	r3, #21
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	3515      	adds	r5, #21
 8006660:	3304      	adds	r3, #4
 8006662:	42ae      	cmp	r6, r5
 8006664:	bf38      	it	cc
 8006666:	2304      	movcc	r3, #4
 8006668:	4418      	add	r0, r3
 800666a:	4443      	add	r3, r8
 800666c:	461e      	mov	r6, r3
 800666e:	4605      	mov	r5, r0
 8006670:	4575      	cmp	r5, lr
 8006672:	d30e      	bcc.n	8006692 <__mdiff+0xea>
 8006674:	f10e 0103 	add.w	r1, lr, #3
 8006678:	1a09      	subs	r1, r1, r0
 800667a:	f021 0103 	bic.w	r1, r1, #3
 800667e:	3803      	subs	r0, #3
 8006680:	4586      	cmp	lr, r0
 8006682:	bf38      	it	cc
 8006684:	2100      	movcc	r1, #0
 8006686:	4419      	add	r1, r3
 8006688:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800668c:	b18b      	cbz	r3, 80066b2 <__mdiff+0x10a>
 800668e:	6117      	str	r7, [r2, #16]
 8006690:	e7a4      	b.n	80065dc <__mdiff+0x34>
 8006692:	f855 8b04 	ldr.w	r8, [r5], #4
 8006696:	fa1f f188 	uxth.w	r1, r8
 800669a:	4461      	add	r1, ip
 800669c:	140c      	asrs	r4, r1, #16
 800669e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066a2:	b289      	uxth	r1, r1
 80066a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80066ac:	f846 1b04 	str.w	r1, [r6], #4
 80066b0:	e7de      	b.n	8006670 <__mdiff+0xc8>
 80066b2:	3f01      	subs	r7, #1
 80066b4:	e7e8      	b.n	8006688 <__mdiff+0xe0>
 80066b6:	bf00      	nop
 80066b8:	0800757f 	.word	0x0800757f
 80066bc:	08007590 	.word	0x08007590

080066c0 <__d2b>:
 80066c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066c4:	2101      	movs	r1, #1
 80066c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066ca:	4690      	mov	r8, r2
 80066cc:	461d      	mov	r5, r3
 80066ce:	f7ff fcd1 	bl	8006074 <_Balloc>
 80066d2:	4604      	mov	r4, r0
 80066d4:	b930      	cbnz	r0, 80066e4 <__d2b+0x24>
 80066d6:	4602      	mov	r2, r0
 80066d8:	f240 310a 	movw	r1, #778	; 0x30a
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <__d2b+0xb0>)
 80066de:	4825      	ldr	r0, [pc, #148]	; (8006774 <__d2b+0xb4>)
 80066e0:	f000 f94a 	bl	8006978 <__assert_func>
 80066e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80066ec:	bb2d      	cbnz	r5, 800673a <__d2b+0x7a>
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f1b8 0300 	subs.w	r3, r8, #0
 80066f4:	d026      	beq.n	8006744 <__d2b+0x84>
 80066f6:	4668      	mov	r0, sp
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	f7ff fd83 	bl	8006204 <__lo0bits>
 80066fe:	9900      	ldr	r1, [sp, #0]
 8006700:	b1f0      	cbz	r0, 8006740 <__d2b+0x80>
 8006702:	9a01      	ldr	r2, [sp, #4]
 8006704:	f1c0 0320 	rsb	r3, r0, #32
 8006708:	fa02 f303 	lsl.w	r3, r2, r3
 800670c:	430b      	orrs	r3, r1
 800670e:	40c2      	lsrs	r2, r0
 8006710:	6163      	str	r3, [r4, #20]
 8006712:	9201      	str	r2, [sp, #4]
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bf14      	ite	ne
 800671a:	2102      	movne	r1, #2
 800671c:	2101      	moveq	r1, #1
 800671e:	61a3      	str	r3, [r4, #24]
 8006720:	6121      	str	r1, [r4, #16]
 8006722:	b1c5      	cbz	r5, 8006756 <__d2b+0x96>
 8006724:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006728:	4405      	add	r5, r0
 800672a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800672e:	603d      	str	r5, [r7, #0]
 8006730:	6030      	str	r0, [r6, #0]
 8006732:	4620      	mov	r0, r4
 8006734:	b002      	add	sp, #8
 8006736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800673a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800673e:	e7d6      	b.n	80066ee <__d2b+0x2e>
 8006740:	6161      	str	r1, [r4, #20]
 8006742:	e7e7      	b.n	8006714 <__d2b+0x54>
 8006744:	a801      	add	r0, sp, #4
 8006746:	f7ff fd5d 	bl	8006204 <__lo0bits>
 800674a:	2101      	movs	r1, #1
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	6121      	str	r1, [r4, #16]
 8006750:	6163      	str	r3, [r4, #20]
 8006752:	3020      	adds	r0, #32
 8006754:	e7e5      	b.n	8006722 <__d2b+0x62>
 8006756:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800675a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800675e:	6038      	str	r0, [r7, #0]
 8006760:	6918      	ldr	r0, [r3, #16]
 8006762:	f7ff fd2f 	bl	80061c4 <__hi0bits>
 8006766:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800676a:	6031      	str	r1, [r6, #0]
 800676c:	e7e1      	b.n	8006732 <__d2b+0x72>
 800676e:	bf00      	nop
 8006770:	0800757f 	.word	0x0800757f
 8006774:	08007590 	.word	0x08007590

08006778 <_calloc_r>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	fba1 5402 	umull	r5, r4, r1, r2
 800677e:	b934      	cbnz	r4, 800678e <_calloc_r+0x16>
 8006780:	4629      	mov	r1, r5
 8006782:	f000 f875 	bl	8006870 <_malloc_r>
 8006786:	4606      	mov	r6, r0
 8006788:	b928      	cbnz	r0, 8006796 <_calloc_r+0x1e>
 800678a:	4630      	mov	r0, r6
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	220c      	movs	r2, #12
 8006790:	2600      	movs	r6, #0
 8006792:	6002      	str	r2, [r0, #0]
 8006794:	e7f9      	b.n	800678a <_calloc_r+0x12>
 8006796:	462a      	mov	r2, r5
 8006798:	4621      	mov	r1, r4
 800679a:	f7fe f95f 	bl	8004a5c <memset>
 800679e:	e7f4      	b.n	800678a <_calloc_r+0x12>

080067a0 <_free_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4605      	mov	r5, r0
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d040      	beq.n	800682a <_free_r+0x8a>
 80067a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067ac:	1f0c      	subs	r4, r1, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	18e4      	addlt	r4, r4, r3
 80067b4:	f000 f922 	bl	80069fc <__malloc_lock>
 80067b8:	4a1c      	ldr	r2, [pc, #112]	; (800682c <_free_r+0x8c>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	b933      	cbnz	r3, 80067cc <_free_r+0x2c>
 80067be:	6063      	str	r3, [r4, #4]
 80067c0:	6014      	str	r4, [r2, #0]
 80067c2:	4628      	mov	r0, r5
 80067c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c8:	f000 b91e 	b.w	8006a08 <__malloc_unlock>
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	bf01      	itttt	eq
 80067d8:	6819      	ldreq	r1, [r3, #0]
 80067da:	685b      	ldreq	r3, [r3, #4]
 80067dc:	1809      	addeq	r1, r1, r0
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	e7ed      	b.n	80067be <_free_r+0x1e>
 80067e2:	461a      	mov	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b10b      	cbz	r3, 80067ec <_free_r+0x4c>
 80067e8:	42a3      	cmp	r3, r4
 80067ea:	d9fa      	bls.n	80067e2 <_free_r+0x42>
 80067ec:	6811      	ldr	r1, [r2, #0]
 80067ee:	1850      	adds	r0, r2, r1
 80067f0:	42a0      	cmp	r0, r4
 80067f2:	d10b      	bne.n	800680c <_free_r+0x6c>
 80067f4:	6820      	ldr	r0, [r4, #0]
 80067f6:	4401      	add	r1, r0
 80067f8:	1850      	adds	r0, r2, r1
 80067fa:	4283      	cmp	r3, r0
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	d1e0      	bne.n	80067c2 <_free_r+0x22>
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4401      	add	r1, r0
 8006806:	6011      	str	r1, [r2, #0]
 8006808:	6053      	str	r3, [r2, #4]
 800680a:	e7da      	b.n	80067c2 <_free_r+0x22>
 800680c:	d902      	bls.n	8006814 <_free_r+0x74>
 800680e:	230c      	movs	r3, #12
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	e7d6      	b.n	80067c2 <_free_r+0x22>
 8006814:	6820      	ldr	r0, [r4, #0]
 8006816:	1821      	adds	r1, r4, r0
 8006818:	428b      	cmp	r3, r1
 800681a:	bf01      	itttt	eq
 800681c:	6819      	ldreq	r1, [r3, #0]
 800681e:	685b      	ldreq	r3, [r3, #4]
 8006820:	1809      	addeq	r1, r1, r0
 8006822:	6021      	streq	r1, [r4, #0]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6054      	str	r4, [r2, #4]
 8006828:	e7cb      	b.n	80067c2 <_free_r+0x22>
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2000030c 	.word	0x2000030c

08006830 <sbrk_aligned>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	4e0e      	ldr	r6, [pc, #56]	; (800686c <sbrk_aligned+0x3c>)
 8006834:	460c      	mov	r4, r1
 8006836:	6831      	ldr	r1, [r6, #0]
 8006838:	4605      	mov	r5, r0
 800683a:	b911      	cbnz	r1, 8006842 <sbrk_aligned+0x12>
 800683c:	f000 f88c 	bl	8006958 <_sbrk_r>
 8006840:	6030      	str	r0, [r6, #0]
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f887 	bl	8006958 <_sbrk_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d00a      	beq.n	8006864 <sbrk_aligned+0x34>
 800684e:	1cc4      	adds	r4, r0, #3
 8006850:	f024 0403 	bic.w	r4, r4, #3
 8006854:	42a0      	cmp	r0, r4
 8006856:	d007      	beq.n	8006868 <sbrk_aligned+0x38>
 8006858:	1a21      	subs	r1, r4, r0
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f87c 	bl	8006958 <_sbrk_r>
 8006860:	3001      	adds	r0, #1
 8006862:	d101      	bne.n	8006868 <sbrk_aligned+0x38>
 8006864:	f04f 34ff 	mov.w	r4, #4294967295
 8006868:	4620      	mov	r0, r4
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	20000310 	.word	0x20000310

08006870 <_malloc_r>:
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	1ccd      	adds	r5, r1, #3
 8006876:	f025 0503 	bic.w	r5, r5, #3
 800687a:	3508      	adds	r5, #8
 800687c:	2d0c      	cmp	r5, #12
 800687e:	bf38      	it	cc
 8006880:	250c      	movcc	r5, #12
 8006882:	2d00      	cmp	r5, #0
 8006884:	4607      	mov	r7, r0
 8006886:	db01      	blt.n	800688c <_malloc_r+0x1c>
 8006888:	42a9      	cmp	r1, r5
 800688a:	d905      	bls.n	8006898 <_malloc_r+0x28>
 800688c:	230c      	movs	r3, #12
 800688e:	2600      	movs	r6, #0
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4630      	mov	r0, r6
 8006894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006898:	4e2e      	ldr	r6, [pc, #184]	; (8006954 <_malloc_r+0xe4>)
 800689a:	f000 f8af 	bl	80069fc <__malloc_lock>
 800689e:	6833      	ldr	r3, [r6, #0]
 80068a0:	461c      	mov	r4, r3
 80068a2:	bb34      	cbnz	r4, 80068f2 <_malloc_r+0x82>
 80068a4:	4629      	mov	r1, r5
 80068a6:	4638      	mov	r0, r7
 80068a8:	f7ff ffc2 	bl	8006830 <sbrk_aligned>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	4604      	mov	r4, r0
 80068b0:	d14d      	bne.n	800694e <_malloc_r+0xde>
 80068b2:	6834      	ldr	r4, [r6, #0]
 80068b4:	4626      	mov	r6, r4
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d140      	bne.n	800693c <_malloc_r+0xcc>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	4631      	mov	r1, r6
 80068be:	4638      	mov	r0, r7
 80068c0:	eb04 0803 	add.w	r8, r4, r3
 80068c4:	f000 f848 	bl	8006958 <_sbrk_r>
 80068c8:	4580      	cmp	r8, r0
 80068ca:	d13a      	bne.n	8006942 <_malloc_r+0xd2>
 80068cc:	6821      	ldr	r1, [r4, #0]
 80068ce:	3503      	adds	r5, #3
 80068d0:	1a6d      	subs	r5, r5, r1
 80068d2:	f025 0503 	bic.w	r5, r5, #3
 80068d6:	3508      	adds	r5, #8
 80068d8:	2d0c      	cmp	r5, #12
 80068da:	bf38      	it	cc
 80068dc:	250c      	movcc	r5, #12
 80068de:	4638      	mov	r0, r7
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7ff ffa5 	bl	8006830 <sbrk_aligned>
 80068e6:	3001      	adds	r0, #1
 80068e8:	d02b      	beq.n	8006942 <_malloc_r+0xd2>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	442b      	add	r3, r5
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	e00e      	b.n	8006910 <_malloc_r+0xa0>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	1b52      	subs	r2, r2, r5
 80068f6:	d41e      	bmi.n	8006936 <_malloc_r+0xc6>
 80068f8:	2a0b      	cmp	r2, #11
 80068fa:	d916      	bls.n	800692a <_malloc_r+0xba>
 80068fc:	1961      	adds	r1, r4, r5
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	bf18      	it	ne
 8006904:	6059      	strne	r1, [r3, #4]
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	bf08      	it	eq
 800690a:	6031      	streq	r1, [r6, #0]
 800690c:	5162      	str	r2, [r4, r5]
 800690e:	604b      	str	r3, [r1, #4]
 8006910:	4638      	mov	r0, r7
 8006912:	f104 060b 	add.w	r6, r4, #11
 8006916:	f000 f877 	bl	8006a08 <__malloc_unlock>
 800691a:	f026 0607 	bic.w	r6, r6, #7
 800691e:	1d23      	adds	r3, r4, #4
 8006920:	1af2      	subs	r2, r6, r3
 8006922:	d0b6      	beq.n	8006892 <_malloc_r+0x22>
 8006924:	1b9b      	subs	r3, r3, r6
 8006926:	50a3      	str	r3, [r4, r2]
 8006928:	e7b3      	b.n	8006892 <_malloc_r+0x22>
 800692a:	6862      	ldr	r2, [r4, #4]
 800692c:	42a3      	cmp	r3, r4
 800692e:	bf0c      	ite	eq
 8006930:	6032      	streq	r2, [r6, #0]
 8006932:	605a      	strne	r2, [r3, #4]
 8006934:	e7ec      	b.n	8006910 <_malloc_r+0xa0>
 8006936:	4623      	mov	r3, r4
 8006938:	6864      	ldr	r4, [r4, #4]
 800693a:	e7b2      	b.n	80068a2 <_malloc_r+0x32>
 800693c:	4634      	mov	r4, r6
 800693e:	6876      	ldr	r6, [r6, #4]
 8006940:	e7b9      	b.n	80068b6 <_malloc_r+0x46>
 8006942:	230c      	movs	r3, #12
 8006944:	4638      	mov	r0, r7
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	f000 f85e 	bl	8006a08 <__malloc_unlock>
 800694c:	e7a1      	b.n	8006892 <_malloc_r+0x22>
 800694e:	6025      	str	r5, [r4, #0]
 8006950:	e7de      	b.n	8006910 <_malloc_r+0xa0>
 8006952:	bf00      	nop
 8006954:	2000030c 	.word	0x2000030c

08006958 <_sbrk_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	2300      	movs	r3, #0
 800695c:	4d05      	ldr	r5, [pc, #20]	; (8006974 <_sbrk_r+0x1c>)
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fb fcea 	bl	800233c <_sbrk>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_sbrk_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_sbrk_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000314 	.word	0x20000314

08006978 <__assert_func>:
 8006978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800697a:	4614      	mov	r4, r2
 800697c:	461a      	mov	r2, r3
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <__assert_func+0x2c>)
 8006980:	4605      	mov	r5, r0
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68d8      	ldr	r0, [r3, #12]
 8006986:	b14c      	cbz	r4, 800699c <__assert_func+0x24>
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <__assert_func+0x30>)
 800698a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800698e:	9100      	str	r1, [sp, #0]
 8006990:	462b      	mov	r3, r5
 8006992:	4906      	ldr	r1, [pc, #24]	; (80069ac <__assert_func+0x34>)
 8006994:	f000 f80e 	bl	80069b4 <fiprintf>
 8006998:	f000 fa62 	bl	8006e60 <abort>
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <__assert_func+0x38>)
 800699e:	461c      	mov	r4, r3
 80069a0:	e7f3      	b.n	800698a <__assert_func+0x12>
 80069a2:	bf00      	nop
 80069a4:	2000000c 	.word	0x2000000c
 80069a8:	080076ec 	.word	0x080076ec
 80069ac:	080076f9 	.word	0x080076f9
 80069b0:	08007727 	.word	0x08007727

080069b4 <fiprintf>:
 80069b4:	b40e      	push	{r1, r2, r3}
 80069b6:	b503      	push	{r0, r1, lr}
 80069b8:	4601      	mov	r1, r0
 80069ba:	ab03      	add	r3, sp, #12
 80069bc:	4805      	ldr	r0, [pc, #20]	; (80069d4 <fiprintf+0x20>)
 80069be:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	9301      	str	r3, [sp, #4]
 80069c6:	f000 f84d 	bl	8006a64 <_vfiprintf_r>
 80069ca:	b002      	add	sp, #8
 80069cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d0:	b003      	add	sp, #12
 80069d2:	4770      	bx	lr
 80069d4:	2000000c 	.word	0x2000000c

080069d8 <__ascii_mbtowc>:
 80069d8:	b082      	sub	sp, #8
 80069da:	b901      	cbnz	r1, 80069de <__ascii_mbtowc+0x6>
 80069dc:	a901      	add	r1, sp, #4
 80069de:	b142      	cbz	r2, 80069f2 <__ascii_mbtowc+0x1a>
 80069e0:	b14b      	cbz	r3, 80069f6 <__ascii_mbtowc+0x1e>
 80069e2:	7813      	ldrb	r3, [r2, #0]
 80069e4:	600b      	str	r3, [r1, #0]
 80069e6:	7812      	ldrb	r2, [r2, #0]
 80069e8:	1e10      	subs	r0, r2, #0
 80069ea:	bf18      	it	ne
 80069ec:	2001      	movne	r0, #1
 80069ee:	b002      	add	sp, #8
 80069f0:	4770      	bx	lr
 80069f2:	4610      	mov	r0, r2
 80069f4:	e7fb      	b.n	80069ee <__ascii_mbtowc+0x16>
 80069f6:	f06f 0001 	mvn.w	r0, #1
 80069fa:	e7f8      	b.n	80069ee <__ascii_mbtowc+0x16>

080069fc <__malloc_lock>:
 80069fc:	4801      	ldr	r0, [pc, #4]	; (8006a04 <__malloc_lock+0x8>)
 80069fe:	f000 bbeb 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8006a02:	bf00      	nop
 8006a04:	20000318 	.word	0x20000318

08006a08 <__malloc_unlock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__malloc_unlock+0x8>)
 8006a0a:	f000 bbe6 	b.w	80071da <__retarget_lock_release_recursive>
 8006a0e:	bf00      	nop
 8006a10:	20000318 	.word	0x20000318

08006a14 <__sfputc_r>:
 8006a14:	6893      	ldr	r3, [r2, #8]
 8006a16:	b410      	push	{r4}
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	6093      	str	r3, [r2, #8]
 8006a1e:	da07      	bge.n	8006a30 <__sfputc_r+0x1c>
 8006a20:	6994      	ldr	r4, [r2, #24]
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	db01      	blt.n	8006a2a <__sfputc_r+0x16>
 8006a26:	290a      	cmp	r1, #10
 8006a28:	d102      	bne.n	8006a30 <__sfputc_r+0x1c>
 8006a2a:	bc10      	pop	{r4}
 8006a2c:	f000 b94a 	b.w	8006cc4 <__swbuf_r>
 8006a30:	6813      	ldr	r3, [r2, #0]
 8006a32:	1c58      	adds	r0, r3, #1
 8006a34:	6010      	str	r0, [r2, #0]
 8006a36:	7019      	strb	r1, [r3, #0]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	bc10      	pop	{r4}
 8006a3c:	4770      	bx	lr

08006a3e <__sfputs_r>:
 8006a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	18d5      	adds	r5, r2, r3
 8006a48:	42ac      	cmp	r4, r5
 8006a4a:	d101      	bne.n	8006a50 <__sfputs_r+0x12>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e007      	b.n	8006a60 <__sfputs_r+0x22>
 8006a50:	463a      	mov	r2, r7
 8006a52:	4630      	mov	r0, r6
 8006a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a58:	f7ff ffdc 	bl	8006a14 <__sfputc_r>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d1f3      	bne.n	8006a48 <__sfputs_r+0xa>
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a64 <_vfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	460d      	mov	r5, r1
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	4698      	mov	r8, r3
 8006a6e:	4606      	mov	r6, r0
 8006a70:	b09d      	sub	sp, #116	; 0x74
 8006a72:	b118      	cbz	r0, 8006a7c <_vfiprintf_r+0x18>
 8006a74:	6983      	ldr	r3, [r0, #24]
 8006a76:	b90b      	cbnz	r3, 8006a7c <_vfiprintf_r+0x18>
 8006a78:	f000 fb10 	bl	800709c <__sinit>
 8006a7c:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <_vfiprintf_r+0x240>)
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	d11b      	bne.n	8006aba <_vfiprintf_r+0x56>
 8006a82:	6875      	ldr	r5, [r6, #4]
 8006a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d405      	bmi.n	8006a96 <_vfiprintf_r+0x32>
 8006a8a:	89ab      	ldrh	r3, [r5, #12]
 8006a8c:	059a      	lsls	r2, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_vfiprintf_r+0x32>
 8006a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a92:	f000 fba1 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	071b      	lsls	r3, r3, #28
 8006a9a:	d501      	bpl.n	8006aa0 <_vfiprintf_r+0x3c>
 8006a9c:	692b      	ldr	r3, [r5, #16]
 8006a9e:	b9eb      	cbnz	r3, 8006adc <_vfiprintf_r+0x78>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f96e 	bl	8006d84 <__swsetup_r>
 8006aa8:	b1c0      	cbz	r0, 8006adc <_vfiprintf_r+0x78>
 8006aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aac:	07dc      	lsls	r4, r3, #31
 8006aae:	d50e      	bpl.n	8006ace <_vfiprintf_r+0x6a>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b01d      	add	sp, #116	; 0x74
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	4b7b      	ldr	r3, [pc, #492]	; (8006ca8 <_vfiprintf_r+0x244>)
 8006abc:	429d      	cmp	r5, r3
 8006abe:	d101      	bne.n	8006ac4 <_vfiprintf_r+0x60>
 8006ac0:	68b5      	ldr	r5, [r6, #8]
 8006ac2:	e7df      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006ac4:	4b79      	ldr	r3, [pc, #484]	; (8006cac <_vfiprintf_r+0x248>)
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	bf08      	it	eq
 8006aca:	68f5      	ldreq	r5, [r6, #12]
 8006acc:	e7da      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	0598      	lsls	r0, r3, #22
 8006ad2:	d4ed      	bmi.n	8006ab0 <_vfiprintf_r+0x4c>
 8006ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad6:	f000 fb80 	bl	80071da <__retarget_lock_release_recursive>
 8006ada:	e7e9      	b.n	8006ab0 <_vfiprintf_r+0x4c>
 8006adc:	2300      	movs	r3, #0
 8006ade:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae6:	2330      	movs	r3, #48	; 0x30
 8006ae8:	f04f 0901 	mov.w	r9, #1
 8006aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006cb0 <_vfiprintf_r+0x24c>
 8006af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af8:	4623      	mov	r3, r4
 8006afa:	469a      	mov	sl, r3
 8006afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b00:	b10a      	cbz	r2, 8006b06 <_vfiprintf_r+0xa2>
 8006b02:	2a25      	cmp	r2, #37	; 0x25
 8006b04:	d1f9      	bne.n	8006afa <_vfiprintf_r+0x96>
 8006b06:	ebba 0b04 	subs.w	fp, sl, r4
 8006b0a:	d00b      	beq.n	8006b24 <_vfiprintf_r+0xc0>
 8006b0c:	465b      	mov	r3, fp
 8006b0e:	4622      	mov	r2, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff93 	bl	8006a3e <__sfputs_r>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f000 80aa 	beq.w	8006c72 <_vfiprintf_r+0x20e>
 8006b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b20:	445a      	add	r2, fp
 8006b22:	9209      	str	r2, [sp, #36]	; 0x24
 8006b24:	f89a 3000 	ldrb.w	r3, [sl]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80a2 	beq.w	8006c72 <_vfiprintf_r+0x20e>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b38:	f10a 0a01 	add.w	sl, sl, #1
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	9307      	str	r3, [sp, #28]
 8006b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b44:	931a      	str	r3, [sp, #104]	; 0x68
 8006b46:	4654      	mov	r4, sl
 8006b48:	2205      	movs	r2, #5
 8006b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4e:	4858      	ldr	r0, [pc, #352]	; (8006cb0 <_vfiprintf_r+0x24c>)
 8006b50:	f7ff fa74 	bl	800603c <memchr>
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	b9d8      	cbnz	r0, 8006b90 <_vfiprintf_r+0x12c>
 8006b58:	06d1      	lsls	r1, r2, #27
 8006b5a:	bf44      	itt	mi
 8006b5c:	2320      	movmi	r3, #32
 8006b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b62:	0713      	lsls	r3, r2, #28
 8006b64:	bf44      	itt	mi
 8006b66:	232b      	movmi	r3, #43	; 0x2b
 8006b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b70:	2b2a      	cmp	r3, #42	; 0x2a
 8006b72:	d015      	beq.n	8006ba0 <_vfiprintf_r+0x13c>
 8006b74:	4654      	mov	r4, sl
 8006b76:	2000      	movs	r0, #0
 8006b78:	f04f 0c0a 	mov.w	ip, #10
 8006b7c:	9a07      	ldr	r2, [sp, #28]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b84:	3b30      	subs	r3, #48	; 0x30
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d94e      	bls.n	8006c28 <_vfiprintf_r+0x1c4>
 8006b8a:	b1b0      	cbz	r0, 8006bba <_vfiprintf_r+0x156>
 8006b8c:	9207      	str	r2, [sp, #28]
 8006b8e:	e014      	b.n	8006bba <_vfiprintf_r+0x156>
 8006b90:	eba0 0308 	sub.w	r3, r0, r8
 8006b94:	fa09 f303 	lsl.w	r3, r9, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	46a2      	mov	sl, r4
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	e7d2      	b.n	8006b46 <_vfiprintf_r+0xe2>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	1d19      	adds	r1, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	9103      	str	r1, [sp, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfbb      	ittet	lt
 8006bac:	425b      	neglt	r3, r3
 8006bae:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb2:	9307      	strge	r3, [sp, #28]
 8006bb4:	9307      	strlt	r3, [sp, #28]
 8006bb6:	bfb8      	it	lt
 8006bb8:	9204      	strlt	r2, [sp, #16]
 8006bba:	7823      	ldrb	r3, [r4, #0]
 8006bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bbe:	d10c      	bne.n	8006bda <_vfiprintf_r+0x176>
 8006bc0:	7863      	ldrb	r3, [r4, #1]
 8006bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc4:	d135      	bne.n	8006c32 <_vfiprintf_r+0x1ce>
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	3402      	adds	r4, #2
 8006bca:	1d1a      	adds	r2, r3, #4
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	9203      	str	r2, [sp, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	bfb8      	it	lt
 8006bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd8:	9305      	str	r3, [sp, #20]
 8006bda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006cb4 <_vfiprintf_r+0x250>
 8006bde:	2203      	movs	r2, #3
 8006be0:	4650      	mov	r0, sl
 8006be2:	7821      	ldrb	r1, [r4, #0]
 8006be4:	f7ff fa2a 	bl	800603c <memchr>
 8006be8:	b140      	cbz	r0, 8006bfc <_vfiprintf_r+0x198>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	eba0 000a 	sub.w	r0, r0, sl
 8006bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	3401      	adds	r4, #1
 8006bf8:	4303      	orrs	r3, r0
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c00:	2206      	movs	r2, #6
 8006c02:	482d      	ldr	r0, [pc, #180]	; (8006cb8 <_vfiprintf_r+0x254>)
 8006c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c08:	f7ff fa18 	bl	800603c <memchr>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d03f      	beq.n	8006c90 <_vfiprintf_r+0x22c>
 8006c10:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <_vfiprintf_r+0x258>)
 8006c12:	bb1b      	cbnz	r3, 8006c5c <_vfiprintf_r+0x1f8>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	3307      	adds	r3, #7
 8006c18:	f023 0307 	bic.w	r3, r3, #7
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c22:	443b      	add	r3, r7
 8006c24:	9309      	str	r3, [sp, #36]	; 0x24
 8006c26:	e767      	b.n	8006af8 <_vfiprintf_r+0x94>
 8006c28:	460c      	mov	r4, r1
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c30:	e7a5      	b.n	8006b7e <_vfiprintf_r+0x11a>
 8006c32:	2300      	movs	r3, #0
 8006c34:	f04f 0c0a 	mov.w	ip, #10
 8006c38:	4619      	mov	r1, r3
 8006c3a:	3401      	adds	r4, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c44:	3a30      	subs	r2, #48	; 0x30
 8006c46:	2a09      	cmp	r2, #9
 8006c48:	d903      	bls.n	8006c52 <_vfiprintf_r+0x1ee>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0c5      	beq.n	8006bda <_vfiprintf_r+0x176>
 8006c4e:	9105      	str	r1, [sp, #20]
 8006c50:	e7c3      	b.n	8006bda <_vfiprintf_r+0x176>
 8006c52:	4604      	mov	r4, r0
 8006c54:	2301      	movs	r3, #1
 8006c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c5a:	e7f0      	b.n	8006c3e <_vfiprintf_r+0x1da>
 8006c5c:	ab03      	add	r3, sp, #12
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4630      	mov	r0, r6
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <_vfiprintf_r+0x25c>)
 8006c66:	a904      	add	r1, sp, #16
 8006c68:	f7fd ff9e 	bl	8004ba8 <_printf_float>
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	1c78      	adds	r0, r7, #1
 8006c70:	d1d6      	bne.n	8006c20 <_vfiprintf_r+0x1bc>
 8006c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c74:	07d9      	lsls	r1, r3, #31
 8006c76:	d405      	bmi.n	8006c84 <_vfiprintf_r+0x220>
 8006c78:	89ab      	ldrh	r3, [r5, #12]
 8006c7a:	059a      	lsls	r2, r3, #22
 8006c7c:	d402      	bmi.n	8006c84 <_vfiprintf_r+0x220>
 8006c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c80:	f000 faab 	bl	80071da <__retarget_lock_release_recursive>
 8006c84:	89ab      	ldrh	r3, [r5, #12]
 8006c86:	065b      	lsls	r3, r3, #25
 8006c88:	f53f af12 	bmi.w	8006ab0 <_vfiprintf_r+0x4c>
 8006c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c8e:	e711      	b.n	8006ab4 <_vfiprintf_r+0x50>
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	462a      	mov	r2, r5
 8006c96:	4630      	mov	r0, r6
 8006c98:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <_vfiprintf_r+0x25c>)
 8006c9a:	a904      	add	r1, sp, #16
 8006c9c:	f7fe fa20 	bl	80050e0 <_printf_i>
 8006ca0:	e7e4      	b.n	8006c6c <_vfiprintf_r+0x208>
 8006ca2:	bf00      	nop
 8006ca4:	08007864 	.word	0x08007864
 8006ca8:	08007884 	.word	0x08007884
 8006cac:	08007844 	.word	0x08007844
 8006cb0:	08007732 	.word	0x08007732
 8006cb4:	08007738 	.word	0x08007738
 8006cb8:	0800773c 	.word	0x0800773c
 8006cbc:	08004ba9 	.word	0x08004ba9
 8006cc0:	08006a3f 	.word	0x08006a3f

08006cc4 <__swbuf_r>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	460e      	mov	r6, r1
 8006cc8:	4614      	mov	r4, r2
 8006cca:	4605      	mov	r5, r0
 8006ccc:	b118      	cbz	r0, 8006cd6 <__swbuf_r+0x12>
 8006cce:	6983      	ldr	r3, [r0, #24]
 8006cd0:	b90b      	cbnz	r3, 8006cd6 <__swbuf_r+0x12>
 8006cd2:	f000 f9e3 	bl	800709c <__sinit>
 8006cd6:	4b21      	ldr	r3, [pc, #132]	; (8006d5c <__swbuf_r+0x98>)
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	d12b      	bne.n	8006d34 <__swbuf_r+0x70>
 8006cdc:	686c      	ldr	r4, [r5, #4]
 8006cde:	69a3      	ldr	r3, [r4, #24]
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	071a      	lsls	r2, r3, #28
 8006ce6:	d52f      	bpl.n	8006d48 <__swbuf_r+0x84>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	b36b      	cbz	r3, 8006d48 <__swbuf_r+0x84>
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	b2f6      	uxtb	r6, r6
 8006cf2:	1ac0      	subs	r0, r0, r3
 8006cf4:	6963      	ldr	r3, [r4, #20]
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	4283      	cmp	r3, r0
 8006cfa:	dc04      	bgt.n	8006d06 <__swbuf_r+0x42>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f938 	bl	8006f74 <_fflush_r>
 8006d04:	bb30      	cbnz	r0, 8006d54 <__swbuf_r+0x90>
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	3001      	adds	r0, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	701e      	strb	r6, [r3, #0]
 8006d16:	6963      	ldr	r3, [r4, #20]
 8006d18:	4283      	cmp	r3, r0
 8006d1a:	d004      	beq.n	8006d26 <__swbuf_r+0x62>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	07db      	lsls	r3, r3, #31
 8006d20:	d506      	bpl.n	8006d30 <__swbuf_r+0x6c>
 8006d22:	2e0a      	cmp	r6, #10
 8006d24:	d104      	bne.n	8006d30 <__swbuf_r+0x6c>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f923 	bl	8006f74 <_fflush_r>
 8006d2e:	b988      	cbnz	r0, 8006d54 <__swbuf_r+0x90>
 8006d30:	4638      	mov	r0, r7
 8006d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <__swbuf_r+0x9c>)
 8006d36:	429c      	cmp	r4, r3
 8006d38:	d101      	bne.n	8006d3e <__swbuf_r+0x7a>
 8006d3a:	68ac      	ldr	r4, [r5, #8]
 8006d3c:	e7cf      	b.n	8006cde <__swbuf_r+0x1a>
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <__swbuf_r+0xa0>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	bf08      	it	eq
 8006d44:	68ec      	ldreq	r4, [r5, #12]
 8006d46:	e7ca      	b.n	8006cde <__swbuf_r+0x1a>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f81a 	bl	8006d84 <__swsetup_r>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d0cb      	beq.n	8006cec <__swbuf_r+0x28>
 8006d54:	f04f 37ff 	mov.w	r7, #4294967295
 8006d58:	e7ea      	b.n	8006d30 <__swbuf_r+0x6c>
 8006d5a:	bf00      	nop
 8006d5c:	08007864 	.word	0x08007864
 8006d60:	08007884 	.word	0x08007884
 8006d64:	08007844 	.word	0x08007844

08006d68 <__ascii_wctomb>:
 8006d68:	4603      	mov	r3, r0
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	b141      	cbz	r1, 8006d80 <__ascii_wctomb+0x18>
 8006d6e:	2aff      	cmp	r2, #255	; 0xff
 8006d70:	d904      	bls.n	8006d7c <__ascii_wctomb+0x14>
 8006d72:	228a      	movs	r2, #138	; 0x8a
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	4770      	bx	lr
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	700a      	strb	r2, [r1, #0]
 8006d80:	4770      	bx	lr
	...

08006d84 <__swsetup_r>:
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <__swsetup_r+0xcc>)
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	b125      	cbz	r5, 8006d9a <__swsetup_r+0x16>
 8006d90:	69ab      	ldr	r3, [r5, #24]
 8006d92:	b913      	cbnz	r3, 8006d9a <__swsetup_r+0x16>
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 f981 	bl	800709c <__sinit>
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <__swsetup_r+0xd0>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d10f      	bne.n	8006dc0 <__swsetup_r+0x3c>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	d42c      	bmi.n	8006e06 <__swsetup_r+0x82>
 8006dac:	06dd      	lsls	r5, r3, #27
 8006dae:	d411      	bmi.n	8006dd4 <__swsetup_r+0x50>
 8006db0:	2309      	movs	r3, #9
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	e03e      	b.n	8006e3e <__swsetup_r+0xba>
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <__swsetup_r+0xd4>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d101      	bne.n	8006dca <__swsetup_r+0x46>
 8006dc6:	68ac      	ldr	r4, [r5, #8]
 8006dc8:	e7eb      	b.n	8006da2 <__swsetup_r+0x1e>
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <__swsetup_r+0xd8>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	bf08      	it	eq
 8006dd0:	68ec      	ldreq	r4, [r5, #12]
 8006dd2:	e7e6      	b.n	8006da2 <__swsetup_r+0x1e>
 8006dd4:	0758      	lsls	r0, r3, #29
 8006dd6:	d512      	bpl.n	8006dfe <__swsetup_r+0x7a>
 8006dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dda:	b141      	cbz	r1, 8006dee <__swsetup_r+0x6a>
 8006ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <__swsetup_r+0x66>
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7ff fcdb 	bl	80067a0 <_free_r>
 8006dea:	2300      	movs	r3, #0
 8006dec:	6363      	str	r3, [r4, #52]	; 0x34
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	2300      	movs	r3, #0
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	b94b      	cbnz	r3, 8006e1e <__swsetup_r+0x9a>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d003      	beq.n	8006e1e <__swsetup_r+0x9a>
 8006e16:	4621      	mov	r1, r4
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 fa05 	bl	8007228 <__smakebuf_r>
 8006e1e:	89a0      	ldrh	r0, [r4, #12]
 8006e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e24:	f010 0301 	ands.w	r3, r0, #1
 8006e28:	d00a      	beq.n	8006e40 <__swsetup_r+0xbc>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6963      	ldr	r3, [r4, #20]
 8006e30:	425b      	negs	r3, r3
 8006e32:	61a3      	str	r3, [r4, #24]
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b943      	cbnz	r3, 8006e4a <__swsetup_r+0xc6>
 8006e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e3c:	d1ba      	bne.n	8006db4 <__swsetup_r+0x30>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	0781      	lsls	r1, r0, #30
 8006e42:	bf58      	it	pl
 8006e44:	6963      	ldrpl	r3, [r4, #20]
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	e7f4      	b.n	8006e34 <__swsetup_r+0xb0>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e7f7      	b.n	8006e3e <__swsetup_r+0xba>
 8006e4e:	bf00      	nop
 8006e50:	2000000c 	.word	0x2000000c
 8006e54:	08007864 	.word	0x08007864
 8006e58:	08007884 	.word	0x08007884
 8006e5c:	08007844 	.word	0x08007844

08006e60 <abort>:
 8006e60:	2006      	movs	r0, #6
 8006e62:	b508      	push	{r3, lr}
 8006e64:	f000 fa48 	bl	80072f8 <raise>
 8006e68:	2001      	movs	r0, #1
 8006e6a:	f7fb f9f3 	bl	8002254 <_exit>
	...

08006e70 <__sflush_r>:
 8006e70:	898a      	ldrh	r2, [r1, #12]
 8006e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e74:	4605      	mov	r5, r0
 8006e76:	0710      	lsls	r0, r2, #28
 8006e78:	460c      	mov	r4, r1
 8006e7a:	d457      	bmi.n	8006f2c <__sflush_r+0xbc>
 8006e7c:	684b      	ldr	r3, [r1, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc04      	bgt.n	8006e8c <__sflush_r+0x1c>
 8006e82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dc01      	bgt.n	8006e8c <__sflush_r+0x1c>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e8e:	2e00      	cmp	r6, #0
 8006e90:	d0fa      	beq.n	8006e88 <__sflush_r+0x18>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e98:	682f      	ldr	r7, [r5, #0]
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	d032      	beq.n	8006f04 <__sflush_r+0x94>
 8006e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ea0:	89a3      	ldrh	r3, [r4, #12]
 8006ea2:	075a      	lsls	r2, r3, #29
 8006ea4:	d505      	bpl.n	8006eb2 <__sflush_r+0x42>
 8006ea6:	6863      	ldr	r3, [r4, #4]
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006eac:	b10b      	cbz	r3, 8006eb2 <__sflush_r+0x42>
 8006eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb8:	4628      	mov	r0, r5
 8006eba:	6a21      	ldr	r1, [r4, #32]
 8006ebc:	47b0      	blx	r6
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	d106      	bne.n	8006ed2 <__sflush_r+0x62>
 8006ec4:	6829      	ldr	r1, [r5, #0]
 8006ec6:	291d      	cmp	r1, #29
 8006ec8:	d82c      	bhi.n	8006f24 <__sflush_r+0xb4>
 8006eca:	4a29      	ldr	r2, [pc, #164]	; (8006f70 <__sflush_r+0x100>)
 8006ecc:	40ca      	lsrs	r2, r1
 8006ece:	07d6      	lsls	r6, r2, #31
 8006ed0:	d528      	bpl.n	8006f24 <__sflush_r+0xb4>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	6062      	str	r2, [r4, #4]
 8006ed6:	6922      	ldr	r2, [r4, #16]
 8006ed8:	04d9      	lsls	r1, r3, #19
 8006eda:	6022      	str	r2, [r4, #0]
 8006edc:	d504      	bpl.n	8006ee8 <__sflush_r+0x78>
 8006ede:	1c42      	adds	r2, r0, #1
 8006ee0:	d101      	bne.n	8006ee6 <__sflush_r+0x76>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b903      	cbnz	r3, 8006ee8 <__sflush_r+0x78>
 8006ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eea:	602f      	str	r7, [r5, #0]
 8006eec:	2900      	cmp	r1, #0
 8006eee:	d0cb      	beq.n	8006e88 <__sflush_r+0x18>
 8006ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d002      	beq.n	8006efe <__sflush_r+0x8e>
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff fc51 	bl	80067a0 <_free_r>
 8006efe:	2000      	movs	r0, #0
 8006f00:	6360      	str	r0, [r4, #52]	; 0x34
 8006f02:	e7c2      	b.n	8006e8a <__sflush_r+0x1a>
 8006f04:	6a21      	ldr	r1, [r4, #32]
 8006f06:	2301      	movs	r3, #1
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b0      	blx	r6
 8006f0c:	1c41      	adds	r1, r0, #1
 8006f0e:	d1c7      	bne.n	8006ea0 <__sflush_r+0x30>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c4      	beq.n	8006ea0 <__sflush_r+0x30>
 8006f16:	2b1d      	cmp	r3, #29
 8006f18:	d001      	beq.n	8006f1e <__sflush_r+0xae>
 8006f1a:	2b16      	cmp	r3, #22
 8006f1c:	d101      	bne.n	8006f22 <__sflush_r+0xb2>
 8006f1e:	602f      	str	r7, [r5, #0]
 8006f20:	e7b2      	b.n	8006e88 <__sflush_r+0x18>
 8006f22:	89a3      	ldrh	r3, [r4, #12]
 8006f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f28:	81a3      	strh	r3, [r4, #12]
 8006f2a:	e7ae      	b.n	8006e8a <__sflush_r+0x1a>
 8006f2c:	690f      	ldr	r7, [r1, #16]
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	d0aa      	beq.n	8006e88 <__sflush_r+0x18>
 8006f32:	0793      	lsls	r3, r2, #30
 8006f34:	bf18      	it	ne
 8006f36:	2300      	movne	r3, #0
 8006f38:	680e      	ldr	r6, [r1, #0]
 8006f3a:	bf08      	it	eq
 8006f3c:	694b      	ldreq	r3, [r1, #20]
 8006f3e:	1bf6      	subs	r6, r6, r7
 8006f40:	600f      	str	r7, [r1, #0]
 8006f42:	608b      	str	r3, [r1, #8]
 8006f44:	2e00      	cmp	r6, #0
 8006f46:	dd9f      	ble.n	8006e88 <__sflush_r+0x18>
 8006f48:	4633      	mov	r3, r6
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	6a21      	ldr	r1, [r4, #32]
 8006f50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006f54:	47e0      	blx	ip
 8006f56:	2800      	cmp	r0, #0
 8006f58:	dc06      	bgt.n	8006f68 <__sflush_r+0xf8>
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	e790      	b.n	8006e8a <__sflush_r+0x1a>
 8006f68:	4407      	add	r7, r0
 8006f6a:	1a36      	subs	r6, r6, r0
 8006f6c:	e7ea      	b.n	8006f44 <__sflush_r+0xd4>
 8006f6e:	bf00      	nop
 8006f70:	20400001 	.word	0x20400001

08006f74 <_fflush_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	4605      	mov	r5, r0
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	b913      	cbnz	r3, 8006f84 <_fflush_r+0x10>
 8006f7e:	2500      	movs	r5, #0
 8006f80:	4628      	mov	r0, r5
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	b118      	cbz	r0, 8006f8e <_fflush_r+0x1a>
 8006f86:	6983      	ldr	r3, [r0, #24]
 8006f88:	b90b      	cbnz	r3, 8006f8e <_fflush_r+0x1a>
 8006f8a:	f000 f887 	bl	800709c <__sinit>
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <_fflush_r+0x6c>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d11b      	bne.n	8006fcc <_fflush_r+0x58>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0ef      	beq.n	8006f7e <_fflush_r+0xa>
 8006f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fa0:	07d0      	lsls	r0, r2, #31
 8006fa2:	d404      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa4:	0599      	lsls	r1, r3, #22
 8006fa6:	d402      	bmi.n	8006fae <_fflush_r+0x3a>
 8006fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006faa:	f000 f915 	bl	80071d8 <__retarget_lock_acquire_recursive>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	f7ff ff5d 	bl	8006e70 <__sflush_r>
 8006fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb8:	4605      	mov	r5, r0
 8006fba:	07da      	lsls	r2, r3, #31
 8006fbc:	d4e0      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	059b      	lsls	r3, r3, #22
 8006fc2:	d4dd      	bmi.n	8006f80 <_fflush_r+0xc>
 8006fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc6:	f000 f908 	bl	80071da <__retarget_lock_release_recursive>
 8006fca:	e7d9      	b.n	8006f80 <_fflush_r+0xc>
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <_fflush_r+0x70>)
 8006fce:	429c      	cmp	r4, r3
 8006fd0:	d101      	bne.n	8006fd6 <_fflush_r+0x62>
 8006fd2:	68ac      	ldr	r4, [r5, #8]
 8006fd4:	e7df      	b.n	8006f96 <_fflush_r+0x22>
 8006fd6:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <_fflush_r+0x74>)
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	bf08      	it	eq
 8006fdc:	68ec      	ldreq	r4, [r5, #12]
 8006fde:	e7da      	b.n	8006f96 <_fflush_r+0x22>
 8006fe0:	08007864 	.word	0x08007864
 8006fe4:	08007884 	.word	0x08007884
 8006fe8:	08007844 	.word	0x08007844

08006fec <std>:
 8006fec:	2300      	movs	r3, #0
 8006fee:	b510      	push	{r4, lr}
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ffa:	6083      	str	r3, [r0, #8]
 8006ffc:	8181      	strh	r1, [r0, #12]
 8006ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8007000:	81c2      	strh	r2, [r0, #14]
 8007002:	6183      	str	r3, [r0, #24]
 8007004:	4619      	mov	r1, r3
 8007006:	2208      	movs	r2, #8
 8007008:	305c      	adds	r0, #92	; 0x5c
 800700a:	f7fd fd27 	bl	8004a5c <memset>
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x38>)
 8007010:	6224      	str	r4, [r4, #32]
 8007012:	6263      	str	r3, [r4, #36]	; 0x24
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <std+0x3c>)
 8007016:	62a3      	str	r3, [r4, #40]	; 0x28
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <std+0x40>)
 800701a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <std+0x44>)
 800701e:	6323      	str	r3, [r4, #48]	; 0x30
 8007020:	bd10      	pop	{r4, pc}
 8007022:	bf00      	nop
 8007024:	08007331 	.word	0x08007331
 8007028:	08007353 	.word	0x08007353
 800702c:	0800738b 	.word	0x0800738b
 8007030:	080073af 	.word	0x080073af

08007034 <_cleanup_r>:
 8007034:	4901      	ldr	r1, [pc, #4]	; (800703c <_cleanup_r+0x8>)
 8007036:	f000 b8af 	b.w	8007198 <_fwalk_reent>
 800703a:	bf00      	nop
 800703c:	08006f75 	.word	0x08006f75

08007040 <__sfmoreglue>:
 8007040:	2268      	movs	r2, #104	; 0x68
 8007042:	b570      	push	{r4, r5, r6, lr}
 8007044:	1e4d      	subs	r5, r1, #1
 8007046:	4355      	muls	r5, r2
 8007048:	460e      	mov	r6, r1
 800704a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800704e:	f7ff fc0f 	bl	8006870 <_malloc_r>
 8007052:	4604      	mov	r4, r0
 8007054:	b140      	cbz	r0, 8007068 <__sfmoreglue+0x28>
 8007056:	2100      	movs	r1, #0
 8007058:	e9c0 1600 	strd	r1, r6, [r0]
 800705c:	300c      	adds	r0, #12
 800705e:	60a0      	str	r0, [r4, #8]
 8007060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007064:	f7fd fcfa 	bl	8004a5c <memset>
 8007068:	4620      	mov	r0, r4
 800706a:	bd70      	pop	{r4, r5, r6, pc}

0800706c <__sfp_lock_acquire>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__sfp_lock_acquire+0x8>)
 800706e:	f000 b8b3 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 8007072:	bf00      	nop
 8007074:	20000319 	.word	0x20000319

08007078 <__sfp_lock_release>:
 8007078:	4801      	ldr	r0, [pc, #4]	; (8007080 <__sfp_lock_release+0x8>)
 800707a:	f000 b8ae 	b.w	80071da <__retarget_lock_release_recursive>
 800707e:	bf00      	nop
 8007080:	20000319 	.word	0x20000319

08007084 <__sinit_lock_acquire>:
 8007084:	4801      	ldr	r0, [pc, #4]	; (800708c <__sinit_lock_acquire+0x8>)
 8007086:	f000 b8a7 	b.w	80071d8 <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	2000031a 	.word	0x2000031a

08007090 <__sinit_lock_release>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sinit_lock_release+0x8>)
 8007092:	f000 b8a2 	b.w	80071da <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	2000031a 	.word	0x2000031a

0800709c <__sinit>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	f7ff fff0 	bl	8007084 <__sinit_lock_acquire>
 80070a4:	69a3      	ldr	r3, [r4, #24]
 80070a6:	b11b      	cbz	r3, 80070b0 <__sinit+0x14>
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f7ff bff0 	b.w	8007090 <__sinit_lock_release>
 80070b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070b4:	6523      	str	r3, [r4, #80]	; 0x50
 80070b6:	4b13      	ldr	r3, [pc, #76]	; (8007104 <__sinit+0x68>)
 80070b8:	4a13      	ldr	r2, [pc, #76]	; (8007108 <__sinit+0x6c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80070be:	42a3      	cmp	r3, r4
 80070c0:	bf08      	it	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	4620      	mov	r0, r4
 80070c6:	bf08      	it	eq
 80070c8:	61a3      	streq	r3, [r4, #24]
 80070ca:	f000 f81f 	bl	800710c <__sfp>
 80070ce:	6060      	str	r0, [r4, #4]
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 f81b 	bl	800710c <__sfp>
 80070d6:	60a0      	str	r0, [r4, #8]
 80070d8:	4620      	mov	r0, r4
 80070da:	f000 f817 	bl	800710c <__sfp>
 80070de:	2200      	movs	r2, #0
 80070e0:	2104      	movs	r1, #4
 80070e2:	60e0      	str	r0, [r4, #12]
 80070e4:	6860      	ldr	r0, [r4, #4]
 80070e6:	f7ff ff81 	bl	8006fec <std>
 80070ea:	2201      	movs	r2, #1
 80070ec:	2109      	movs	r1, #9
 80070ee:	68a0      	ldr	r0, [r4, #8]
 80070f0:	f7ff ff7c 	bl	8006fec <std>
 80070f4:	2202      	movs	r2, #2
 80070f6:	2112      	movs	r1, #18
 80070f8:	68e0      	ldr	r0, [r4, #12]
 80070fa:	f7ff ff77 	bl	8006fec <std>
 80070fe:	2301      	movs	r3, #1
 8007100:	61a3      	str	r3, [r4, #24]
 8007102:	e7d1      	b.n	80070a8 <__sinit+0xc>
 8007104:	080074c8 	.word	0x080074c8
 8007108:	08007035 	.word	0x08007035

0800710c <__sfp>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	4607      	mov	r7, r0
 8007110:	f7ff ffac 	bl	800706c <__sfp_lock_acquire>
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <__sfp+0x84>)
 8007116:	681e      	ldr	r6, [r3, #0]
 8007118:	69b3      	ldr	r3, [r6, #24]
 800711a:	b913      	cbnz	r3, 8007122 <__sfp+0x16>
 800711c:	4630      	mov	r0, r6
 800711e:	f7ff ffbd 	bl	800709c <__sinit>
 8007122:	3648      	adds	r6, #72	; 0x48
 8007124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007128:	3b01      	subs	r3, #1
 800712a:	d503      	bpl.n	8007134 <__sfp+0x28>
 800712c:	6833      	ldr	r3, [r6, #0]
 800712e:	b30b      	cbz	r3, 8007174 <__sfp+0x68>
 8007130:	6836      	ldr	r6, [r6, #0]
 8007132:	e7f7      	b.n	8007124 <__sfp+0x18>
 8007134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007138:	b9d5      	cbnz	r5, 8007170 <__sfp+0x64>
 800713a:	4b16      	ldr	r3, [pc, #88]	; (8007194 <__sfp+0x88>)
 800713c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007140:	60e3      	str	r3, [r4, #12]
 8007142:	6665      	str	r5, [r4, #100]	; 0x64
 8007144:	f000 f847 	bl	80071d6 <__retarget_lock_init_recursive>
 8007148:	f7ff ff96 	bl	8007078 <__sfp_lock_release>
 800714c:	2208      	movs	r2, #8
 800714e:	4629      	mov	r1, r5
 8007150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007158:	6025      	str	r5, [r4, #0]
 800715a:	61a5      	str	r5, [r4, #24]
 800715c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007160:	f7fd fc7c 	bl	8004a5c <memset>
 8007164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800716c:	4620      	mov	r0, r4
 800716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007170:	3468      	adds	r4, #104	; 0x68
 8007172:	e7d9      	b.n	8007128 <__sfp+0x1c>
 8007174:	2104      	movs	r1, #4
 8007176:	4638      	mov	r0, r7
 8007178:	f7ff ff62 	bl	8007040 <__sfmoreglue>
 800717c:	4604      	mov	r4, r0
 800717e:	6030      	str	r0, [r6, #0]
 8007180:	2800      	cmp	r0, #0
 8007182:	d1d5      	bne.n	8007130 <__sfp+0x24>
 8007184:	f7ff ff78 	bl	8007078 <__sfp_lock_release>
 8007188:	230c      	movs	r3, #12
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	e7ee      	b.n	800716c <__sfp+0x60>
 800718e:	bf00      	nop
 8007190:	080074c8 	.word	0x080074c8
 8007194:	ffff0001 	.word	0xffff0001

08007198 <_fwalk_reent>:
 8007198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	4688      	mov	r8, r1
 80071a0:	2700      	movs	r7, #0
 80071a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071aa:	f1b9 0901 	subs.w	r9, r9, #1
 80071ae:	d505      	bpl.n	80071bc <_fwalk_reent+0x24>
 80071b0:	6824      	ldr	r4, [r4, #0]
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	d1f7      	bne.n	80071a6 <_fwalk_reent+0xe>
 80071b6:	4638      	mov	r0, r7
 80071b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071bc:	89ab      	ldrh	r3, [r5, #12]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d907      	bls.n	80071d2 <_fwalk_reent+0x3a>
 80071c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c6:	3301      	adds	r3, #1
 80071c8:	d003      	beq.n	80071d2 <_fwalk_reent+0x3a>
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	47c0      	blx	r8
 80071d0:	4307      	orrs	r7, r0
 80071d2:	3568      	adds	r5, #104	; 0x68
 80071d4:	e7e9      	b.n	80071aa <_fwalk_reent+0x12>

080071d6 <__retarget_lock_init_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_acquire_recursive>:
 80071d8:	4770      	bx	lr

080071da <__retarget_lock_release_recursive>:
 80071da:	4770      	bx	lr

080071dc <__swhatbuf_r>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	460e      	mov	r6, r1
 80071e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e4:	4614      	mov	r4, r2
 80071e6:	2900      	cmp	r1, #0
 80071e8:	461d      	mov	r5, r3
 80071ea:	b096      	sub	sp, #88	; 0x58
 80071ec:	da08      	bge.n	8007200 <__swhatbuf_r+0x24>
 80071ee:	2200      	movs	r2, #0
 80071f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071f4:	602a      	str	r2, [r5, #0]
 80071f6:	061a      	lsls	r2, r3, #24
 80071f8:	d410      	bmi.n	800721c <__swhatbuf_r+0x40>
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	e00e      	b.n	800721e <__swhatbuf_r+0x42>
 8007200:	466a      	mov	r2, sp
 8007202:	f000 f8fb 	bl	80073fc <_fstat_r>
 8007206:	2800      	cmp	r0, #0
 8007208:	dbf1      	blt.n	80071ee <__swhatbuf_r+0x12>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007214:	425a      	negs	r2, r3
 8007216:	415a      	adcs	r2, r3
 8007218:	602a      	str	r2, [r5, #0]
 800721a:	e7ee      	b.n	80071fa <__swhatbuf_r+0x1e>
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	2000      	movs	r0, #0
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	b016      	add	sp, #88	; 0x58
 8007224:	bd70      	pop	{r4, r5, r6, pc}
	...

08007228 <__smakebuf_r>:
 8007228:	898b      	ldrh	r3, [r1, #12]
 800722a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800722c:	079d      	lsls	r5, r3, #30
 800722e:	4606      	mov	r6, r0
 8007230:	460c      	mov	r4, r1
 8007232:	d507      	bpl.n	8007244 <__smakebuf_r+0x1c>
 8007234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	2301      	movs	r3, #1
 800723e:	6163      	str	r3, [r4, #20]
 8007240:	b002      	add	sp, #8
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	466a      	mov	r2, sp
 8007246:	ab01      	add	r3, sp, #4
 8007248:	f7ff ffc8 	bl	80071dc <__swhatbuf_r>
 800724c:	9900      	ldr	r1, [sp, #0]
 800724e:	4605      	mov	r5, r0
 8007250:	4630      	mov	r0, r6
 8007252:	f7ff fb0d 	bl	8006870 <_malloc_r>
 8007256:	b948      	cbnz	r0, 800726c <__smakebuf_r+0x44>
 8007258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d4ef      	bmi.n	8007240 <__smakebuf_r+0x18>
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e7e3      	b.n	8007234 <__smakebuf_r+0xc>
 800726c:	4b0d      	ldr	r3, [pc, #52]	; (80072a4 <__smakebuf_r+0x7c>)
 800726e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007270:	89a3      	ldrh	r3, [r4, #12]
 8007272:	6020      	str	r0, [r4, #0]
 8007274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	6120      	str	r0, [r4, #16]
 800727e:	6163      	str	r3, [r4, #20]
 8007280:	9b01      	ldr	r3, [sp, #4]
 8007282:	b15b      	cbz	r3, 800729c <__smakebuf_r+0x74>
 8007284:	4630      	mov	r0, r6
 8007286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800728a:	f000 f8c9 	bl	8007420 <_isatty_r>
 800728e:	b128      	cbz	r0, 800729c <__smakebuf_r+0x74>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	f043 0301 	orr.w	r3, r3, #1
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	89a0      	ldrh	r0, [r4, #12]
 800729e:	4305      	orrs	r5, r0
 80072a0:	81a5      	strh	r5, [r4, #12]
 80072a2:	e7cd      	b.n	8007240 <__smakebuf_r+0x18>
 80072a4:	08007035 	.word	0x08007035

080072a8 <_raise_r>:
 80072a8:	291f      	cmp	r1, #31
 80072aa:	b538      	push	{r3, r4, r5, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	460d      	mov	r5, r1
 80072b0:	d904      	bls.n	80072bc <_raise_r+0x14>
 80072b2:	2316      	movs	r3, #22
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072be:	b112      	cbz	r2, 80072c6 <_raise_r+0x1e>
 80072c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072c4:	b94b      	cbnz	r3, 80072da <_raise_r+0x32>
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f830 	bl	800732c <_getpid_r>
 80072cc:	462a      	mov	r2, r5
 80072ce:	4601      	mov	r1, r0
 80072d0:	4620      	mov	r0, r4
 80072d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072d6:	f000 b817 	b.w	8007308 <_kill_r>
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d00a      	beq.n	80072f4 <_raise_r+0x4c>
 80072de:	1c59      	adds	r1, r3, #1
 80072e0:	d103      	bne.n	80072ea <_raise_r+0x42>
 80072e2:	2316      	movs	r3, #22
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7e7      	b.n	80072ba <_raise_r+0x12>
 80072ea:	2400      	movs	r4, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072f2:	4798      	blx	r3
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7e0      	b.n	80072ba <_raise_r+0x12>

080072f8 <raise>:
 80072f8:	4b02      	ldr	r3, [pc, #8]	; (8007304 <raise+0xc>)
 80072fa:	4601      	mov	r1, r0
 80072fc:	6818      	ldr	r0, [r3, #0]
 80072fe:	f7ff bfd3 	b.w	80072a8 <_raise_r>
 8007302:	bf00      	nop
 8007304:	2000000c 	.word	0x2000000c

08007308 <_kill_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	2300      	movs	r3, #0
 800730c:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_kill_r+0x20>)
 800730e:	4604      	mov	r4, r0
 8007310:	4608      	mov	r0, r1
 8007312:	4611      	mov	r1, r2
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	f7fa ff8d 	bl	8002234 <_kill>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	d102      	bne.n	8007324 <_kill_r+0x1c>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	b103      	cbz	r3, 8007324 <_kill_r+0x1c>
 8007322:	6023      	str	r3, [r4, #0]
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	bf00      	nop
 8007328:	20000314 	.word	0x20000314

0800732c <_getpid_r>:
 800732c:	f7fa bf7b 	b.w	8002226 <_getpid>

08007330 <__sread>:
 8007330:	b510      	push	{r4, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	f000 f894 	bl	8007464 <_read_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	bfab      	itete	ge
 8007340:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007342:	89a3      	ldrhlt	r3, [r4, #12]
 8007344:	181b      	addge	r3, r3, r0
 8007346:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800734a:	bfac      	ite	ge
 800734c:	6563      	strge	r3, [r4, #84]	; 0x54
 800734e:	81a3      	strhlt	r3, [r4, #12]
 8007350:	bd10      	pop	{r4, pc}

08007352 <__swrite>:
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	461f      	mov	r7, r3
 8007358:	898b      	ldrh	r3, [r1, #12]
 800735a:	4605      	mov	r5, r0
 800735c:	05db      	lsls	r3, r3, #23
 800735e:	460c      	mov	r4, r1
 8007360:	4616      	mov	r6, r2
 8007362:	d505      	bpl.n	8007370 <__swrite+0x1e>
 8007364:	2302      	movs	r3, #2
 8007366:	2200      	movs	r2, #0
 8007368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800736c:	f000 f868 	bl	8007440 <_lseek_r>
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	4632      	mov	r2, r6
 8007374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	4628      	mov	r0, r5
 800737c:	463b      	mov	r3, r7
 800737e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007386:	f000 b817 	b.w	80073b8 <_write_r>

0800738a <__sseek>:
 800738a:	b510      	push	{r4, lr}
 800738c:	460c      	mov	r4, r1
 800738e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007392:	f000 f855 	bl	8007440 <_lseek_r>
 8007396:	1c43      	adds	r3, r0, #1
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	bf15      	itete	ne
 800739c:	6560      	strne	r0, [r4, #84]	; 0x54
 800739e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073a6:	81a3      	strheq	r3, [r4, #12]
 80073a8:	bf18      	it	ne
 80073aa:	81a3      	strhne	r3, [r4, #12]
 80073ac:	bd10      	pop	{r4, pc}

080073ae <__sclose>:
 80073ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b2:	f000 b813 	b.w	80073dc <_close_r>
	...

080073b8 <_write_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	2200      	movs	r2, #0
 80073c2:	4d05      	ldr	r5, [pc, #20]	; (80073d8 <_write_r+0x20>)
 80073c4:	602a      	str	r2, [r5, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f7fa ff6b 	bl	80022a2 <_write>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_write_r+0x1e>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_write_r+0x1e>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20000314 	.word	0x20000314

080073dc <_close_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	2300      	movs	r3, #0
 80073e0:	4d05      	ldr	r5, [pc, #20]	; (80073f8 <_close_r+0x1c>)
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7fa ff77 	bl	80022da <_close>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_close_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_close_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	20000314 	.word	0x20000314

080073fc <_fstat_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	2300      	movs	r3, #0
 8007400:	4d06      	ldr	r5, [pc, #24]	; (800741c <_fstat_r+0x20>)
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	4611      	mov	r1, r2
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f7fa ff71 	bl	80022f0 <_fstat>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d102      	bne.n	8007418 <_fstat_r+0x1c>
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	b103      	cbz	r3, 8007418 <_fstat_r+0x1c>
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	bd38      	pop	{r3, r4, r5, pc}
 800741a:	bf00      	nop
 800741c:	20000314 	.word	0x20000314

08007420 <_isatty_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	2300      	movs	r3, #0
 8007424:	4d05      	ldr	r5, [pc, #20]	; (800743c <_isatty_r+0x1c>)
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	f7fa ff6f 	bl	800230e <_isatty>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d102      	bne.n	800743a <_isatty_r+0x1a>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	b103      	cbz	r3, 800743a <_isatty_r+0x1a>
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	20000314 	.word	0x20000314

08007440 <_lseek_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	2200      	movs	r2, #0
 800744a:	4d05      	ldr	r5, [pc, #20]	; (8007460 <_lseek_r+0x20>)
 800744c:	602a      	str	r2, [r5, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	f7fa ff67 	bl	8002322 <_lseek>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_lseek_r+0x1e>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_lseek_r+0x1e>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20000314 	.word	0x20000314

08007464 <_read_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	2200      	movs	r2, #0
 800746e:	4d05      	ldr	r5, [pc, #20]	; (8007484 <_read_r+0x20>)
 8007470:	602a      	str	r2, [r5, #0]
 8007472:	461a      	mov	r2, r3
 8007474:	f7fa fef8 	bl	8002268 <_read>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d102      	bne.n	8007482 <_read_r+0x1e>
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	b103      	cbz	r3, 8007482 <_read_r+0x1e>
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	20000314 	.word	0x20000314

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
